declare module '@elastic/eui/src/components/accessibility/screen_reader' {
	import { ReactElement, FunctionComponent } from 'react';
	export interface EuiScreenReaderOnlyProps {
	    /**
	     * ReactElement to render as this component's content
	     */
	    children: ReactElement<any>;
	    /**
	     * For keyboard navigation, force content to display visually upon focus.
	     */
	    showOnFocus?: boolean;
	}
	export const EuiScreenReaderOnly: FunctionComponent<EuiScreenReaderOnlyProps>;

}
declare module '@elastic/eui/src/components/common' {
	import { AnchorHTMLAttributes, ButtonHTMLAttributes, ComponentProps, Component, FunctionComponent, JSXElementConstructor, MouseEventHandler, SFC } from 'react';
	export interface CommonProps {
	    className?: string;
	    'aria-label'?: string;
	    'data-test-subj'?: string;
	}
	export type NoArgCallback<T> = () => T;
	export const assertNever: (x: never) => never;
	/**
	 * XOR for some properties applied to a type
	 * (XOR is one of these but not both or neither)
	 *
	 * Usage: OneOf<typeToExtend, one | but | not | multiple | of | these | are | required>
	 *
	 * To require aria-label or aria-labelledby but not both
	 * Example: OneOf<Type, 'aria-label' | 'aria-labelledby'>
	 */
	export type OneOf<T, K extends keyof T> = Omit<T, K> & {
	    [k in K]: Pick<Required<T>, k> & {
	        [k1 in Exclude<K, k>]?: never;
	    };
	}[K];
	/**
	 * Wraps Object.keys with proper typescript definition of the resulting array
	 */
	export function keysOf<T, K extends keyof T>(obj: T): K[];
	/**
	 * Like `keyof typeof`, but for getting values instead of keys
	 * ValueOf<typeof {key1: 'value1', key2: 'value2'}>
	 * Results in `'value1' | 'value2'`
	 */
	export type ValueOf<T> = T[keyof T];
	export type PropsOf<C> = C extends SFC<infer SFCProps> ? SFCProps : C extends FunctionComponent<infer FunctionProps> ? FunctionProps : C extends Component<infer ComponentProps> ? ComponentProps : never;
	export type PropsOfElement<C extends keyof JSX.IntrinsicElements | JSXElementConstructor<any>> = JSX.LibraryManagedAttributes<C, ComponentProps<C>>; type ExtractDefaultProps<T> = T extends {
	    defaultProps: infer D;
	} ? D : never; type ExtractProps<C extends new (...args: any) => any, IT = InstanceType<C>> = IT extends Component<infer P> ? P : never;
	/**
	 * Because of how TypeScript's LibraryManagedAttributes is designed to handle defaultProps (https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-0.html#support-for-defaultprops-in-jsx)
	 * we can't directly export the props definition as the defaulted values are not made optional,
	 * because it isn't processed by LibraryManagedAttributes. To get around this, we:
	 * - remove the props which have default values applied
	 * - export (Props - Defaults) & Partial<Defaults>
	 */
	export type ApplyClassComponentDefaults<C extends new (...args: any) => any, D = ExtractDefaultProps<C>, P = ExtractProps<C>> = Omit<P, keyof D> & {
	    [K in keyof D]?: K extends keyof P ? P[K] : never;
	}; type UnionKeys<T> = T extends any ? keyof T : never;
	export type DistributivePick<T, K extends UnionKeys<T>> = T extends any ? Pick<T, Extract<keyof T, K>> : never;
	export type DistributiveOmit<T, K extends UnionKeys<T>> = T extends any ? Omit<T, Extract<keyof T, K>> : never; type RecursiveDistributiveOmit<T, K extends PropertyKey> = T extends any ? T extends object ? RecursiveOmit<T, K> : T : never;
	export type RecursiveOmit<T, K extends PropertyKey> = Omit<{
	    [P in keyof T]: RecursiveDistributiveOmit<T[P], K>;
	}, K>;
	/**
	 * Returns member keys in U not present in T set to never
	 * T = { 'one', 'two', 'three' }
	 * U = { 'three', 'four', 'five' }
	 * returns { 'four': never, 'five': never }
	 */
	export type DisambiguateSet<T, U> = {
	    [P in Exclude<keyof T, keyof U>]?: never;
	};
	/**
	 * Allow either T or U, preventing any additional keys of the other type from being present
	 */
	export type ExclusiveUnion<T, U> = T | U extends object ? (DisambiguateSet<T, U> & U) | (DisambiguateSet<U, T> & T) : T | U;
	/**
	 * For components that conditionally render <button> or <a>
	 * Convenience types for extending base props (T) and
	 * element-specific props (P) with standard clickable properties
	 *
	 * These will likely be used together, along with `ExclusiveUnion`:
	 *
	 * type AnchorLike = PropsForAnchor<BaseProps>
	 * type ButtonLike = PropsForButton<BaseProps>
	 * type ComponentProps = ExclusiveUnion<AnchorLike, ButtonLike>
	 * const Component: FunctionComponent<ComponentProps> ...
	 */
	export type PropsForAnchor<T, P = {}> = T & {
	    href?: string;
	    onClick?: MouseEventHandler<HTMLAnchorElement>;
	} & AnchorHTMLAttributes<HTMLAnchorElement> & P;
	export type PropsForButton<T, P = {}> = T & {
	    onClick?: MouseEventHandler<HTMLButtonElement>;
	} & ButtonHTMLAttributes<HTMLButtonElement> & P;
	/**
	 * Replaces all properties on any type as optional, includes nested types
	 *
	 * @example
	 * ```ts
	 * interface Person {
	 *  name: string;
	 *  age?: number;
	 *  spouse: Person;
	 *  children: Person[];
	 * }
	 * type PartialPerson = RecursivePartial<Person>;
	 * // results in
	 * interface PartialPerson {
	 *  name?: string;
	 *  age?: number;
	 *  spouse?: RecursivePartial<Person>;
	 *  children?: RecursivePartial<Person>[]
	 * }
	 * ```
	 */
	export type RecursivePartial<T> = {
	    [P in keyof T]?: T[P] extends NonAny[] ? T[P] : T[P] extends readonly NonAny[] ? T[P] : T[P] extends Array<infer U> ? Array<RecursivePartial<U>> : T[P] extends ReadonlyArray<infer U> ? ReadonlyArray<RecursivePartial<U>> : T[P] extends Set<infer V> ? Set<RecursivePartial<V>> : T[P] extends Map<infer K, infer V> ? Map<K, RecursivePartial<V>> : T[P] extends NonAny ? T[P] : RecursivePartial<T[P]>;
	}; type NonAny = number | boolean | string | symbol | null;
	export {};

}
declare module '@elastic/eui/src/services/keys' {
	export const ENTER = "Enter";
	export const SPACE = " ";
	export const ESCAPE = "Escape";
	export const TAB = "Tab";
	export const BACKSPACE = "Backspace";
	export const F2 = "F2";
	export const ARROW_DOWN = "ArrowDown";
	export const ARROW_UP = "ArrowUp";
	export const ARROW_LEFT = "ArrowLeft";
	export const ARROW_RIGHT = "ArrowRight";
	export const PAGE_UP = "PageUp";
	export const PAGE_DOWN = "PageDown";
	export const END = "End";
	export const HOME = "Home";
	export enum keys {
	    ENTER = "Enter",
	    SPACE = " ",
	    ESCAPE = "Escape",
	    TAB = "Tab",
	    BACKSPACE = "Backspace",
	    F2 = "F2",
	    ARROW_DOWN = "ArrowDown",
	    ARROW_UP = "ArrowUp",
	    ARROW_LEFT = "ArrowLeft",
	    ARROW_RIGHT = "ArrowRight",
	    PAGE_UP = "PageUp",
	    PAGE_DOWN = "PageDown",
	    END = "End",
	    HOME = "Home"
	}

}
declare module '@elastic/eui/src/services/accessibility/accessible_click_keys' {
	import { ENTER, SPACE } from '@elastic/eui/src/services/keys';
	export const accessibleClickKeys: {
	    Enter: string;
	    " ": string;
	};

}
declare module '@elastic/eui/src/services/accessibility/cascading_menu_keys' {
	export const cascadingMenuKeys: {
	    ARROW_DOWN: string;
	    ARROW_LEFT: string;
	    ARROW_RIGHT: string;
	    ARROW_UP: string;
	    ESCAPE: string;
	    TAB: string;
	};

}
declare module '@elastic/eui/src/services/accessibility/combo_box_keys' {
	export const comboBoxKeys: {
	    ARROW_DOWN: string;
	    ARROW_UP: string;
	    ENTER: string;
	    ESCAPE: string;
	    TAB: string;
	};

}
declare module '@elastic/eui/src/services/accessibility/html_id_generator' {
	/**
	 * This function returns a function to generate ids.
	 * This can be used to generate unique, but predictable ids to pair labels
	 * with their inputs. It takes an optional prefix as a parameter. If you don't
	 * specify it, it generates a random id prefix. If you specify a custom prefix
	 * it should begin with an letter to be HTML4 compliant.
	 */
	export function htmlIdGenerator(idPrefix?: string): (idSuffix?: string) => string;
	/**
	 * Generates a memoized ID that remains static until component unmount.
	 * This prevents IDs from being re-randomized on every component update.
	 */
	export type UseGeneratedHtmlIdOptions = {
	    /**
	     * Optional prefix to prepend to the generated ID
	     */
	    prefix?: string;
	    /**
	     * Optional suffix to append to the generated ID
	     */
	    suffix?: string;
	    /**
	     * Optional conditional ID to use instead of a randomly generated ID.
	     * Typically used by EUI components where IDs can be passed in as custom props
	     */
	    conditionalId?: string;
	};
	export const useGeneratedHtmlId: ({ prefix, suffix, conditionalId, }?: UseGeneratedHtmlIdOptions) => string;

}
declare module '@elastic/eui/src/services/accessibility' {
	export { accessibleClickKeys } from '@elastic/eui/src/services/accessibility/accessible_click_keys';
	export { cascadingMenuKeys } from '@elastic/eui/src/services/accessibility/cascading_menu_keys';
	export { comboBoxKeys } from '@elastic/eui/src/services/accessibility/combo_box_keys';
	export { htmlIdGenerator, useGeneratedHtmlId } from '@elastic/eui/src/services/accessibility/html_id_generator';

}
declare module '@elastic/eui/src/services/alignment' {
	export const LEFT_ALIGNMENT = "left";
	export const RIGHT_ALIGNMENT = "right";
	export const CENTER_ALIGNMENT = "center";
	export type HorizontalAlignment = 'left' | 'right' | 'center';

}
declare module '@elastic/eui/src/services/breakpoint' {
	export type EuiBreakpointSize = 'xs' | 's' | 'm' | 'l' | 'xl';
	export type EuiBreakpoints = {
	    [key in EuiBreakpointSize]: number;
	};
	export const BREAKPOINTS: EuiBreakpoints;
	export const BREAKPOINT_KEYS: EuiBreakpointSize[];
	/**
	 * Given the current `width` and an object of `EuiBreakpoints`,
	 * this function returns the string that is the name of the breakpoint key
	 * that is less than or equal to the width
	 *
	 * @param {number} width Can either be the full window width or any width
	 * @param {EuiBreakpoints} breakpoints An object with keys for sizing and values for minimum width
	 * @returns {string | undefined} Name of the breakpoint key or `undefined` if a key doesn't exist
	 */
	export function getBreakpoint(width: number, breakpoints?: EuiBreakpoints): EuiBreakpointSize | undefined;
	/**
	 * Given the current `width` and a max breakpoint key,
	 * this function returns true or false if the `width` falls within the max
	 * breakpoint or any breakpoints below
	 *
	 * @param {number} width Can either be the full window width or any width
	 * @param {EuiBreakpointSize | number} max The named breakpoint or custom number to check against
	 * @param {EuiBreakpoints} breakpoints An object with keys for sizing and values for minimum width
	 * @returns {boolean} Will return `false` if it can't find a value for the `max` breakpoint
	 */
	export function isWithinMaxBreakpoint(width: number, max: EuiBreakpointSize | number, breakpoints?: EuiBreakpoints): boolean;
	/**
	 * Given the current `width` and a min breakpoint key,
	 * this function returns true or false if the `width` falls within the min
	 * breakpoint or any breakpoints above
	 *
	 * @param {number} width Can either be the full window width or any width
	 * @param {EuiBreakpointSize | number} min The named breakpoint or custom number to check against
	 * @param {EuiBreakpoints} breakpoints An object with keys for sizing and values for minimum width
	 * @returns {boolean} Will return `false` if it can't find a value for the `min` breakpoint
	 */
	export function isWithinMinBreakpoint(width: number, min: EuiBreakpointSize | number, breakpoints?: EuiBreakpoints): boolean;
	/**
	 * Given the current `width` and an array of breakpoint keys,
	 * this function returns true or false if the `width` falls within
	 * any of the named breakpoints
	 *
	 * @param {number} width Can either be the full window width or any width
	 * @param {EuiBreakpointSize[]} sizes An array of named breakpoints
	 * @param {EuiBreakpoints} breakpoints An object with keys for sizing and values for minimum width
	 * @returns {boolean} Returns `true` if current breakpoint name is included in `sizes`
	 */
	export function isWithinBreakpoints(width: number, sizes: EuiBreakpointSize[], breakpoints?: EuiBreakpoints): boolean;

}
declare module '@elastic/eui/src/services/color/is_color_dark' {
	/**
	 * This function calculates if the specified color is "dark", which usually means
	 * you need light text if you use it as a background color to fulfill WCAG contrast
	 * requirement.
	 * The color must be specified via its red, green and blue value in the range of
	 * 0 to 255.
	 * The formula is based on this Stackoverflow answer: https://stackoverflow.com/a/3943023
	 * which itself is based upon the WCAG recommendation for color contrast.
	 *
	 * @param {number} red The red component in the range 0 to 255
	 * @param {number} green The green component in the range 0 to 255
	 * @param {number} blue The blue component in the range 0 to 255
	 * @returns {boolean} True if the color is dark, false otherwise.
	 */
	export function isColorDark(red: number, green: number, blue: number): boolean;

}
declare module '@elastic/eui/src/services/color/is_valid_hex' {
	export function isValidHex(hex: string): boolean;

}
declare module '@elastic/eui/src/services/color/color_types' {
	export type rgbDef = [number, number, number];
	export interface HSV {
	    h: number;
	    s: number;
	    v: number;
	}
	export interface RGB {
	    r: number;
	    g: number;
	    b: number;
	}
	export type HEX = string;

}
declare module '@elastic/eui/src/services/color/hex_to_rgb' {
	import { rgbDef } from '@elastic/eui/src/services/color/color_types';
	export function hexToRgb(hex: string): rgbDef;

}
declare module '@elastic/eui/src/services/color/rgb_to_hsv' {
	import { HSV, RGB } from '@elastic/eui/src/services/color/color_types';
	export function rgbToHsv({ r, g, b }: RGB): HSV;

}
declare module '@elastic/eui/src/services/color/hex_to_hsv' {
	import { HEX, HSV } from '@elastic/eui/src/services/color/color_types';
	export function hexToHsv(hex: HEX): HSV;

}
declare module '@elastic/eui/src/services/color/hsv_to_rgb' {
	import { HSV, RGB } from '@elastic/eui/src/services/color/color_types';
	export function hsvToRgb({ h, s, v }: HSV): RGB;

}
declare module '@elastic/eui/src/services/color/rgb_to_hex' {
	export function rgbToHex(rgb: string): string;

}
declare module '@elastic/eui/src/services/color/hsv_to_hex' {
	import { HEX, HSV } from '@elastic/eui/src/services/color/color_types';
	export function hsvToHex({ h, s, v }: HSV): HEX;

}
declare module '@elastic/eui/src/services/color/luminance_and_contrast' {
	import { rgbDef } from '@elastic/eui/src/services/color/color_types';
	export function calculateLuminance(r: number, g: number, b: number): number;
	export function calculateContrast(rgb1: rgbDef, rgb2: rgbDef): number;

}
declare module '@elastic/eui/src/services/color/color_palette' {
	export const MID_COLOR_STOP = "#EBEFF5";
	/**
	 * This function takes an array of colors and returns an array of interpolated
	 * colors based on the number of steps/len needed for use in UI elements such as charts.
	 * Derived from https://github.com/gka/palettes (Unlicensed)
	 */
	export function colorPalette(
	/**
	 * The main color code or array of codes
	 */
	colors: string[], 
	/**
	 * The number of colors in the resulting array (default 10)
	 */
	len?: number, 
	/**
	 * Forces color interpolation to be calculated separately for each half (default false)
	 */
	diverging?: boolean, 
	/**
	 * Uses a more static interpolation for non-continuous spectrums
	 */
	categorical?: boolean): string[];

}
declare module '@elastic/eui/src/services/color/eui_palettes' {
	export type EuiPalette = string[];
	export interface EuiPaletteColorBlindProps {
	    /**
	     * How many variations of the series is needed
	     */
	    rotations?: number;
	    /**
	     * Order similar colors as `group`s or just `append` each variation
	     */
	    order?: 'append' | 'group';
	    /**
	     * Specifies if the direction of the color variations
	     */
	    direction?: 'lighter' | 'darker' | 'both';
	    /**
	     * Use the default sort order, or re-sort them based on the color wheel (natural)
	     */
	    sortBy?: 'default' | 'natural';
	    /**
	     * Shift the sorting order by a certain number when used in conjunction with `'natural'` `sortBy`.
	     * Defaults to a number close to green.
	     */
	    sortShift?: string;
	}
	export const euiPaletteColorBlind: ({ rotations, order, direction, sortBy, sortShift, }?: EuiPaletteColorBlindProps) => EuiPalette;
	/**
	 * Color blind palette with text is meant for use when text is applied on top of the color.
	 * It increases the brightness of the color to give the text more contrast.
	 */
	export const euiPaletteColorBlindBehindText: (paletteProps?: EuiPaletteColorBlindProps) => string[];
	export const euiPaletteForLightBackground: () => EuiPalette;
	export const euiPaletteForDarkBackground: () => EuiPalette;
	export const euiPaletteForStatus: (steps: number) => EuiPalette;
	export const euiPaletteForTemperature: (steps: number) => EuiPalette;
	export const euiPaletteComplimentary: (steps: number) => EuiPalette;
	export const euiPaletteNegative: (steps: number) => EuiPalette;
	export const euiPalettePositive: (steps: number) => EuiPalette;
	export const euiPaletteCool: (steps: number) => EuiPalette;
	export const euiPaletteWarm: (steps: number) => EuiPalette;
	export const euiPaletteGray: (steps: number) => EuiPalette;

}
declare module '@elastic/eui/src/services/color/visualization_colors' {
	export const VISUALIZATION_COLORS: import ("@elastic/eui/src/services/color/eui_palettes").EuiPalette;
	export const DEFAULT_VISUALIZATION_COLOR: string;

}
declare module '@elastic/eui/src/components/color_picker/utils' {
	import chroma, { ColorSpaces } from 'chroma-js';
	import { ColorStop } from '@elastic/eui/src/components/color_picker/color_stops';
	export const getEventPosition: (location: {
	    x: number;
	    y: number;
	}, container: HTMLElement) => {
	    left: number;
	    top: number;
	    width: number;
	    height: number;
	};
	export const HEX_FALLBACK = "";
	export const HSV_FALLBACK: ColorSpaces['hsv'];
	export const RGB_FALLBACK: ColorSpaces['rgba'];
	export const RGB_JOIN = ", ";
	export const parseColor: (input?: string | null | undefined) => string | number[] | null;
	export const chromaValid: (color: string | number[]) => boolean;
	export const getChromaColor: (input?: string | null | undefined, allowOpacity?: boolean) => chroma.Color | null;
	export const getLinearGradient: (palette: string[] | ColorStop[]) => string;
	export const getFixedLinearGradient: (palette: string[] | ColorStop[]) => {
	    color: string;
	    width: string;
	}[];

}
declare module '@elastic/eui/src/components/form/range/utils' {
	export const EUI_THUMB_SIZE = 16;
	export const calculateThumbPosition: (value: number, min: number, max: number, width: number, thumbSize?: number) => number;

}
declare module '@elastic/eui/src/components/color_picker/color_stops/utils' {
	import { ColorStop } from '@elastic/eui/src/components/color_picker/color_stops/color_stop_thumb';
	export const removeStop: (colorStops: ColorStop[], index: number) => ColorStop[];
	export const addDefinedStop: (colorStops: ColorStop[], stop: ColorStop['stop'], color?: ColorStop['color']) => ColorStop[];
	export const addStop: (colorStops: ColorStop[], color: string | undefined, max: number) => ColorStop[];
	export const isColorInvalid: (color: string, showAlpha?: boolean) => boolean;
	export const isStopInvalid: (stop: ColorStop['stop']) => boolean;
	export const isInvalid: (colorStops: ColorStop[], showAlpha?: boolean) => boolean;
	export const calculateScale: (trackWidth: number) => number;
	export const getStopFromMouseLocation: (location: {
	    x: number;
	    y: number;
	}, ref: HTMLDivElement, min: number, max: number) => number;
	export const getPositionFromStop: (stop: ColorStop['stop'], ref: HTMLDivElement, min: number, max: number) => number;

}
declare module '@elastic/eui/src/components/icon/assets/empty' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/services/react' {
	export function enqueueStateChange(fn: Function): void;

}
declare module '@elastic/eui/src/components/icon/named_colors' {
	export const colorToClassMap: {
	    default: null;
	    primary: string;
	    success: string;
	    accent: string;
	    warning: string;
	    danger: string;
	    text: string;
	    subdued: string;
	    ghost: string;
	    inherit: string;
	};
	export type NamedColor = keyof typeof colorToClassMap;
	export function isNamedColor(name: string): name is NamedColor;

}
declare module '@elastic/eui/src/components/icon/icon' {
	import React, { PureComponent, ComponentType, SVGAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { NamedColor } from '@elastic/eui/src/components/icon/named_colors'; const typeToPathMap: {
	    accessibility: string;
	    addDataApp: string;
	    advancedSettingsApp: string;
	    agentApp: string;
	    aggregate: string;
	    alert: string;
	    analyzeEvent: string;
	    annotation: string;
	    apmApp: string;
	    apmTrace: string;
	    appSearchApp: string;
	    apps: string;
	    arrowDown: string;
	    arrowLeft: string;
	    arrowRight: string;
	    arrowUp: string;
	    arrowStart: string;
	    arrowEnd: string;
	    asterisk: string;
	    auditbeatApp: string;
	    beaker: string;
	    bell: string;
	    bellSlash: string;
	    bolt: string;
	    boxesHorizontal: string;
	    boxesVertical: string;
	    branch: string;
	    broom: string;
	    brush: string;
	    bug: string;
	    bullseye: string;
	    calendar: string;
	    canvasApp: string;
	    check: string;
	    checkInCircleFilled: string;
	    cheer: string;
	    classificationJob: string;
	    clock: string;
	    cloudDrizzle: string;
	    cloudStormy: string;
	    cloudSunny: string;
	    codeApp: string;
	    color: string;
	    compute: string;
	    console: string;
	    consoleApp: string;
	    continuityAbove: string;
	    continuityAboveBelow: string;
	    continuityBelow: string;
	    continuityWithin: string;
	    controlsHorizontal: string;
	    controlsVertical: string;
	    copy: string;
	    copyClipboard: string;
	    createAdvancedJob: string;
	    createMultiMetricJob: string;
	    createPopulationJob: string;
	    createSingleMetricJob: string;
	    cross: string;
	    crossClusterReplicationApp: string;
	    crossInACircleFilled: string;
	    crosshairs: string;
	    currency: string;
	    cut: string;
	    dashboardApp: string;
	    dataVisualizer: string;
	    database: string;
	    devToolsApp: string;
	    discoverApp: string;
	    document: string;
	    documentEdit: string;
	    documentation: string;
	    documents: string;
	    dot: string;
	    doubleArrowLeft: string;
	    doubleArrowRight: string;
	    download: string;
	    editorAlignCenter: string;
	    editorAlignLeft: string;
	    editorAlignRight: string;
	    editorBold: string;
	    editorCodeBlock: string;
	    editorComment: string;
	    editorDistributeHorizontal: string;
	    editorDistributeVertical: string;
	    editorHeading: string;
	    editorItalic: string;
	    editorItemAlignBottom: string;
	    editorItemAlignCenter: string;
	    editorItemAlignLeft: string;
	    editorItemAlignMiddle: string;
	    editorItemAlignRight: string;
	    editorItemAlignTop: string;
	    editorLink: string;
	    editorOrderedList: string;
	    editorPositionBottomLeft: string;
	    editorPositionBottomRight: string;
	    editorPositionTopLeft: string;
	    editorPositionTopRight: string;
	    editorRedo: string;
	    editorStrike: string;
	    editorTable: string;
	    editorUnderline: string;
	    editorUndo: string;
	    editorUnorderedList: string;
	    email: string;
	    empty: string;
	    emsApp: string;
	    eql: string;
	    eraser: string;
	    exit: string;
	    expand: string;
	    expandMini: string;
	    exportAction: string;
	    eye: string;
	    eyeClosed: string;
	    faceHappy: string;
	    faceNeutral: string;
	    faceSad: string;
	    filebeatApp: string;
	    filter: string;
	    flag: string;
	    fleetApp: string;
	    fold: string;
	    folderCheck: string;
	    folderClosed: string;
	    folderExclamation: string;
	    folderOpen: string;
	    frameNext: string;
	    framePrevious: string;
	    fullScreen: string;
	    fullScreenExit: string;
	    function: string;
	    gear: string;
	    gisApp: string;
	    glasses: string;
	    globe: string;
	    grab: string;
	    grabHorizontal: string;
	    graphApp: string;
	    grid: string;
	    grokApp: string;
	    heart: string;
	    heartbeatApp: string;
	    heatmap: string;
	    help: string;
	    home: string;
	    iInCircle: string;
	    image: string;
	    importAction: string;
	    indexClose: string;
	    indexEdit: string;
	    indexFlush: string;
	    indexManagementApp: string;
	    indexMapping: string;
	    indexOpen: string;
	    indexPatternApp: string;
	    indexRollupApp: string;
	    indexRuntime: string;
	    indexSettings: string;
	    inputOutput: string;
	    inspect: string;
	    invert: string;
	    ip: string;
	    keyboardShortcut: string;
	    kqlField: string;
	    kqlFunction: string;
	    kqlOperand: string;
	    kqlSelector: string;
	    kqlValue: string;
	    layers: string;
	    lensApp: string;
	    lettering: string;
	    link: string;
	    list: string;
	    listAdd: string;
	    lock: string;
	    lockOpen: string;
	    logoAWS: string;
	    logoAWSMono: string;
	    logoAerospike: string;
	    logoApache: string;
	    logoAppSearch: string;
	    logoAzure: string;
	    logoAzureMono: string;
	    logoBeats: string;
	    logoBusinessAnalytics: string;
	    logoCeph: string;
	    logoCloud: string;
	    logoCloudEnterprise: string;
	    logoCode: string;
	    logoCodesandbox: string;
	    logoCouchbase: string;
	    logoDocker: string;
	    logoDropwizard: string;
	    logoElastic: string;
	    logoElasticStack: string;
	    logoElasticsearch: string;
	    logoEnterpriseSearch: string;
	    logoEtcd: string;
	    logoGCP: string;
	    logoGCPMono: string;
	    logoGithub: string;
	    logoGmail: string;
	    logoGolang: string;
	    logoGoogleG: string;
	    logoHAproxy: string;
	    logoIBM: string;
	    logoIBMMono: string;
	    logoKafka: string;
	    logoKibana: string;
	    logoKubernetes: string;
	    logoLogging: string;
	    logoLogstash: string;
	    logoMaps: string;
	    logoMemcached: string;
	    logoMetrics: string;
	    logoMongodb: string;
	    logoMySQL: string;
	    logoNginx: string;
	    logoObservability: string;
	    logoOsquery: string;
	    logoPhp: string;
	    logoPostgres: string;
	    logoPrometheus: string;
	    logoRabbitmq: string;
	    logoRedis: string;
	    logoSecurity: string;
	    logoSiteSearch: string;
	    logoSketch: string;
	    logoSlack: string;
	    logoUptime: string;
	    logoWebhook: string;
	    logoWindows: string;
	    logoWorkplaceSearch: string;
	    logsApp: string;
	    logstashFilter: string;
	    logstashIf: string;
	    logstashInput: string;
	    logstashOutput: string;
	    logstashQueue: string;
	    machineLearningApp: string;
	    magnet: string;
	    magnifyWithExclamation: string;
	    magnifyWithMinus: string;
	    magnifyWithPlus: string;
	    managementApp: string;
	    mapMarker: string;
	    memory: string;
	    menu: string;
	    menuDown: string;
	    menuLeft: string;
	    menuRight: string;
	    menuUp: string;
	    merge: string;
	    metricbeatApp: string;
	    metricsApp: string;
	    minimize: string;
	    minus: string;
	    minusInCircle: string;
	    minusInCircleFilled: string;
	    mobile: string;
	    monitoringApp: string;
	    moon: string;
	    nested: string;
	    node: string;
	    notebookApp: string;
	    number: string;
	    offline: string;
	    online: string;
	    outlierDetectionJob: string;
	    package: string;
	    packetbeatApp: string;
	    pageSelect: string;
	    pagesSelect: string;
	    paperClip: string;
	    partial: string;
	    pause: string;
	    payment: string;
	    pencil: string;
	    percent: string;
	    pin: string;
	    pinFilled: string;
	    pipelineApp: string;
	    play: string;
	    playFilled: string;
	    plus: string;
	    plusInCircle: string;
	    plusInCircleFilled: string;
	    popout: string;
	    push: string;
	    questionInCircle: string;
	    quote: string;
	    recentlyViewedApp: string;
	    refresh: string;
	    regressionJob: string;
	    reporter: string;
	    reportingApp: string;
	    returnKey: string;
	    save: string;
	    savedObjectsApp: string;
	    scale: string;
	    search: string;
	    searchProfilerApp: string;
	    securityAnalyticsApp: string;
	    securityApp: string;
	    securitySignal: string;
	    securitySignalDetected: string;
	    securitySignalResolved: string;
	    shard: string;
	    share: string;
	    snowflake: string;
	    sortDown: string;
	    sortLeft: string;
	    sortRight: string;
	    sortUp: string;
	    sortable: string;
	    spacesApp: string;
	    sqlApp: string;
	    starEmpty: string;
	    starEmptySpace: string;
	    starFilled: string;
	    starFilledSpace: string;
	    starMinusEmpty: string;
	    starMinusFilled: string;
	    starPlusEmpty: string;
	    starPlusFilled: string;
	    stats: string;
	    stop: string;
	    stopFilled: string;
	    stopSlash: string;
	    storage: string;
	    string: string;
	    submodule: string;
	    sun: string;
	    swatchInput: string;
	    symlink: string;
	    tableDensityCompact: string;
	    tableDensityExpanded: string;
	    tableDensityNormal: string;
	    tableOfContents: string;
	    tag: string;
	    tear: string;
	    temperature: string;
	    timeline: string;
	    timelionApp: string;
	    timeRefresh: string;
	    timeslider: string;
	    training: string;
	    trash: string;
	    unfold: string;
	    unlink: string;
	    upgradeAssistantApp: string;
	    uptimeApp: string;
	    user: string;
	    users: string;
	    usersRolesApp: string;
	    vector: string;
	    videoPlayer: string;
	    visArea: string;
	    visAreaStacked: string;
	    visBarHorizontal: string;
	    visBarHorizontalStacked: string;
	    visBarVertical: string;
	    visBarVerticalStacked: string;
	    visGauge: string;
	    visGoal: string;
	    visLine: string;
	    visMapCoordinate: string;
	    visMapRegion: string;
	    visMetric: string;
	    visPie: string;
	    visTable: string;
	    visTagCloud: string;
	    visText: string;
	    visTimelion: string;
	    visVega: string;
	    visVisualBuilder: string;
	    visualizeApp: string;
	    watchesApp: string;
	    wordWrap: string;
	    wordWrapDisabled: string;
	    workplaceSearchApp: string;
	    wrench: string;
	    tokenClass: string;
	    tokenProperty: string;
	    tokenEnum: string;
	    tokenVariable: string;
	    tokenMethod: string;
	    tokenAnnotation: string;
	    tokenException: string;
	    tokenInterface: string;
	    tokenParameter: string;
	    tokenField: string;
	    tokenElement: string;
	    tokenFunction: string;
	    tokenBoolean: string;
	    tokenString: string;
	    tokenArray: string;
	    tokenNumber: string;
	    tokenConstant: string;
	    tokenObject: string;
	    tokenEvent: string;
	    tokenKey: string;
	    tokenNull: string;
	    tokenStruct: string;
	    tokenPackage: string;
	    tokenOperator: string;
	    tokenEnumMember: string;
	    tokenRepo: string;
	    tokenSymbol: string;
	    tokenFile: string;
	    tokenModule: string;
	    tokenNamespace: string;
	    tokenDate: string;
	    tokenIP: string;
	    tokenNested: string;
	    tokenAlias: string;
	    tokenShape: string;
	    tokenGeo: string;
	    tokenRange: string;
	    tokenBinary: string;
	    tokenJoin: string;
	    tokenPercolator: string;
	    tokenFlattened: string;
	    tokenRankFeature: string;
	    tokenRankFeatures: string;
	    tokenKeyword: string;
	    tokenTag: string;
	    tokenCompletionSuggester: string;
	    tokenDenseVector: string;
	    tokenText: string;
	    tokenTokenCount: string;
	    tokenSearchType: string;
	    tokenHistogram: string;
	};
	export const TYPES: ("string" | "number" | "function" | "link" | "menu" | "search" | "filter" | "image" | "stop" | "temperature" | "color" | "scale" | "list" | "copy" | "grid" | "accessibility" | "aggregate" | "alert" | "analyzeEvent" | "annotation" | "apps" | "arrowStart" | "arrowEnd" | "asterisk" | "beaker" | "bell" | "bellSlash" | "bolt" | "branch" | "broom" | "brush" | "bug" | "bullseye" | "calendar" | "check" | "checkInCircleFilled" | "cheer" | "clock" | "cloudDrizzle" | "cloudStormy" | "cloudSunny" | "compute" | "console" | "continuityAbove" | "continuityAboveBelow" | "continuityBelow" | "continuityWithin" | "cross" | "crossInACircleFilled" | "crosshairs" | "currency" | "cut" | "database" | "document" | "documentEdit" | "documentation" | "documents" | "dot" | "doubleArrowLeft" | "doubleArrowRight" | "download" | "editorDistributeHorizontal" | "editorDistributeVertical" | "editorItemAlignBottom" | "editorItemAlignCenter" | "editorItemAlignLeft" | "editorItemAlignMiddle" | "editorItemAlignRight" | "editorItemAlignTop" | "editorPositionBottomLeft" | "editorPositionBottomRight" | "editorPositionTopLeft" | "editorPositionTopRight" | "email" | "empty" | "eql" | "eraser" | "exit" | "expand" | "expandMini" | "eye" | "flag" | "fold" | "frameNext" | "framePrevious" | "fullScreenExit" | "gear" | "glasses" | "globe" | "grab" | "heart" | "heatmap" | "help" | "home" | "iInCircle" | "inputOutput" | "inspect" | "invert" | "ip" | "layers" | "lettering" | "lock" | "lockOpen" | "magnet" | "magnifyWithExclamation" | "magnifyWithMinus" | "magnifyWithPlus" | "memory" | "menuDown" | "menuLeft" | "menuRight" | "menuUp" | "merge" | "minimize" | "minus" | "mobile" | "moon" | "nested" | "node" | "offline" | "online" | "package" | "pageSelect" | "pagesSelect" | "partial" | "pause" | "payment" | "pencil" | "percent" | "pin" | "play" | "playFilled" | "plus" | "popout" | "push" | "quote" | "refresh" | "reporter" | "save" | "securitySignal" | "securitySignalDetected" | "securitySignalResolved" | "shard" | "share" | "snowflake" | "sortLeft" | "sortRight" | "sortable" | "starPlusEmpty" | "starPlusFilled" | "stats" | "storage" | "submodule" | "sun" | "symlink" | "tableOfContents" | "tag" | "tear" | "timeline" | "timeRefresh" | "timeslider" | "training" | "trash" | "unfold" | "unlink" | "user" | "users" | "vector" | "videoPlayer" | "wordWrap" | "wordWrapDisabled" | "wrench" | "tokenClass" | "tokenProperty" | "tokenEnum" | "tokenVariable" | "tokenMethod" | "tokenAnnotation" | "tokenException" | "tokenInterface" | "tokenParameter" | "tokenField" | "tokenElement" | "tokenFunction" | "tokenBoolean" | "tokenString" | "tokenArray" | "tokenNumber" | "tokenConstant" | "tokenObject" | "tokenEvent" | "tokenKey" | "tokenNull" | "tokenStruct" | "tokenPackage" | "tokenOperator" | "tokenEnumMember" | "tokenRepo" | "tokenSymbol" | "tokenFile" | "tokenModule" | "tokenNamespace" | "tokenDate" | "tokenIP" | "tokenNested" | "tokenAlias" | "tokenShape" | "tokenGeo" | "tokenRange" | "tokenBinary" | "tokenJoin" | "tokenPercolator" | "tokenFlattened" | "tokenRankFeature" | "tokenRankFeatures" | "tokenKeyword" | "tokenTag" | "tokenCompletionSuggester" | "tokenDenseVector" | "tokenText" | "tokenTokenCount" | "tokenSearchType" | "tokenHistogram" | "addDataApp" | "advancedSettingsApp" | "agentApp" | "apmApp" | "apmTrace" | "appSearchApp" | "arrowDown" | "arrowLeft" | "arrowRight" | "arrowUp" | "auditbeatApp" | "boxesHorizontal" | "boxesVertical" | "canvasApp" | "classificationJob" | "codeApp" | "consoleApp" | "controlsHorizontal" | "controlsVertical" | "copyClipboard" | "createAdvancedJob" | "createMultiMetricJob" | "createPopulationJob" | "createSingleMetricJob" | "crossClusterReplicationApp" | "dashboardApp" | "dataVisualizer" | "devToolsApp" | "discoverApp" | "editorAlignCenter" | "editorAlignLeft" | "editorAlignRight" | "editorBold" | "editorCodeBlock" | "editorComment" | "editorHeading" | "editorItalic" | "editorLink" | "editorOrderedList" | "editorRedo" | "editorStrike" | "editorTable" | "editorUnderline" | "editorUndo" | "editorUnorderedList" | "emsApp" | "exportAction" | "eyeClosed" | "faceHappy" | "faceNeutral" | "faceSad" | "filebeatApp" | "fleetApp" | "folderCheck" | "folderClosed" | "folderExclamation" | "folderOpen" | "fullScreen" | "gisApp" | "grabHorizontal" | "graphApp" | "grokApp" | "heartbeatApp" | "importAction" | "indexClose" | "indexEdit" | "indexFlush" | "indexManagementApp" | "indexMapping" | "indexOpen" | "indexPatternApp" | "indexRollupApp" | "indexRuntime" | "indexSettings" | "keyboardShortcut" | "kqlField" | "kqlFunction" | "kqlOperand" | "kqlSelector" | "kqlValue" | "lensApp" | "listAdd" | "logoAWS" | "logoAWSMono" | "logoAerospike" | "logoApache" | "logoAppSearch" | "logoAzure" | "logoAzureMono" | "logoBeats" | "logoBusinessAnalytics" | "logoCeph" | "logoCloud" | "logoCloudEnterprise" | "logoCode" | "logoCodesandbox" | "logoCouchbase" | "logoDocker" | "logoDropwizard" | "logoElastic" | "logoElasticStack" | "logoElasticsearch" | "logoEnterpriseSearch" | "logoEtcd" | "logoGCP" | "logoGCPMono" | "logoGithub" | "logoGmail" | "logoGolang" | "logoGoogleG" | "logoHAproxy" | "logoIBM" | "logoIBMMono" | "logoKafka" | "logoKibana" | "logoKubernetes" | "logoLogging" | "logoLogstash" | "logoMaps" | "logoMemcached" | "logoMetrics" | "logoMongodb" | "logoMySQL" | "logoNginx" | "logoObservability" | "logoOsquery" | "logoPhp" | "logoPostgres" | "logoPrometheus" | "logoRabbitmq" | "logoRedis" | "logoSecurity" | "logoSiteSearch" | "logoSketch" | "logoSlack" | "logoUptime" | "logoWebhook" | "logoWindows" | "logoWorkplaceSearch" | "logsApp" | "logstashFilter" | "logstashIf" | "logstashInput" | "logstashOutput" | "logstashQueue" | "machineLearningApp" | "managementApp" | "mapMarker" | "metricbeatApp" | "metricsApp" | "minusInCircle" | "minusInCircleFilled" | "monitoringApp" | "notebookApp" | "outlierDetectionJob" | "packetbeatApp" | "paperClip" | "pinFilled" | "pipelineApp" | "plusInCircle" | "plusInCircleFilled" | "questionInCircle" | "recentlyViewedApp" | "regressionJob" | "reportingApp" | "returnKey" | "savedObjectsApp" | "searchProfilerApp" | "securityAnalyticsApp" | "securityApp" | "sortDown" | "sortUp" | "spacesApp" | "sqlApp" | "starEmpty" | "starEmptySpace" | "starFilled" | "starFilledSpace" | "starMinusEmpty" | "starMinusFilled" | "stopFilled" | "stopSlash" | "swatchInput" | "tableDensityCompact" | "tableDensityExpanded" | "tableDensityNormal" | "timelionApp" | "upgradeAssistantApp" | "uptimeApp" | "usersRolesApp" | "visArea" | "visAreaStacked" | "visBarHorizontal" | "visBarHorizontalStacked" | "visBarVertical" | "visBarVerticalStacked" | "visGauge" | "visGoal" | "visLine" | "visMapCoordinate" | "visMapRegion" | "visMetric" | "visPie" | "visTable" | "visTagCloud" | "visText" | "visTimelion" | "visVega" | "visVisualBuilder" | "visualizeApp" | "watchesApp" | "workplaceSearchApp")[];
	export type EuiIconType = keyof typeof typeToPathMap;
	export type IconType = EuiIconType | string | ComponentType;
	export const COLORS: NamedColor[];
	export type IconColor = string | NamedColor; const sizeToClassNameMap: {
	    original: null;
	    s: string;
	    m: string;
	    l: string;
	    xl: string;
	    xxl: string;
	};
	export const SIZES: IconSize[];
	export type IconSize = keyof typeof sizeToClassNameMap;
	export type EuiIconProps = CommonProps & Omit<SVGAttributes<SVGElement>, 'type' | 'color' | 'size'> & {
	    /**
	     * `Enum` is any of the named icons listed in the docs, `string` is usually a URL to an SVG file, and `elementType` is any React SVG component
	     */
	    type: IconType;
	    /**
	     * One of EUI's color palette or a valid CSS color value https://developer.mozilla.org/en-US/docs/Web/CSS/color_value.
	     * Note that coloring only works if your SVG is removed of fill attributes.
	     */
	    color?: IconColor;
	    /**
	     * Note that every size other than `original` assumes the provided SVG sits on a square viewbox.
	     */
	    size?: IconSize;
	    /**
	     * Descriptive title for naming the icon based on its use
	     */
	    title?: string;
	    /**
	     * A unique identifier for the title element
	     */
	    titleId?: string;
	    /**
	     * Its value should be one or more element IDs
	     */
	    'aria-labelledby'?: string;
	    /**
	     * Callback when the icon has been loaded & rendered
	     */
	    onIconLoad?: () => void;
	};
	interface State {
	    icon: undefined | ComponentType | string;
	    iconTitle: undefined | string;
	    isLoading: boolean;
	    neededLoading: boolean;
	}
	export const clearIconComponentCache: (iconType?: "string" | "number" | "function" | "link" | "menu" | "search" | "filter" | "image" | "stop" | "temperature" | "color" | "scale" | "list" | "copy" | "grid" | "accessibility" | "aggregate" | "alert" | "analyzeEvent" | "annotation" | "apps" | "arrowStart" | "arrowEnd" | "asterisk" | "beaker" | "bell" | "bellSlash" | "bolt" | "branch" | "broom" | "brush" | "bug" | "bullseye" | "calendar" | "check" | "checkInCircleFilled" | "cheer" | "clock" | "cloudDrizzle" | "cloudStormy" | "cloudSunny" | "compute" | "console" | "continuityAbove" | "continuityAboveBelow" | "continuityBelow" | "continuityWithin" | "cross" | "crossInACircleFilled" | "crosshairs" | "currency" | "cut" | "database" | "document" | "documentEdit" | "documentation" | "documents" | "dot" | "doubleArrowLeft" | "doubleArrowRight" | "download" | "editorDistributeHorizontal" | "editorDistributeVertical" | "editorItemAlignBottom" | "editorItemAlignCenter" | "editorItemAlignLeft" | "editorItemAlignMiddle" | "editorItemAlignRight" | "editorItemAlignTop" | "editorPositionBottomLeft" | "editorPositionBottomRight" | "editorPositionTopLeft" | "editorPositionTopRight" | "email" | "empty" | "eql" | "eraser" | "exit" | "expand" | "expandMini" | "eye" | "flag" | "fold" | "frameNext" | "framePrevious" | "fullScreenExit" | "gear" | "glasses" | "globe" | "grab" | "heart" | "heatmap" | "help" | "home" | "iInCircle" | "inputOutput" | "inspect" | "invert" | "ip" | "layers" | "lettering" | "lock" | "lockOpen" | "magnet" | "magnifyWithExclamation" | "magnifyWithMinus" | "magnifyWithPlus" | "memory" | "menuDown" | "menuLeft" | "menuRight" | "menuUp" | "merge" | "minimize" | "minus" | "mobile" | "moon" | "nested" | "node" | "offline" | "online" | "package" | "pageSelect" | "pagesSelect" | "partial" | "pause" | "payment" | "pencil" | "percent" | "pin" | "play" | "playFilled" | "plus" | "popout" | "push" | "quote" | "refresh" | "reporter" | "save" | "securitySignal" | "securitySignalDetected" | "securitySignalResolved" | "shard" | "share" | "snowflake" | "sortLeft" | "sortRight" | "sortable" | "starPlusEmpty" | "starPlusFilled" | "stats" | "storage" | "submodule" | "sun" | "symlink" | "tableOfContents" | "tag" | "tear" | "timeline" | "timeRefresh" | "timeslider" | "training" | "trash" | "unfold" | "unlink" | "user" | "users" | "vector" | "videoPlayer" | "wordWrap" | "wordWrapDisabled" | "wrench" | "tokenClass" | "tokenProperty" | "tokenEnum" | "tokenVariable" | "tokenMethod" | "tokenAnnotation" | "tokenException" | "tokenInterface" | "tokenParameter" | "tokenField" | "tokenElement" | "tokenFunction" | "tokenBoolean" | "tokenString" | "tokenArray" | "tokenNumber" | "tokenConstant" | "tokenObject" | "tokenEvent" | "tokenKey" | "tokenNull" | "tokenStruct" | "tokenPackage" | "tokenOperator" | "tokenEnumMember" | "tokenRepo" | "tokenSymbol" | "tokenFile" | "tokenModule" | "tokenNamespace" | "tokenDate" | "tokenIP" | "tokenNested" | "tokenAlias" | "tokenShape" | "tokenGeo" | "tokenRange" | "tokenBinary" | "tokenJoin" | "tokenPercolator" | "tokenFlattened" | "tokenRankFeature" | "tokenRankFeatures" | "tokenKeyword" | "tokenTag" | "tokenCompletionSuggester" | "tokenDenseVector" | "tokenText" | "tokenTokenCount" | "tokenSearchType" | "tokenHistogram" | "addDataApp" | "advancedSettingsApp" | "agentApp" | "apmApp" | "apmTrace" | "appSearchApp" | "arrowDown" | "arrowLeft" | "arrowRight" | "arrowUp" | "auditbeatApp" | "boxesHorizontal" | "boxesVertical" | "canvasApp" | "classificationJob" | "codeApp" | "consoleApp" | "controlsHorizontal" | "controlsVertical" | "copyClipboard" | "createAdvancedJob" | "createMultiMetricJob" | "createPopulationJob" | "createSingleMetricJob" | "crossClusterReplicationApp" | "dashboardApp" | "dataVisualizer" | "devToolsApp" | "discoverApp" | "editorAlignCenter" | "editorAlignLeft" | "editorAlignRight" | "editorBold" | "editorCodeBlock" | "editorComment" | "editorHeading" | "editorItalic" | "editorLink" | "editorOrderedList" | "editorRedo" | "editorStrike" | "editorTable" | "editorUnderline" | "editorUndo" | "editorUnorderedList" | "emsApp" | "exportAction" | "eyeClosed" | "faceHappy" | "faceNeutral" | "faceSad" | "filebeatApp" | "fleetApp" | "folderCheck" | "folderClosed" | "folderExclamation" | "folderOpen" | "fullScreen" | "gisApp" | "grabHorizontal" | "graphApp" | "grokApp" | "heartbeatApp" | "importAction" | "indexClose" | "indexEdit" | "indexFlush" | "indexManagementApp" | "indexMapping" | "indexOpen" | "indexPatternApp" | "indexRollupApp" | "indexRuntime" | "indexSettings" | "keyboardShortcut" | "kqlField" | "kqlFunction" | "kqlOperand" | "kqlSelector" | "kqlValue" | "lensApp" | "listAdd" | "logoAWS" | "logoAWSMono" | "logoAerospike" | "logoApache" | "logoAppSearch" | "logoAzure" | "logoAzureMono" | "logoBeats" | "logoBusinessAnalytics" | "logoCeph" | "logoCloud" | "logoCloudEnterprise" | "logoCode" | "logoCodesandbox" | "logoCouchbase" | "logoDocker" | "logoDropwizard" | "logoElastic" | "logoElasticStack" | "logoElasticsearch" | "logoEnterpriseSearch" | "logoEtcd" | "logoGCP" | "logoGCPMono" | "logoGithub" | "logoGmail" | "logoGolang" | "logoGoogleG" | "logoHAproxy" | "logoIBM" | "logoIBMMono" | "logoKafka" | "logoKibana" | "logoKubernetes" | "logoLogging" | "logoLogstash" | "logoMaps" | "logoMemcached" | "logoMetrics" | "logoMongodb" | "logoMySQL" | "logoNginx" | "logoObservability" | "logoOsquery" | "logoPhp" | "logoPostgres" | "logoPrometheus" | "logoRabbitmq" | "logoRedis" | "logoSecurity" | "logoSiteSearch" | "logoSketch" | "logoSlack" | "logoUptime" | "logoWebhook" | "logoWindows" | "logoWorkplaceSearch" | "logsApp" | "logstashFilter" | "logstashIf" | "logstashInput" | "logstashOutput" | "logstashQueue" | "machineLearningApp" | "managementApp" | "mapMarker" | "metricbeatApp" | "metricsApp" | "minusInCircle" | "minusInCircleFilled" | "monitoringApp" | "notebookApp" | "outlierDetectionJob" | "packetbeatApp" | "paperClip" | "pinFilled" | "pipelineApp" | "plusInCircle" | "plusInCircleFilled" | "questionInCircle" | "recentlyViewedApp" | "regressionJob" | "reportingApp" | "returnKey" | "savedObjectsApp" | "searchProfilerApp" | "securityAnalyticsApp" | "securityApp" | "sortDown" | "sortUp" | "spacesApp" | "sqlApp" | "starEmpty" | "starEmptySpace" | "starFilled" | "starFilledSpace" | "starMinusEmpty" | "starMinusFilled" | "stopFilled" | "stopSlash" | "swatchInput" | "tableDensityCompact" | "tableDensityExpanded" | "tableDensityNormal" | "timelionApp" | "upgradeAssistantApp" | "uptimeApp" | "usersRolesApp" | "visArea" | "visAreaStacked" | "visBarHorizontal" | "visBarHorizontalStacked" | "visBarVertical" | "visBarVerticalStacked" | "visGauge" | "visGoal" | "visLine" | "visMapCoordinate" | "visMapRegion" | "visMetric" | "visPie" | "visTable" | "visTagCloud" | "visText" | "visTimelion" | "visVega" | "visVisualBuilder" | "visualizeApp" | "watchesApp" | "workplaceSearchApp" | undefined) => void;
	export const appendIconComponentCache: (iconTypeToIconComponentMap: {
	    [iconType: string]: React.ComponentType<{}>;
	}) => void;
	export class EuiIcon extends PureComponent<EuiIconProps, State> {
	    isMounted: boolean;
	    constructor(props: EuiIconProps);
	    componentDidUpdate(prevProps: EuiIconProps): void;
	    componentWillUnmount(): void;
	    loadIconComponent: (iconType: EuiIconType) => void;
	    onIconLoad: () => void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/icon' {
	export { EuiIcon, EuiIconProps, IconColor, IconSize, IconType, TYPES as ICON_TYPES, SIZES as ICON_SIZES, COLORS as ICON_COLORS, } from '@elastic/eui/src/components/icon/icon';

}
declare module '@elastic/eui/src/components/loading/loading_elastic' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; const sizeToClassNameMap: {
	    m: string;
	    l: string;
	    xl: string;
	    xxl: string;
	};
	export const SIZES: ("m" | "l" | "xl" | "xxl")[];
	export interface EuiLoadingElasticProps {
	    size?: keyof typeof sizeToClassNameMap;
	}
	export const EuiLoadingElastic: FunctionComponent<CommonProps & HTMLAttributes<HTMLDivElement> & EuiLoadingElasticProps>;
	export {};

}
declare module '@elastic/eui/src/components/loading/loading_chart' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; const sizeToClassNameMap: {
	    m: string;
	    l: string;
	    xl: string;
	};
	export const SIZES: ("m" | "l" | "xl")[];
	export type EuiLoadingChartSize = keyof typeof sizeToClassNameMap;
	export type EuiLoadingChartProps = CommonProps & HTMLAttributes<HTMLDivElement> & {
	    size?: EuiLoadingChartSize;
	    mono?: boolean;
	};
	export const EuiLoadingChart: FunctionComponent<EuiLoadingChartProps>;
	export {};

}
declare module '@elastic/eui/src/components/loading/loading_content' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type LineRange = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10;
	export type EuiLoadingContentProps = CommonProps & HTMLAttributes<HTMLDivElement> & {
	    lines?: LineRange;
	};
	export const EuiLoadingContent: FunctionComponent<EuiLoadingContentProps>;

}
declare module '@elastic/eui/src/components/loading/loading_spinner' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; const sizeToClassNameMap: {
	    s: string;
	    m: string;
	    l: string;
	    xl: string;
	};
	export const SIZES: ("s" | "m" | "l" | "xl")[];
	export type EuiLoadingSpinnerSize = keyof typeof sizeToClassNameMap;
	export type EuiLoadingSpinnerProps = CommonProps & HTMLAttributes<HTMLDivElement> & {
	    size?: EuiLoadingSpinnerSize;
	};
	export const EuiLoadingSpinner: FunctionComponent<EuiLoadingSpinnerProps>;
	export {};

}
declare module '@elastic/eui/src/components/loading/loading_logo' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { IconType } from '@elastic/eui/src/components/icon'; const sizeToClassNameMap: {
	    m: string;
	    l: string;
	    xl: string;
	};
	export const SIZES: ("m" | "l" | "xl")[];
	export type EuiLoadingLogoProps = CommonProps & HTMLAttributes<HTMLDivElement> & {
	    size?: keyof typeof sizeToClassNameMap;
	    /**
	     * While this component should be restricted to using logo icons, it works with any IconType
	     */
	    logo?: IconType;
	};
	export const EuiLoadingLogo: FunctionComponent<EuiLoadingLogoProps>;
	export {};

}
declare module '@elastic/eui/src/components/loading' {
	export { EuiLoadingElastic, EuiLoadingElasticProps } from '@elastic/eui/src/components/loading/loading_elastic';
	export { EuiLoadingChart, EuiLoadingChartProps } from '@elastic/eui/src/components/loading/loading_chart';
	export { EuiLoadingContent, EuiLoadingContentProps } from '@elastic/eui/src/components/loading/loading_content';
	export { EuiLoadingSpinner, EuiLoadingSpinnerProps } from '@elastic/eui/src/components/loading/loading_spinner';
	export { EuiLoadingLogo, EuiLoadingLogoProps } from '@elastic/eui/src/components/loading/loading_logo';

}
declare module '@elastic/eui/src/components/button/button_content' {
	import { HTMLAttributes, FunctionComponent, Ref } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { IconType } from '@elastic/eui/src/components/icon';
	export type ButtonContentIconSide = 'left' | 'right';
	export const ICON_SIDES: ButtonContentIconSide[];
	export type EuiButtonContentType = HTMLAttributes<HTMLSpanElement>;
	/**
	 * *INTERNAL ONLY*
	 * This component is simply a helper component for reuse within other button components
	 */
	export interface EuiButtonContentProps extends CommonProps {
	    /**
	     * Any `type` accepted by EuiIcon
	     */
	    iconType?: IconType;
	    /**
	     * Can only be one side `left` or `right`
	     */
	    iconSide?: ButtonContentIconSide;
	    isLoading?: boolean;
	    /**
	     * Object of props passed to the <span/> wrapping the content's text/children only (not icon)
	     */
	    textProps?: HTMLAttributes<HTMLSpanElement> & CommonProps & {
	        ref?: Ref<HTMLSpanElement>;
	        'data-text'?: string;
	    };
	    iconSize?: 's' | 'm';
	}
	export const EuiButtonContent: FunctionComponent<EuiButtonContentType & EuiButtonContentProps>;

}
declare module '@elastic/eui/src/services/security/href_validator' {
	export function validateHref(href: string): boolean;

}
declare module '@elastic/eui/src/components/button/button_empty/button_empty' {
	import { FunctionComponent, Ref } from 'react';
	import { CommonProps, ExclusiveUnion, PropsForAnchor, PropsForButton } from '@elastic/eui/src/components/common';
	import { EuiButtonContentProps, EuiButtonContentType } from '@elastic/eui/src/components/button/button_content';
	export type EuiButtonEmptyColor = 'primary' | 'danger' | 'text' | 'ghost' | 'success' | 'warning';
	export const COLORS: EuiButtonEmptyColor[]; const sizeToClassNameMap: {
	    xs: string;
	    s: string;
	    m: null;
	};
	export const SIZES: ("s" | "xs" | "m")[];
	export type EuiButtonEmptySizes = keyof typeof sizeToClassNameMap; const flushTypeToClassNameMap: {
	    left: string;
	    right: string;
	    both: string;
	};
	export const FLUSH_TYPES: ("left" | "right" | "both")[];
	/**
	 * Extends EuiButtonContentProps which provides
	 * `iconType`, `iconSide`, and `textProps`
	 */
	export interface CommonEuiButtonEmptyProps extends EuiButtonContentProps, CommonProps {
	    /**
	     * Any of our named colors
	     */
	    color?: EuiButtonEmptyColor;
	    size?: EuiButtonEmptySizes;
	    /**
	     * Ensure the text of the button sits flush to the left, right, or both sides of its container
	     */
	    flush?: keyof typeof flushTypeToClassNameMap;
	    /**
	     * `disabled` is also allowed
	     */
	    isDisabled?: boolean;
	    /**
	     * Force disables the button and changes the icon to a loading spinner
	     */
	    isLoading?: boolean;
	    /**
	     * Applies the boolean state as the `aria-pressed` property to create a toggle button.
	     * *Only use when the readable text does not change between states.*
	     */
	    isSelected?: boolean;
	    href?: string;
	    target?: string;
	    rel?: string;
	    type?: 'button' | 'submit';
	    buttonRef?: Ref<HTMLButtonElement | HTMLAnchorElement>;
	    /**
	     * Object of props passed to the <span/> wrapping the button's content
	     */
	    contentProps?: EuiButtonContentType;
	} type EuiButtonEmptyPropsForAnchor = PropsForAnchor<CommonEuiButtonEmptyProps>; type EuiButtonEmptyPropsForButton = PropsForButton<CommonEuiButtonEmptyProps>;
	export type EuiButtonEmptyProps = ExclusiveUnion<EuiButtonEmptyPropsForAnchor, EuiButtonEmptyPropsForButton>;
	export const EuiButtonEmpty: FunctionComponent<EuiButtonEmptyProps>;
	export {};

}
declare module '@elastic/eui/src/components/button/button_empty' {
	export { COLORS, EuiButtonEmpty, EuiButtonEmptyColor, EuiButtonEmptyProps, EuiButtonEmptySizes, } from '@elastic/eui/src/components/button/button_empty/button_empty';

}
declare module '@elastic/eui/src/components/button/button_icon/button_icon' {
	import { FunctionComponent, Ref } from 'react';
	import { CommonProps, ExclusiveUnion, PropsForAnchor, PropsForButton } from '@elastic/eui/src/components/common';
	import { IconType, IconSize } from '@elastic/eui/src/components/icon';
	import { ButtonColor } from '@elastic/eui/src/components/button/button';
	export type EuiButtonIconColor = ButtonColor; const displayToClassNameMap: {
	    base: null;
	    empty: string;
	    fill: string;
	};
	export const DISPLAYS: ("base" | "fill" | "empty")[]; type EuiButtonIconDisplay = keyof typeof displayToClassNameMap;
	export interface EuiButtonIconProps extends CommonProps {
	    iconType: IconType;
	    /**
	     * Any of the named color palette options.
	     */
	    color?: EuiButtonIconColor;
	    'aria-label'?: string;
	    'aria-labelledby'?: string;
	    isDisabled?: boolean;
	    /**
	     * Overall size of button.
	     * Matches the sizes of other EuiButtons
	     */
	    size?: EuiButtonIconSizes;
	    /**
	     * Size of the icon only.
	     * This will not affect the overall size of the button
	     */
	    iconSize?: IconSize;
	    /**
	     * Applies the boolean state as the `aria-pressed` property to create a toggle button.
	     * *Only use when the readable text does not change between states.*
	     */
	    isSelected?: boolean;
	    /**
	     * Sets the display style for matching other EuiButton types.
	     * `base` is equivalent to a typical EuiButton
	     * `fill` is equivalent to a filled EuiButton
	     * `empty` (default) is equivalent to an EuiButtonEmpty
	     */
	    display?: EuiButtonIconDisplay;
	}
	export type EuiButtonIconPropsForAnchor = {
	    type?: string;
	} & PropsForAnchor<EuiButtonIconProps, {
	    buttonRef?: Ref<HTMLAnchorElement>;
	}>;
	export type EuiButtonIconPropsForButton = {
	    type?: 'submit' | 'reset' | 'button';
	} & PropsForButton<EuiButtonIconProps, {
	    buttonRef?: Ref<HTMLButtonElement>;
	}>; type Props = ExclusiveUnion<EuiButtonIconPropsForAnchor, EuiButtonIconPropsForButton>;
	export const COLORS: ButtonColor[]; const sizeToClassNameMap: {
	    xs: string;
	    s: string;
	    m: string;
	};
	export type EuiButtonIconSizes = keyof typeof sizeToClassNameMap;
	export const SIZES: ("s" | "xs" | "m")[];
	export const EuiButtonIcon: FunctionComponent<Props>;
	export {};

}
declare module '@elastic/eui/src/components/button/button_icon' {
	export { EuiButtonIcon, EuiButtonIconColor, EuiButtonIconProps, EuiButtonIconPropsForButton, EuiButtonIconPropsForAnchor, } from '@elastic/eui/src/components/button/button_icon/button_icon';

}
declare module '@elastic/eui/src/components/inner_text/inner_text' {
	import { FunctionComponent, ReactElement } from 'react'; type RefT = HTMLElement | Element | undefined | null;
	export function useInnerText(innerTextFallback?: string): [(node: RefT) => void, string | undefined];
	export interface EuiInnerTextProps {
	    /**
	     * ReactNode to render as this component's content
	     */
	    children: (ref?: (node: RefT) => void, innerText?: string) => ReactElement;
	    fallback?: string;
	}
	export const EuiInnerText: FunctionComponent<EuiInnerTextProps>;
	export {};

}
declare module '@elastic/eui/src/components/inner_text/render_to_text' {
	import { ReactNode } from 'react';
	export function useRenderToText(node: ReactNode, placeholder?: string): string;

}
declare module '@elastic/eui/src/components/inner_text' {
	export { useInnerText, EuiInnerText, EuiInnerTextProps } from '@elastic/eui/src/components/inner_text/inner_text';
	export { useRenderToText } from '@elastic/eui/src/components/inner_text/render_to_text';

}
declare module '@elastic/eui/src/components/button/button_group/button_group_button' {
	import { FunctionComponent } from 'react';
	import { EuiButtonGroupOptionProps, EuiButtonGroupProps } from '@elastic/eui/src/components/button/button_group/button_group'; type Props = EuiButtonGroupOptionProps & {
	    /**
	     * Element to display based on single or multi
	     */
	    element: 'button' | 'label';
	    /**
	     * Styles the selected button to look selected (usually with `fill`)
	     */
	    isSelected?: boolean;
	    /**
	     * Name of the whole group for 'single'.
	     */
	    name?: string;
	    /**
	     * The value of the radio input for 'single'.
	     */
	    value?: string;
	    /**
	     * Inherit from EuiButtonGroup
	     */
	    color: EuiButtonGroupProps['color'];
	    /**
	     * Inherit from EuiButtonGroup
	     */
	    size: EuiButtonGroupProps['buttonSize'];
	    /**
	     * Inherit from EuiButtonGroup
	     */
	    isIconOnly: EuiButtonGroupProps['isIconOnly'];
	    /**
	     * Inherit from EuiButtonGroup
	     */
	    onChange: EuiButtonGroupProps['onChange'];
	};
	export const EuiButtonGroupButton: FunctionComponent<Props>;
	export {};

}
declare module '@elastic/eui/src/components/button/button_group/button_group' {
	import { FunctionComponent, HTMLAttributes, ReactNode } from 'react';
	import { ButtonColor } from '@elastic/eui/src/components/button/button';
	import { EuiButtonContentProps } from '@elastic/eui/src/components/button/button_content';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export interface EuiButtonGroupOptionProps extends EuiButtonContentProps, CommonProps {
	    /**
	     * Each option must have a unique `id` for maintaining selection
	     */
	    id: string;
	    /**
	     * Each option must have a `label` even for icons which will be applied as the `aria-label`
	     */
	    label: ReactNode;
	    isDisabled?: boolean;
	    /**
	     * The value of the radio input.
	     */
	    value?: any;
	    /**
	     * The type of the underlying HTML button
	     */
	    type?: 'button' | 'submit' | 'reset';
	}
	export type EuiButtonGroupProps = CommonProps & {
	    /**
	     * Typical sizing is `s`. Medium `m` size should be reserved for major features.
	     * `compressed` is meant to be used alongside and within compressed forms.
	     */
	    buttonSize?: 's' | 'm' | 'compressed';
	    isDisabled?: boolean;
	    /**
	     * Expands the whole group to the full width of the container.
	     * Each button gets equal widths no matter the content
	     */
	    isFullWidth?: boolean;
	    /**
	     * Hides the label to only show the `iconType` provided by the `option`
	     */
	    isIconOnly?: boolean;
	    /**
	     * A hidden group title (required for accessibility)
	     */
	    legend: string;
	    /**
	     * Compressed styles don't support `ghost` color (Color will be changed to "text")
	     */
	    color?: ButtonColor;
	    /**
	     * Actual type is `'single' | 'multi'`.
	     * Determines how the selection of the group should be handled.
	     * With `'single'` only one option can be selected at a time (similar to radio group).
	     * With `'multi'` multiple options selected (similar to checkbox group).
	     */
	    type?: 'single' | 'multi';
	    /**
	     * An array of #EuiButtonGroupOptionProps
	     */
	    options: EuiButtonGroupOptionProps[];
	} & ({
	    /**
	     * Default for `type` is single so it can also be excluded
	     */
	    type?: 'single';
	    /**
	     * The `name` attribute for radio inputs;
	     * Defaults to a random string
	     */
	    name?: string;
	    /**
	     * Styles the selected option to look selected (usually with `fill`)
	     * Required by and only used in `type='single'`.
	     */
	    idSelected: string;
	    /**
	     * Single: Returns the `id` of the clicked option and the `value`
	     */
	    onChange: (id: string, value?: any) => void;
	    idToSelectedMap?: never;
	} | {
	    type: 'multi';
	    /**
	     * A map of `id`s as keys with the selected boolean values.
	     * Required by and only used in `type='multi'`.
	     */
	    idToSelectedMap?: {
	        [id: string]: boolean;
	    };
	    /**
	     * Multi: Returns the `id` of the clicked option
	     */
	    onChange: (id: string) => void;
	    idSelected?: never;
	    name?: never;
	}); type Props = Omit<HTMLAttributes<HTMLFieldSetElement>, 'onChange' | 'color'> & EuiButtonGroupProps;
	export const EuiButtonGroup: FunctionComponent<Props>;
	export {};

}
declare module '@elastic/eui/src/components/button/button_group' {
	export { EuiButtonGroup, EuiButtonGroupOptionProps, EuiButtonGroupProps, } from '@elastic/eui/src/components/button/button_group/button_group';

}
declare module '@elastic/eui/src/components/button' {
	export { COLORS, ButtonColor, ButtonSize, EuiButton, EuiButtonProps, } from '@elastic/eui/src/components/button/button';
	export { EuiButtonEmpty, EuiButtonEmptyColor, EuiButtonEmptyProps, EuiButtonEmptySizes, } from '@elastic/eui/src/components/button/button_empty';
	export { EuiButtonIcon, EuiButtonIconColor, EuiButtonIconProps, EuiButtonIconPropsForButton, } from '@elastic/eui/src/components/button/button_icon';
	export { EuiButtonGroup, EuiButtonGroupOptionProps, EuiButtonGroupProps, } from '@elastic/eui/src/components/button/button_group';

}
declare module '@elastic/eui/src/components/form/checkbox/checkbox' {
	import { Component, ChangeEventHandler, ReactNode, InputHTMLAttributes, LabelHTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; const typeToClassNameMap: {
	    inList: string;
	};
	export const TYPES: "inList"[];
	export type EuiCheckboxType = keyof typeof typeToClassNameMap;
	export interface EuiCheckboxProps extends CommonProps, InputHTMLAttributes<HTMLInputElement> {
	    id: string;
	    checked?: boolean;
	    onChange: ChangeEventHandler<HTMLInputElement>;
	    inputRef?: (element: HTMLInputElement) => void;
	    label?: ReactNode;
	    type?: EuiCheckboxType;
	    disabled?: boolean;
	    /**
	     * when `true` creates a shorter height checkbox row
	     */
	    compressed?: boolean;
	    indeterminate?: boolean;
	    /**
	     * Object of props passed to the <label/>
	     */
	    labelProps?: CommonProps & LabelHTMLAttributes<HTMLLabelElement>;
	}
	export class EuiCheckbox extends Component<EuiCheckboxProps> {
	    static defaultProps: {
	        checked: boolean;
	        disabled: boolean;
	        indeterminate: boolean;
	        compressed: boolean;
	    };
	    inputRef?: HTMLInputElement;
	    componentDidMount(): void;
	    componentDidUpdate(): void;
	    render(): JSX.Element;
	    setInputRef: (input: HTMLInputElement) => void;
	    invalidateIndeterminate(): void;
	}
	export {};

}
declare module '@elastic/eui/src/components/form/form_fieldset/form_legend' {
	import { HTMLAttributes, FunctionComponent, ReactNode } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiFormLegendProps = HTMLAttributes<HTMLLegendElement> & CommonProps & {
	    /**
	     * ReactNode to render as this component's content
	     */
	    children: ReactNode;
	    /**
	     * For a hidden legend that is still visible to the screen reader, set to 'hidden'
	     */
	    display?: 'hidden' | 'visible';
	    compressed?: boolean;
	};
	export const EuiFormLegend: FunctionComponent<EuiFormLegendProps>;

}
declare module '@elastic/eui/src/components/form/form_fieldset/form_fieldset' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiFormLegendProps } from '@elastic/eui/src/components/form/form_fieldset/form_legend';
	export interface EuiFormFieldsetProps extends CommonProps, HTMLAttributes<HTMLFieldSetElement> {
	    /**
	     * Adds an EuiFormLegend element as the first child
	     */
	    legend?: EuiFormLegendProps;
	}
	export const EuiFormFieldset: FunctionComponent<EuiFormFieldsetProps>;

}
declare module '@elastic/eui/src/components/form/form_fieldset' {
	export { EuiFormFieldset, EuiFormFieldsetProps } from '@elastic/eui/src/components/form/form_fieldset/form_fieldset';
	export { EuiFormLegend, EuiFormLegendProps } from '@elastic/eui/src/components/form/form_fieldset/form_legend';

}
declare module '@elastic/eui/src/components/form/checkbox/checkbox_group' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common';
	import { EuiFormFieldsetProps, EuiFormLegendProps } from '@elastic/eui/src/components/form/form_fieldset';
	import { EuiCheckboxProps } from '@elastic/eui/src/components/form/checkbox/checkbox';
	export interface EuiCheckboxGroupOption extends Omit<EuiCheckboxProps, 'checked' | 'onChange'> {
	    id: string;
	}
	export interface EuiCheckboxGroupIdToSelectedMap {
	    [id: string]: boolean;
	} type AsDivProps = Omit<HTMLAttributes<HTMLDivElement>, 'onChange'>; type WithLegendProps = Omit<EuiFormFieldsetProps, 'onChange'> & {
	    /**
	     * If the individual labels for each radio do not provide a sufficient description, add a legend.
	     * Wraps the group in a `EuiFormFieldset` which adds an `EuiLegend` for titling the whole group.
	     * Accepts an `EuiFormLegendProps` shape.
	     */
	    legend?: EuiFormLegendProps;
	};
	export type EuiCheckboxGroupProps = CommonProps & {
	    options: EuiCheckboxGroupOption[];
	    idToSelectedMap: EuiCheckboxGroupIdToSelectedMap;
	    onChange: (optionId: string) => void;
	    /**
	     * Tightens up the spacing between checkbox rows and sends down the
	     * compressed prop to the checkbox itself
	     */
	    compressed?: boolean;
	    disabled?: boolean;
	} & ExclusiveUnion<AsDivProps, WithLegendProps>;
	export const EuiCheckboxGroup: FunctionComponent<EuiCheckboxGroupProps>;
	export {};

}
declare module '@elastic/eui/src/components/form/checkbox' {
	export { EuiCheckbox, EuiCheckboxProps } from '@elastic/eui/src/components/form/checkbox/checkbox';
	export { EuiCheckboxGroup, EuiCheckboxGroupProps, EuiCheckboxGroupOption, } from '@elastic/eui/src/components/form/checkbox/checkbox_group';

}
declare module '@elastic/eui/src/components/title/title' {
	import { FunctionComponent, ReactElement } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; const titleSizeToClassNameMap: {
	    xxxs: string;
	    xxs: string;
	    xs: string;
	    s: string;
	    m: string;
	    l: string;
	};
	export const TITLE_SIZES: ("s" | "xs" | "m" | "l" | "xxxs" | "xxs")[];
	export type EuiTitleSize = keyof typeof titleSizeToClassNameMap; const textTransformToClassNameMap: {
	    uppercase: string;
	};
	export const TEXT_TRANSFORM: "uppercase"[];
	export type EuiTitleTextTransform = keyof typeof textTransformToClassNameMap;
	export type EuiTitleProps = CommonProps & {
	    /**
	     * ReactElement to render as this component's content
	     */
	    children: ReactElement<any>;
	    size?: EuiTitleSize;
	    textTransform?: EuiTitleTextTransform;
	    id?: string;
	};
	export const EuiTitle: FunctionComponent<EuiTitleProps>;
	export {};

}
declare module '@elastic/eui/src/components/title' {
	export { EuiTitle, EuiTitleProps, EuiTitleSize } from '@elastic/eui/src/components/title/title';

}
declare module '@elastic/eui/src/components/text/text_color' {
	import { FunctionComponent, HTMLAttributes, CSSProperties } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; const colorsToClassNameMap: {
	    default: string;
	    subdued: string;
	    success: string;
	    accent: string;
	    danger: string;
	    warning: string;
	    ghost: string;
	    inherit: string;
	};
	export type TextColor = keyof typeof colorsToClassNameMap;
	export const COLORS: ("default" | "inherit" | "success" | "accent" | "warning" | "danger" | "subdued" | "ghost")[];
	export type EuiTextColorProps = CommonProps & Omit<HTMLAttributes<HTMLDivElement> & HTMLAttributes<HTMLSpanElement>, 'color'> & {
	    /**
	     * Any of our named colors or a `hex`, `rgb` or `rgba` value.
	     */
	    color?: TextColor | CSSProperties['color'];
	    /**
	     * Determines the root element
	     */
	    component?: 'div' | 'span';
	};
	export const EuiTextColor: FunctionComponent<EuiTextColorProps>;
	export {};

}
declare module '@elastic/eui/src/components/text/text_align' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export const alignmentToClassNameMap: {
	    left: string;
	    right: string;
	    center: string;
	};
	export type TextAlignment = keyof typeof alignmentToClassNameMap;
	export const ALIGNMENTS: import ("@elastic/eui").HorizontalAlignment[];
	export type EuiTextAlignProps = CommonProps & HTMLAttributes<HTMLDivElement> & {
	    textAlign?: TextAlignment;
	};
	export const EuiTextAlign: FunctionComponent<EuiTextAlignProps>;

}
declare module '@elastic/eui/src/components/text/text' {
	import { FunctionComponent, HTMLAttributes, CSSProperties } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { TextColor } from '@elastic/eui/src/components/text/text_color';
	import { TextAlignment } from '@elastic/eui/src/components/text/text_align'; const textSizeToClassNameMap: {
	    xs: string;
	    s: string;
	    m: string;
	    relative: string;
	};
	export type TextSize = keyof typeof textSizeToClassNameMap;
	export const TEXT_SIZES: ("s" | "xs" | "m" | "relative")[];
	export type EuiTextProps = CommonProps & Omit<HTMLAttributes<HTMLDivElement>, 'color'> & {
	    textAlign?: TextAlignment;
	    /**
	     * Determines the text size. Choose `relative` to control the `font-size` based on the value of a parent container.
	     */
	    size?: TextSize;
	    /**
	     * Any of our named colors or a `hex`, `rgb` or `rgba` value.
	     */
	    color?: TextColor | CSSProperties['color'];
	    grow?: boolean;
	};
	export const EuiText: FunctionComponent<EuiTextProps>;
	export {};

}
declare module '@elastic/eui/src/components/text' {
	export { EuiText, EuiTextProps } from '@elastic/eui/src/components/text/text';
	export { EuiTextColor, EuiTextColorProps } from '@elastic/eui/src/components/text/text_color';
	export { EuiTextAlign, EuiTextAlignProps } from '@elastic/eui/src/components/text/text_align';

}
declare module '@elastic/eui/src/components/flex/flex_group' {
	import React, { HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type FlexGroupAlignItems = keyof typeof alignItemsToClassNameMap;
	export type FlexGroupComponentType = 'div' | 'span';
	export type FlexGroupDirection = keyof typeof directionToClassNameMap;
	export type FlexGroupGutterSize = keyof typeof gutterSizeToClassNameMap;
	export type FlexGroupJustifyContent = keyof typeof justifyContentToClassNameMap;
	export interface EuiFlexGroupProps extends CommonProps, HTMLAttributes<HTMLDivElement | HTMLSpanElement> {
	    alignItems?: FlexGroupAlignItems;
	    component?: FlexGroupComponentType;
	    direction?: FlexGroupDirection;
	    gutterSize?: FlexGroupGutterSize;
	    justifyContent?: FlexGroupJustifyContent;
	    responsive?: boolean;
	    wrap?: boolean;
	} const gutterSizeToClassNameMap: {
	    none: null;
	    xs: string;
	    s: string;
	    m: string;
	    l: string;
	    xl: string;
	};
	export const GUTTER_SIZES: ("s" | "xs" | "m" | "l" | "xl" | "none")[];
	export type EuiFlexGroupGutterSize = keyof typeof gutterSizeToClassNameMap; const alignItemsToClassNameMap: {
	    stretch: null;
	    flexStart: string;
	    flexEnd: string;
	    center: string;
	    baseline: string;
	};
	export const ALIGN_ITEMS: ("center" | "baseline" | "stretch" | "flexStart" | "flexEnd")[]; const justifyContentToClassNameMap: {
	    flexStart: null;
	    flexEnd: string;
	    center: string;
	    spaceBetween: string;
	    spaceAround: string;
	    spaceEvenly: string;
	};
	export const JUSTIFY_CONTENTS: ("center" | "flexStart" | "flexEnd" | "spaceBetween" | "spaceAround" | "spaceEvenly")[]; const directionToClassNameMap: {
	    row: string;
	    rowReverse: string;
	    column: string;
	    columnReverse: string;
	};
	export const DIRECTIONS: ("column" | "row" | "rowReverse" | "columnReverse")[];
	export const EuiFlexGroup: React.ForwardRefExoticComponent<EuiFlexGroupProps & React.RefAttributes<HTMLDivElement | HTMLSpanElement>>;
	export {};

}
declare module '@elastic/eui/src/components/flex/flex_grid' {
	import { HTMLAttributes, ReactNode, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type FlexGridGutterSize = keyof typeof gutterSizeToClassNameMap;
	export type FlexGridColumns = 0 | 1 | 2 | 3 | 4;
	export type FlexGridDirection = keyof typeof directionToClassNameMap;
	export interface EuiFlexGridProps {
	    /**
	     * ReactNode to render as this component's content
	     */
	    children?: ReactNode;
	    /**
	     * Number of columns `1-4`, pass `0` for normal display
	     */
	    columns?: FlexGridColumns;
	    /**
	     * Flex layouts default to left-right then top-down (`row`).
	     * Change this prop to `column` to create a top-down then left-right display.
	     * Only works with column count of `1-4`.
	     */
	    direction?: FlexGridDirection;
	    /**
	     * Space between flex items
	     */
	    gutterSize?: FlexGridGutterSize;
	    /**
	     * Force each item to be display block on smaller screens
	     */
	    responsive?: boolean;
	    /**
	     * The tag to render
	     */
	    component?: keyof JSX.IntrinsicElements;
	} const directionToClassNameMap: {
	    row: null;
	    column: string;
	};
	export const DIRECTIONS: ("column" | "row")[]; const gutterSizeToClassNameMap: {
	    none: string;
	    s: string;
	    m: string;
	    l: string;
	    xl: string;
	};
	export const GUTTER_SIZES: FlexGridGutterSize[];
	export const COLUMNS: FlexGridColumns[];
	export const EuiFlexGrid: FunctionComponent<CommonProps & HTMLAttributes<HTMLDivElement> & EuiFlexGridProps>;
	export {};

}
declare module '@elastic/eui/src/components/flex/flex_item' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type FlexItemGrowSize = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | true | false | null;
	export interface EuiFlexItemProps {
	    grow?: FlexItemGrowSize;
	    component?: keyof JSX.IntrinsicElements;
	}
	export const GROW_SIZES: FlexItemGrowSize[];
	export const EuiFlexItem: FunctionComponent<CommonProps & HTMLAttributes<HTMLDivElement | HTMLSpanElement> & EuiFlexItemProps>;

}
declare module '@elastic/eui/src/components/flex' {
	export { EuiFlexGroup, EuiFlexGroupProps, EuiFlexGroupGutterSize, } from '@elastic/eui/src/components/flex/flex_group';
	export { EuiFlexGrid, EuiFlexGridProps } from '@elastic/eui/src/components/flex/flex_grid';
	export { EuiFlexItem, EuiFlexItemProps } from '@elastic/eui/src/components/flex/flex_item';

}
declare module '@elastic/eui/src/components/form/described_form_group/described_form_group' {
	import { FunctionComponent, ReactNode, HTMLAttributes } from 'react';
	import { CommonProps, PropsOf } from '@elastic/eui/src/components/common';
	import { EuiTitleSize, EuiTitleProps } from '@elastic/eui/src/components/title';
	import { EuiFlexItem, EuiFlexGroupGutterSize } from '@elastic/eui/src/components/flex'; const paddingSizeToClassNameMap: {
	    xxxs: string;
	    xxs: string;
	    xs: string;
	    s: string;
	    m: string;
	    l: string;
	};
	export const PADDING_SIZES: ("s" | "xs" | "m" | "l" | "xxxs" | "xxs")[];
	export type EuiDescribedFormGroupPaddingSize = keyof typeof paddingSizeToClassNameMap;
	export type EuiDescribedFormGroupProps = CommonProps & Omit<HTMLAttributes<HTMLDivElement>, 'title'> & {
	    /**
	     * One or more `EuiFormRow`s
	     */
	    children?: ReactNode;
	    /**
	     * Passed to `EuiFlexGroup`
	     */
	    gutterSize?: EuiFlexGroupGutterSize;
	    fullWidth?: boolean;
	    /**
	     * For better accessibility, it's recommended the use of HTML headings
	     */
	    title: EuiTitleProps['children'];
	    titleSize?: EuiTitleSize;
	    /**
	     * Added as a child of `EuiText`
	     */
	    description?: ReactNode;
	    /**
	     * For customizing the description container. Extended from `EuiFlexItem`
	     */
	    descriptionFlexItemProps?: PropsOf<typeof EuiFlexItem>;
	    /**
	     * For customizing the field container. Extended from `EuiFlexItem`
	     */
	    fieldFlexItemProps?: PropsOf<typeof EuiFlexItem>;
	};
	export const EuiDescribedFormGroup: FunctionComponent<EuiDescribedFormGroupProps>;
	export {};

}
declare module '@elastic/eui/src/components/form/described_form_group' {
	export { EuiDescribedFormGroup, EuiDescribedFormGroupProps, } from '@elastic/eui/src/components/form/described_form_group/described_form_group';

}
declare module '@elastic/eui/src/components/context/context' {
	import React, { Context, FunctionComponent, ReactChild, ReactNode } from 'react';
	export interface RenderableValues {
	    [key: string]: ReactChild | undefined;
	}
	export type Renderable<T> = ReactChild | ((values: T) => ReactChild);
	export interface I18nShape {
	    mapping?: {
	        [key: string]: Renderable<object>;
	    };
	    mappingFunc?: (value: string) => string;
	    /**
	     * Some browsers' translation features don't work with a rendered `<Fragment>` component.
	     * The `render` function allows you to pass in another component instead, e.g. `<div>`
	     */
	    render?: (children: any) => FunctionComponent;
	    formatNumber?: (x: number) => string;
	    formatDateTime?: (x: Date) => string;
	    locale?: string;
	} const I18nContext: Context<I18nShape>; const EuiI18nConsumer: React.Consumer<I18nShape>;
	export interface EuiContextProps {
	    i18n: I18nShape;
	    /**
	     * ReactNode to render as this component's content
	     */
	    children: ReactNode;
	} const EuiContext: FunctionComponent<EuiContextProps>;
	export { EuiContext, EuiI18nConsumer, I18nContext };

}
declare module '@elastic/eui/src/components/context' {
	export { EuiContext, EuiI18nConsumer, EuiContextProps } from '@elastic/eui/src/components/context/context';

}
declare module '@elastic/eui/src/services/predicate/common_predicates' {
	import moment from 'moment';
	export const always: (_value?: any) => boolean;
	export const never: (_value?: any) => boolean;
	export const isUndefined: (value: any) => value is undefined;
	export const isNull: (value: any) => value is null;
	export const isNil: (value: any) => value is null | undefined;
	export const isMoment: (value: any) => boolean;
	export const isDate: (value: any) => value is Date;
	export const isDateLike: (value: any) => value is Date | moment.Moment;

}
declare module '@elastic/eui/src/services/predicate/lodash_predicates' {
	export const isFunction: (value: any) => value is (...args: any[]) => any;
	export const isArray: (value: any) => value is any[];
	export const isString: (value: any) => value is string;
	export const isBoolean: (value: any) => value is boolean;
	export const isNumber: (value: any) => value is number;
	export const isNaN: (value: any) => boolean;
	export const isObject: (value: any) => value is object;

}
declare module '@elastic/eui/src/services/predicate' {
	export * from '@elastic/eui/src/services/predicate/common_predicates';
	export * from '@elastic/eui/src/services/predicate/lodash_predicates';

}
declare module '@elastic/eui/src/components/i18n/i18n_util' {
	import { ReactChild } from 'react';
	import { RenderableValues } from '@elastic/eui/src/components/context/context';
	/**
	 * Replaces placeholder values in `input` with their matching value in `values`
	 * e.g. input:'Hello, {name}' will replace `{name}` with `values[name]`
	 * @param {string} input
	 * @param {RenderableValues} values
	 * @param {Function} i18nMappingFunc
	 * @returns {string | React.ReactChild[]}
	 */
	export function processStringToChildren(input: string, values: RenderableValues, i18nMappingFunc?: (token: string) => string): string | ReactChild[];

}
declare module '@elastic/eui/src/components/i18n/i18n' {
	import { ReactChild, ReactElement } from 'react';
	import { ExclusiveUnion } from '@elastic/eui/src/components/common';
	import { Renderable } from '@elastic/eui/src/components/context/context'; type ResolvedType<T> = T extends (...args: any[]) => any ? ReturnType<T> : T;
	interface I18nTokenShape<T, DEFAULT extends Renderable<T>> {
	    token: string;
	    default: DEFAULT;
	    children?: (x: ResolvedType<DEFAULT>) => ReactChild;
	    values?: T;
	}
	interface I18nTokensShape<T extends any[]> {
	    tokens: string[];
	    defaults: T;
	    children: (x: Array<T[number]>) => ReactChild;
	}
	export type EuiI18nProps<T, DEFAULT extends Renderable<T>, DEFAULTS extends any[]> = ExclusiveUnion<I18nTokenShape<T, DEFAULT>, I18nTokensShape<DEFAULTS>>; const EuiI18n: <T extends {}, DEFAULT extends Renderable<T>, DEFAULTS extends any[]>(props: (import ("@elastic/eui/src/components/common").DisambiguateSet<I18nTokenShape<T, DEFAULT>, I18nTokensShape<DEFAULTS>> & I18nTokensShape<DEFAULTS>) | (import ("@elastic/eui/src/components/common").DisambiguateSet<I18nTokensShape<DEFAULTS>, I18nTokenShape<T, DEFAULT>> & I18nTokenShape<T, DEFAULT>)) => JSX.Element; type DefaultRenderType<T, K extends Renderable<T>> = K extends ReactChild ? K : K extends () => infer RetValue ? RetValue : never; type DefaultsRenderType<K extends Array<string | ReactElement>> = K extends Array<infer Item> ? Item : never; function useEuiI18n<T extends {}, DEFAULT extends Renderable<T>>(token: string, defaultValue: DEFAULT, values?: T): DefaultRenderType<T, DEFAULT>; function useEuiI18n<DEFAULTS extends Array<string | ReactElement>>(tokens: string[], defaultValues: DEFAULTS): Array<DefaultsRenderType<DEFAULTS>>;
	export { EuiI18n, useEuiI18n };

}
declare module '@elastic/eui/src/components/i18n/i18n_number' {
	import { FunctionComponent, ReactChild, ReactElement } from 'react';
	import { ExclusiveUnion } from '@elastic/eui/src/components/common';
	interface EuiI18nNumberValueShape {
	    value: number;
	    children?: (x: ReactChild) => ReactElement<any>;
	}
	interface EuiI18nNumberValuesShape {
	    values: number[];
	    /**
	     * ReactNode to render as this component's content
	     */
	    children: (x: ReactChild[]) => ReactElement<any>;
	}
	export type EuiI18nNumberProps = ExclusiveUnion<EuiI18nNumberValueShape, EuiI18nNumberValuesShape>; const EuiI18nNumber: FunctionComponent<EuiI18nNumberProps>;
	export { EuiI18nNumber };

}
declare module '@elastic/eui/src/components/i18n' {
	export { EuiI18n, EuiI18nProps, useEuiI18n } from '@elastic/eui/src/components/i18n/i18n';
	export { EuiI18nNumber, EuiI18nNumberProps } from '@elastic/eui/src/components/i18n/i18n_number';

}
declare module '@elastic/eui/src/components/form/form_control_layout/form_control_layout_clear_button' {
	import { FunctionComponent, ButtonHTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export const SIZES: ("s" | "m")[];
	export type EuiFormControlLayoutClearButtonProps = CommonProps & ButtonHTMLAttributes<HTMLButtonElement> & {
	    size?: typeof SIZES[number];
	};
	export const EuiFormControlLayoutClearButton: FunctionComponent<EuiFormControlLayoutClearButtonProps>;

}
declare module '@elastic/eui/src/components/form/form_control_layout/form_control_layout_custom_icon' {
	import { ButtonHTMLAttributes, FunctionComponent, HTMLAttributes } from 'react';
	import { EuiIconProps, IconType } from '@elastic/eui/src/components/icon';
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common';
	export type EuiFormControlLayoutCustomIconProps = CommonProps & ExclusiveUnion<Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'type'>, HTMLAttributes<HTMLSpanElement>> & {
	    type: IconType;
	    size?: EuiIconProps['size'];
	    iconRef?: string | ((el: HTMLButtonElement | HTMLSpanElement | null) => void);
	};
	export const EuiFormControlLayoutCustomIcon: FunctionComponent<EuiFormControlLayoutCustomIconProps>;

}
declare module '@elastic/eui/src/components/form/form_control_layout/form_control_layout_icons' {
	import { Component } from 'react';
	import { EuiFormControlLayoutClearButtonProps } from '@elastic/eui/src/components/form/form_control_layout/form_control_layout_clear_button';
	import { EuiFormControlLayoutCustomIconProps } from '@elastic/eui/src/components/form/form_control_layout/form_control_layout_custom_icon';
	import { IconType } from '@elastic/eui/src/components/icon';
	import { DistributiveOmit } from '@elastic/eui/src/components/common';
	export const ICON_SIDES: ['left', 'right']; type IconShape = DistributiveOmit<EuiFormControlLayoutCustomIconProps, 'type' | 'iconRef'> & {
	    type: IconType;
	    side?: typeof ICON_SIDES[number];
	    ref?: EuiFormControlLayoutCustomIconProps['iconRef'];
	};
	export interface EuiFormControlLayoutIconsProps {
	    icon?: IconType | IconShape;
	    clear?: EuiFormControlLayoutClearButtonProps;
	    isLoading?: boolean;
	    compressed?: boolean;
	}
	export class EuiFormControlLayoutIcons extends Component<EuiFormControlLayoutIconsProps> {
	    render(): JSX.Element;
	    renderCustomIcon(): JSX.Element | null;
	    renderLoadingSpinner(): JSX.Element | null;
	    renderClearButton(): JSX.Element | null;
	}
	export {};

}
declare module '@elastic/eui/src/components/form/form_label/form_label' {
	import { FunctionComponent, LabelHTMLAttributes, HTMLAttributes } from 'react';
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common';
	interface EuiFormLabelCommonProps {
	    isFocused?: boolean;
	    isInvalid?: boolean;
	    /**
	     * Changes `cursor` to `default`.
	     */
	    isDisabled?: boolean;
	    /**
	     * Default type is a `label` but can be changed to a `legend`
	     * if using inside a `fieldset`.
	     */
	    type?: 'label' | 'legend';
	}
	export type _EuiFormLabelProps = {
	    type?: 'label';
	} & EuiFormLabelCommonProps & CommonProps & LabelHTMLAttributes<HTMLLabelElement>;
	export type _EuiFormLegendProps = {
	    type: 'legend';
	} & EuiFormLabelCommonProps & CommonProps & HTMLAttributes<HTMLLegendElement>;
	export type EuiFormLabelProps = ExclusiveUnion<_EuiFormLabelProps, _EuiFormLegendProps>;
	export const EuiFormLabel: FunctionComponent<EuiFormLabelProps>;
	export {};

}
declare module '@elastic/eui/src/components/form/form_label' {
	export { EuiFormLabel, EuiFormLabelProps } from '@elastic/eui/src/components/form/form_label/form_label';

}
declare module '@elastic/eui/src/components/form/form_control_layout/form_control_layout' {
	import React, { Component, HTMLAttributes, ReactElement, ReactNode } from 'react';
	import { EuiFormControlLayoutIconsProps } from '@elastic/eui/src/components/form/form_control_layout/form_control_layout_icons';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export { ICON_SIDES } from '@elastic/eui/src/components/form/form_control_layout/form_control_layout_icons'; type StringOrReactElement = string | ReactElement; type PrependAppendType = StringOrReactElement | StringOrReactElement[];
	export type EuiFormControlLayoutProps = CommonProps & HTMLAttributes<HTMLDivElement> & {
	    /**
	     * Creates an input group with element(s) coming before children.
	     * `string` | `ReactElement` or an array of these
	     */
	    prepend?: PrependAppendType;
	    /**
	     * Creates an input group with element(s) coming after children.
	     * `string` | `ReactElement` or an array of these
	     */
	    append?: PrependAppendType;
	    children?: ReactNode;
	    icon?: EuiFormControlLayoutIconsProps['icon'];
	    clear?: EuiFormControlLayoutIconsProps['clear'];
	    fullWidth?: boolean;
	    isLoading?: boolean;
	    isDisabled?: boolean;
	    className?: string;
	    compressed?: boolean;
	    readOnly?: boolean;
	    /**
	     * Connects the prepend and append labels to the input
	     */
	    inputId?: string;
	};
	export class EuiFormControlLayout extends Component<EuiFormControlLayoutProps> {
	    render(): JSX.Element;
	    renderSideNode(side: 'append' | 'prepend', nodes?: PrependAppendType, inputId?: string): JSX.Element | JSX.Element[] | undefined;
	    createFormLabel(side: 'append' | 'prepend', string: string, inputId?: string): JSX.Element;
	    createSideNode(side: 'append' | 'prepend', node: ReactElement, key: React.Key): React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;
	}

}
declare module '@elastic/eui/src/components/form/form_control_layout/form_control_layout_delimited' {
	import { FunctionComponent, ReactElement, ReactNode } from 'react';
	import { EuiFormControlLayoutProps } from '@elastic/eui/src/components/form/form_control_layout/form_control_layout';
	export type EuiFormControlLayoutDelimitedProps = Partial<EuiFormControlLayoutProps> & {
	    /**
	     * Left side control
	     */
	    startControl: ReactElement;
	    /**
	     * Right side control
	     */
	    endControl: ReactElement;
	    /**
	     * The center content. Accepts a string to be wrapped in a subdued EuiText
	     * or a single ReactElement
	     */
	    delimiter?: ReactNode;
	    className?: string;
	};
	export const EuiFormControlLayoutDelimited: FunctionComponent<EuiFormControlLayoutDelimitedProps>;

}
declare module '@elastic/eui/src/components/form/form_control_layout' {
	export { EuiFormControlLayout, EuiFormControlLayoutProps, } from '@elastic/eui/src/components/form/form_control_layout/form_control_layout';
	export { EuiFormControlLayoutDelimited, EuiFormControlLayoutDelimitedProps, } from '@elastic/eui/src/components/form/form_control_layout/form_control_layout_delimited';

}
declare module '@elastic/eui/src/components/form/validatable_control/validatable_control' {
	import { ReactElement, Ref, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export interface HTMLConstraintValidityElement extends Element {
	    setCustomValidity: (error: string) => void;
	}
	export interface ReactElementWithRef extends ReactElement {
	    ref?: Ref<HTMLConstraintValidityElement>;
	}
	export interface EuiValidatableControlProps {
	    isInvalid?: boolean;
	    /**
	     * ReactNode to render as this component's content
	     */
	    children: ReactElementWithRef;
	}
	export const EuiValidatableControl: FunctionComponent<CommonProps & EuiValidatableControlProps>;

}
declare module '@elastic/eui/src/components/form/validatable_control' {
	export { EuiValidatableControl, EuiValidatableControlProps, } from '@elastic/eui/src/components/form/validatable_control/validatable_control';

}
declare module '@elastic/eui/src/components/form/field_number/field_number' {
	import { InputHTMLAttributes, Ref, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiFormControlLayoutProps } from '@elastic/eui/src/components/form/form_control_layout';
	import { IconType } from '@elastic/eui/src/components/icon';
	export type EuiFieldNumberProps = Omit<InputHTMLAttributes<HTMLInputElement>, 'min' | 'max' | 'readOnly' | 'step'> & CommonProps & {
	    icon?: IconType;
	    isInvalid?: boolean;
	    fullWidth?: boolean;
	    isLoading?: boolean;
	    readOnly?: boolean;
	    min?: number;
	    max?: number;
	    /**
	     * Specifies the granularity that the value must adhere to.
	     * Accepts a `number` or the string `'any'` for no stepping to allow for any value.
	     * Defaults to `1`
	     */
	    step?: number | 'any';
	    inputRef?: Ref<HTMLInputElement>;
	    /**
	     * Creates an input group with element(s) coming before input.
	     * `string` | `ReactElement` or an array of these
	     */
	    prepend?: EuiFormControlLayoutProps['prepend'];
	    /**
	     * Creates an input group with element(s) coming after input.
	     * `string` | `ReactElement` or an array of these
	     */
	    append?: EuiFormControlLayoutProps['append'];
	    /**
	     * Completely removes form control layout wrapper and ignores
	     * icon, prepend, and append. Best used inside EuiFormControlLayoutDelimited.
	     */
	    controlOnly?: boolean;
	    /**
	     * when `true` creates a shorter height input
	     */
	    compressed?: boolean;
	};
	export const EuiFieldNumber: FunctionComponent<EuiFieldNumberProps>;

}
declare module '@elastic/eui/src/components/form/field_number' {
	export { EuiFieldNumber, EuiFieldNumberProps } from '@elastic/eui/src/components/form/field_number/field_number';

}
declare module '@elastic/eui/src/components/form/field_password/field_password' {
	import { InputHTMLAttributes, FunctionComponent, Ref } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiFormControlLayoutProps } from '@elastic/eui/src/components/form/form_control_layout';
	import { EuiButtonIconPropsForButton } from '@elastic/eui/src/components/button';
	export type EuiFieldPasswordProps = Omit<InputHTMLAttributes<HTMLInputElement>, 'type' | 'value'> & CommonProps & {
	    isInvalid?: boolean;
	    fullWidth?: boolean;
	    isLoading?: boolean;
	    compressed?: boolean;
	    inputRef?: Ref<HTMLInputElement>;
	    /**
	     * Creates an input group with element(s) coming before input.
	     * `string` | `ReactElement` or an array of these
	     */
	    prepend?: EuiFormControlLayoutProps['prepend'];
	    /**
	     * Creates an input group with element(s) coming after input.
	     * `string` | `ReactElement` or an array of these
	     */
	    append?: EuiFormControlLayoutProps['append'];
	    value?: string | number;
	    /**
	     * Change the `type` of input for manually handling obfuscation.
	     * The `dual` option adds the ability to toggle the obfuscation of the input by
	     * adding an icon button as the first `append` element
	     */
	    type?: 'password' | 'text' | 'dual';
	    /**
	     * Additional props to apply to the dual toggle. Extends EuiButtonIcon
	     */
	    dualToggleProps?: Partial<EuiButtonIconPropsForButton>;
	};
	export const EuiFieldPassword: FunctionComponent<EuiFieldPasswordProps>;

}
declare module '@elastic/eui/src/components/form/field_password' {
	export { EuiFieldPassword, EuiFieldPasswordProps } from '@elastic/eui/src/components/form/field_password/field_password';

}
declare module '@elastic/eui/src/services/browser/browser' {
	interface IBrowser {
	    isEventSupported: (name: string, element: EventTarget) => boolean;
	}
	export const Browser: Readonly<IBrowser>;
	export {};

}
declare module '@elastic/eui/src/services/browser' {
	export { Browser } from '@elastic/eui/src/services/browser/browser';

}
declare module '@elastic/eui/src/components/form/field_search/field_search' {
	import { Component, InputHTMLAttributes, KeyboardEvent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiFormControlLayoutProps } from '@elastic/eui/src/components/form/form_control_layout';
	export interface EuiFieldSearchProps extends CommonProps, InputHTMLAttributes<HTMLInputElement> {
	    name?: string;
	    id?: string;
	    placeholder?: string;
	    value?: string;
	    isInvalid?: boolean;
	    fullWidth?: boolean;
	    isLoading?: boolean;
	    /**
	     * Called when the user presses [Enter] OR on change if the incremental prop is `true`.
	     * If you don't need the on[Enter] functionality, prefer using onChange
	     */
	    onSearch?: (value: string) => void;
	    /**
	     * When `true` the search will be executed (that is, the `onSearch` will be called) as the
	     * user types.
	     */
	    incremental?: boolean;
	    /**
	     * when `true` creates a shorter height input
	     */
	    compressed?: boolean;
	    inputRef?: (node: HTMLInputElement | null) => void;
	    /**
	     * Shows a button that quickly clears any input
	     */
	    isClearable?: boolean;
	    /**
	     * Creates an input group with element(s) coming before input
	     * `string` | `ReactElement` or an array of these
	     */
	    prepend?: EuiFormControlLayoutProps['prepend'];
	    /**
	     * Creates an input group with element(s) coming after input.
	     * `string` | `ReactElement` or an array of these
	     */
	    append?: EuiFormControlLayoutProps['append'];
	}
	interface EuiFieldSearchState {
	    value: string;
	}
	export class EuiFieldSearch extends Component<EuiFieldSearchProps, EuiFieldSearchState> {
	    static defaultProps: {
	        fullWidth: boolean;
	        isLoading: boolean;
	        incremental: boolean;
	        compressed: boolean;
	        isClearable: boolean;
	    };
	    state: {
	        value: string;
	    };
	    inputElement: HTMLInputElement | null;
	    cleanups: Array<() => void>;
	    componentDidMount(): void;
	    onClear: () => void;
	    componentWillUnmount(): void;
	    setRef: (inputElement: HTMLInputElement | null) => void;
	    onKeyUp: (event: KeyboardEvent<HTMLInputElement>, incremental?: boolean | undefined, onSearch?: ((value: string) => void) | undefined) => void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/form/field_search' {
	export { EuiFieldSearch, EuiFieldSearchProps } from '@elastic/eui/src/components/form/field_search/field_search';

}
declare module '@elastic/eui/src/components/form/field_text/field_text' {
	import { InputHTMLAttributes, Ref, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiFormControlLayoutProps } from '@elastic/eui/src/components/form/form_control_layout';
	export type EuiFieldTextProps = InputHTMLAttributes<HTMLInputElement> & CommonProps & {
	    icon?: EuiFormControlLayoutProps['icon'];
	    isInvalid?: boolean;
	    fullWidth?: boolean;
	    isLoading?: boolean;
	    readOnly?: boolean;
	    inputRef?: Ref<HTMLInputElement>;
	    /**
	     * Creates an input group with element(s) coming before input.
	     * `string` | `ReactElement` or an array of these
	     */
	    prepend?: EuiFormControlLayoutProps['prepend'];
	    /**
	     * Creates an input group with element(s) coming after input.
	     * `string` | `ReactElement` or an array of these
	     */
	    append?: EuiFormControlLayoutProps['append'];
	    /**
	     * Completely removes form control layout wrapper and ignores
	     * icon, prepend, and append. Best used inside EuiFormControlLayoutDelimited.
	     */
	    controlOnly?: boolean;
	    /**
	     * when `true` creates a shorter height input
	     */
	    compressed?: boolean;
	};
	export const EuiFieldText: FunctionComponent<EuiFieldTextProps>;

}
declare module '@elastic/eui/src/components/form/field_text' {
	export { EuiFieldText, EuiFieldTextProps } from '@elastic/eui/src/components/form/field_text/field_text';

}
declare module '@elastic/eui/src/components/progress/progress' {
	import { FunctionComponent, HTMLAttributes, ProgressHTMLAttributes, ReactNode, CSSProperties } from 'react';
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common'; const sizeToClassNameMap: {
	    xs: string;
	    s: string;
	    m: string;
	    l: string;
	};
	export const SIZES: ("s" | "xs" | "m" | "l")[];
	export type EuiProgressSize = keyof typeof sizeToClassNameMap;
	export type ProgressColor = 'primary' | 'success' | 'warning' | 'danger' | 'subdued' | 'accent' | 'vis0' | 'vis1' | 'vis2' | 'vis3' | 'vis4' | 'vis5' | 'vis6' | 'vis7' | 'vis8' | 'vis9'; const colorToClassNameMap: {
	    primary: string;
	    success: string;
	    warning: string;
	    danger: string;
	    subdued: string;
	    accent: string;
	    vis0: string;
	    vis1: string;
	    vis2: string;
	    vis3: string;
	    vis4: string;
	    vis5: string;
	    vis6: string;
	    vis7: string;
	    vis8: string;
	    vis9: string;
	};
	export const COLORS: ProgressColor[];
	export type EuiProgressColor = keyof typeof colorToClassNameMap; const positionsToClassNameMap: {
	    fixed: string;
	    absolute: string;
	    static: string;
	};
	export const POSITIONS: ("fixed" | "absolute" | "static")[];
	export type EuiProgressPosition = keyof typeof positionsToClassNameMap;
	export type EuiProgressProps = CommonProps & {
	    size?: EuiProgressSize;
	    /**
	     * One of EUI's color palette, vis colors or a valid CSS color value https://developer.mozilla.org/en-US/docs/Web/CSS/color_value
	     */
	    color?: EuiProgressColor | CSSProperties['color'];
	    position?: EuiProgressPosition;
	}; type Indeterminate = EuiProgressProps & HTMLAttributes<HTMLDivElement>; type Determinate = EuiProgressProps & Omit<ProgressHTMLAttributes<HTMLProgressElement>, 'max'> & {
	    max?: number;
	    valueText?: boolean | ReactNode;
	    label?: ReactNode;
	    /**
	     * Object of props passed to the <span/> wrapping the determinate progress's label
	     */
	    labelProps?: HTMLAttributes<HTMLSpanElement>;
	};
	export const EuiProgress: FunctionComponent<ExclusiveUnion<Determinate, Indeterminate>>;
	export {};

}
declare module '@elastic/eui/src/components/progress' {
	export { EuiProgress, EuiProgressProps } from '@elastic/eui/src/components/progress/progress';

}
declare module '@elastic/eui/src/components/form/file_picker/file_picker' {
	import React, { Component, InputHTMLAttributes, ReactNode } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; const displayToClassNameMap: {
	    default: null;
	    large: string;
	};
	export const DISPLAYS: ("default" | "large")[];
	export type EuiFilePickerDisplay = keyof typeof displayToClassNameMap;
	export interface EuiFilePickerProps extends CommonProps, Omit<InputHTMLAttributes<HTMLInputElement>, 'onChange'> {
	    id?: string;
	    name?: string;
	    className?: string;
	    /**
	     * The content that appears in the dropzone if no file is attached
	     */
	    initialPromptText?: ReactNode;
	    /**
	     * Use as a callback to access the HTML FileList API
	     */
	    onChange?: (files: FileList | null) => void;
	    /**
	     * Reduces the size to a typical (compressed) input
	     */
	    compressed?: boolean;
	    /**
	     * Size or type of display;
	     * `default` for normal height, similar to other controls;
	     * `large` for taller size
	     */
	    display?: EuiFilePickerDisplay;
	    fullWidth?: boolean;
	    isInvalid?: boolean;
	    isLoading?: boolean;
	    disabled?: boolean;
	}
	export class EuiFilePicker extends Component<EuiFilePickerProps> {
	    static defaultProps: {
	        initialPromptText: JSX.Element;
	        compressed: boolean;
	        display: string;
	    };
	    state: {
	        promptText: null;
	        isHoveringDrop: boolean;
	    };
	    fileInput: HTMLInputElement | null;
	    generatedId: string;
	    handleChange: () => void;
	    removeFiles: (e?: React.MouseEvent<HTMLButtonElement, MouseEvent> | undefined) => void;
	    showDrop: () => void;
	    hideDrop: () => void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/form/file_picker' {
	export { EuiFilePicker, EuiFilePickerProps } from '@elastic/eui/src/components/form/file_picker/file_picker';

}
declare module '@elastic/eui/src/components/call_out/call_out' {
	import React, { HTMLAttributes, ReactNode } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { IconType } from '@elastic/eui/src/components/icon'; type Color = 'primary' | 'success' | 'warning' | 'danger'; type Size = 's' | 'm'; type Heading = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'p';
	export type EuiCallOutProps = CommonProps & Omit<HTMLAttributes<HTMLDivElement>, 'title' | 'color'> & {
	    title?: ReactNode;
	    iconType?: IconType;
	    color?: Color;
	    size?: Size;
	    heading?: Heading;
	};
	export const COLORS: Color[];
	export const HEADINGS: Heading[];
	export const EuiCallOut: React.ForwardRefExoticComponent<CommonProps & Pick<React.HTMLAttributes<HTMLDivElement>, "children" | "slot" | "style" | "prefix" | "className" | "id" | "lang" | "role" | "tabIndex" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "placeholder" | "spellCheck" | "translate" | "radioGroup" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is"> & {
	    title?: ReactNode;
	    iconType?: string | React.ComponentClass<{}, any> | React.FunctionComponent<{}> | undefined;
	    color?: "primary" | "success" | "warning" | "danger" | undefined;
	    size?: "s" | "m" | undefined;
	    heading?: "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "p" | undefined;
	} & React.RefAttributes<HTMLDivElement>>;
	export {};

}
declare module '@elastic/eui/src/components/call_out' {
	export { EuiCallOut, EuiCallOutProps } from '@elastic/eui/src/components/call_out/call_out';

}
declare module '@elastic/eui/src/components/form/form' {
	import { FunctionComponent, ReactNode, HTMLAttributes, FormHTMLAttributes } from 'react';
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common';
	export type EuiFormProps = CommonProps & ExclusiveUnion<{
	    component: 'form';
	} & FormHTMLAttributes<HTMLFormElement>, {
	    component?: 'div';
	} & HTMLAttributes<HTMLDivElement>> & {
	    isInvalid?: boolean;
	    /**
	     * Which HTML element to render `div` or `form`
	     */
	    component?: 'form' | 'div';
	    error?: ReactNode | ReactNode[];
	    /**
	     * Where to display the callout with the list of errors
	     */
	    invalidCallout?: 'above' | 'none';
	};
	export const EuiForm: FunctionComponent<EuiFormProps>;

}
declare module '@elastic/eui/src/components/form/form_error_text/form_error_text' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiFormErrorTextProps = CommonProps & HTMLAttributes<HTMLDivElement>;
	export const EuiFormErrorText: FunctionComponent<EuiFormErrorTextProps>;

}
declare module '@elastic/eui/src/components/form/form_error_text' {
	export { EuiFormErrorText, EuiFormErrorTextProps } from '@elastic/eui/src/components/form/form_error_text/form_error_text';

}
declare module '@elastic/eui/src/components/form/form_help_text/form_help_text' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiFormHelpTextProps = CommonProps & HTMLAttributes<HTMLDivElement>;
	export const EuiFormHelpText: FunctionComponent<EuiFormHelpTextProps>;

}
declare module '@elastic/eui/src/components/form/form_help_text' {
	export { EuiFormHelpText, EuiFormHelpTextProps } from '@elastic/eui/src/components/form/form_help_text/form_help_text';

}
declare module '@elastic/eui/src/services/objects' {
	export const get: (object: {}, path: string[] | string, defaultValue?: any) => any;
	export const omit: (object: {} | null | undefined, paths: string[]) => Partial<{}>;

}
declare module '@elastic/eui/src/components/form/form_row/form_row' {
	import { Component, HTMLAttributes, ReactElement, ReactNode } from 'react';
	import { ExclusiveUnion, CommonProps } from '@elastic/eui/src/components/common'; const displayToClassNameMap: {
	    row: null;
	    rowCompressed: string;
	    columnCompressed: string;
	    center: null;
	    centerCompressed: string;
	    columnCompressedSwitch: string;
	};
	export const DISPLAYS: ("center" | "row" | "rowCompressed" | "columnCompressed" | "centerCompressed" | "columnCompressedSwitch")[];
	export type EuiFormRowDisplayKeys = keyof typeof displayToClassNameMap;
	interface EuiFormRowState {
	    isFocused: boolean;
	    id: string;
	} type EuiFormRowCommonProps = CommonProps & {
	    /**
	     * When `rowCompressed`, just tightens up the spacing;
	     * Set to `columnCompressed` if compressed
	     * and horizontal layout is needed.
	     * Set to `center` or `centerCompressed` to align non-input
	     * content better with inline rows.
	     * Set to `columnCompressedSwitch` if the form control being passed
	     * as the child is a switch.
	     */
	    display?: EuiFormRowDisplayKeys;
	    hasEmptyLabelSpace?: boolean;
	    fullWidth?: boolean;
	    /**
	     * IDs of additional elements that should be part of children's `aria-describedby`
	     */
	    describedByIds?: string[];
	    /**
	     * Escape hatch to not render duplicate labels if the child also renders a label
	     */
	    hasChildLabel?: boolean;
	    /**
	     * ReactElement to render as this component's content
	     */
	    children: ReactElement;
	    label?: ReactNode;
	    /**
	     * Adds an extra node to the right of the form label without
	     * being contained inside the form label. Good for things
	     * like documentation links.
	     */
	    labelAppend?: any;
	    id?: string;
	    isInvalid?: boolean;
	    error?: ReactNode | ReactNode[];
	    /**
	     *  Adds a single node/string or an array of nodes/strings below the input
	     */
	    helpText?: ReactNode | ReactNode[];
	    /**
	     *  Passed along to the label element; and to the child field element when `disabled` doesn't already exist on the child field element.
	     */
	    isDisabled?: boolean;
	}; type LabelProps = {
	    labelType?: 'label';
	} & EuiFormRowCommonProps & HTMLAttributes<HTMLDivElement>; type LegendProps = {
	    /**
	     * Defaults to rendering a `<label>` but if passed `'legend'` for labelType,
	     * will render both a `<legend>` and the surrounding container as a `<fieldset>`
	     */
	    labelType?: 'legend';
	} & EuiFormRowCommonProps & Omit<HTMLAttributes<HTMLFieldSetElement>, 'disabled'>;
	export type EuiFormRowProps = ExclusiveUnion<LabelProps, LegendProps>;
	export class EuiFormRow extends Component<EuiFormRowProps, EuiFormRowState> {
	    static defaultProps: {
	        display: string;
	        hasEmptyLabelSpace: boolean;
	        fullWidth: boolean;
	        describedByIds: never[];
	        labelType: string;
	        hasChildLabel: boolean;
	    };
	    state: EuiFormRowState;
	    onFocus: (...args: any[]) => void;
	    onBlur: (...args: any[]) => void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/form/form_row' {
	export { EuiFormRow, EuiFormRowProps } from '@elastic/eui/src/components/form/form_row/form_row';

}
declare module '@elastic/eui/src/components/form/radio/radio' {
	import { FunctionComponent, ChangeEventHandler, HTMLAttributes, LabelHTMLAttributes, ReactNode } from 'react';
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common';
	export interface RadioProps {
	    autoFocus?: boolean;
	    /**
	     * When `true` creates a shorter height radio row
	     */
	    compressed?: boolean;
	    name?: string;
	    value?: string;
	    checked?: boolean;
	    disabled?: boolean;
	    onChange: ChangeEventHandler<HTMLInputElement>;
	    /**
	     * Object of props passed to the <label/>
	     */
	    labelProps?: CommonProps & LabelHTMLAttributes<HTMLLabelElement>;
	}
	interface idWithLabel extends RadioProps {
	    label: ReactNode;
	    id: string;
	}
	interface withId extends RadioProps {
	    id: string;
	}
	export type EuiRadioProps = CommonProps & Omit<HTMLAttributes<HTMLDivElement>, 'onChange' | 'id'> & ExclusiveUnion<ExclusiveUnion<RadioProps, idWithLabel>, withId>;
	export const EuiRadio: FunctionComponent<EuiRadioProps>;
	export {};

}
declare module '@elastic/eui/src/components/form/radio/radio_group' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common';
	import { EuiFormFieldsetProps, EuiFormLegendProps } from '@elastic/eui/src/components/form/form_fieldset';
	import { EuiRadioProps } from '@elastic/eui/src/components/form/radio/radio';
	export interface EuiRadioGroupOption extends Omit<EuiRadioProps, 'checked' | 'onChange'> {
	    id: string;
	}
	export type EuiRadioGroupChangeCallback = (id: string, value?: string) => void; type AsDivProps = Omit<HTMLAttributes<HTMLDivElement>, 'onChange'>; type WithLegendProps = Omit<EuiFormFieldsetProps, 'onChange'> & {
	    /**
	     * If the individual labels for each radio do not provide a sufficient description, add a legend.
	     * Wraps the group in a `EuiFormFieldset` which adds an `EuiLegend` for titling the whole group.
	     * Accepts an `EuiFormLegendProps` shape.
	     */
	    legend?: EuiFormLegendProps;
	};
	export type EuiRadioGroupProps = CommonProps & {
	    disabled?: boolean;
	    /**
	     * Tightens up the spacing between radio rows and sends down the
	     * compressed prop to the radio itself
	     */
	    compressed?: boolean;
	    name?: string;
	    options: EuiRadioGroupOption[];
	    idSelected?: string;
	    onChange: EuiRadioGroupChangeCallback;
	} & ExclusiveUnion<AsDivProps, WithLegendProps>;
	export const EuiRadioGroup: FunctionComponent<EuiRadioGroupProps>;
	export {};

}
declare module '@elastic/eui/src/components/form/radio' {
	export { EuiRadio, EuiRadioProps } from '@elastic/eui/src/components/form/radio/radio';
	export { EuiRadioGroup, EuiRadioGroupProps, EuiRadioGroupOption, } from '@elastic/eui/src/components/form/radio/radio_group';

}
declare module '@elastic/eui/src/services/number/number' {
	export const isWithinRange: (min: number | string, max: number | string, value: number | string) => boolean;
	export function isEvenlyDivisibleBy(num: number, factor: number): boolean;

}
declare module '@elastic/eui/src/services/number' {
	export * from '@elastic/eui/src/services/number/number';

}
declare module '@elastic/eui/src/components/focus_trap/focus_trap' {
	import { Component, CSSProperties } from 'react';
	import { ReactFocusOnProps } from 'react-focus-on/dist/es5/types';
	import { CommonProps } from '@elastic/eui/src/components/common';
	/**
	 * A DOM node, a selector string (which will be passed to
	 * `document.querySelector()` to find the DOM node), or a function that
	 * returns a DOM node.
	 */
	export type FocusTarget = HTMLElement | string | (() => HTMLElement);
	interface EuiFocusTrapInterface {
	    /**
	     * Clicking outside the trap area will disable the trap
	     */
	    clickOutsideDisables?: boolean;
	    /**
	     * Reference to element that will get focus when the trap is initiated
	     */
	    initialFocus?: FocusTarget;
	    style?: CSSProperties;
	    disabled?: boolean;
	}
	export interface EuiFocusTrapProps extends CommonProps, Omit<ReactFocusOnProps, 'enabled'>, // Inverted `disabled` prop used instead
	EuiFocusTrapInterface {
	}
	interface State {
	    hasBeenDisabledByClick: boolean;
	}
	export class EuiFocusTrap extends Component<EuiFocusTrapProps, State> {
	    static defaultProps: {
	        clickOutsideDisables: boolean;
	        disabled: boolean;
	        returnFocus: boolean;
	        noIsolation: boolean;
	        scrollLock: boolean;
	    };
	    state: State;
	    lastInterceptedEvent: Event | null;
	    preventFocusExit: boolean;
	    componentDidMount(): void;
	    componentDidUpdate(prevProps: EuiFocusTrapProps): void;
	    setInitialFocus: (initialFocus?: string | HTMLElement | (() => HTMLElement) | undefined) => void;
	    handleOutsideClick: ReactFocusOnProps['onClickOutside'];
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/focus_trap' {
	export { EuiFocusTrap, EuiFocusTrapProps, FocusTarget } from '@elastic/eui/src/components/focus_trap/focus_trap';

}
declare module '@elastic/eui/src/components/panel/panel' {
	import { ButtonHTMLAttributes, FunctionComponent, HTMLAttributes, Ref } from 'react';
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common';
	export const panelPaddingValues: {
	    none: number;
	    s: number;
	    m: number;
	    l: number;
	};
	export const SIZES: ("s" | "m" | "l" | "none")[];
	export const BORDER_RADII: ("m" | "none")[];
	export const COLORS: readonly ["transparent", "plain", "subdued", "accent", "primary", "success", "warning", "danger"];
	export type PanelColor = typeof COLORS[number];
	export type PanelPaddingSize = typeof SIZES[number];
	export type PanelBorderRadius = typeof BORDER_RADII[number];
	export interface _EuiPanelProps extends CommonProps {
	    /**
	     * Adds a medium shadow to the panel;
	     * Only works when `color="plain"`
	     */
	    hasShadow?: boolean;
	    /**
	     * Adds a slight 1px border on all edges.
	     * Only works when `color="plain | transparent"`
	     * Default is `undefined` and will default to that theme's panel style
	     */
	    hasBorder?: boolean;
	    /**
	     * Padding for all four sides
	     */
	    paddingSize?: PanelPaddingSize;
	    /**
	     * Corner border radius
	     */
	    borderRadius?: PanelBorderRadius;
	    /**
	     * When true the panel will grow in height to match `EuiFlexItem`
	     */
	    grow?: boolean;
	    panelRef?: Ref<HTMLDivElement>;
	    /**
	     * Background color of the panel;
	     * Usually a lightened form of the brand colors
	     */
	    color?: PanelColor;
	}
	export interface _EuiPanelDivlike extends _EuiPanelProps, Omit<HTMLAttributes<HTMLDivElement>, 'color'> {
	    element?: 'div';
	}
	export interface _EuiPanelButtonlike extends _EuiPanelProps, Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'color'> {
	    element?: 'button';
	}
	export type EuiPanelProps = ExclusiveUnion<_EuiPanelButtonlike, _EuiPanelDivlike>;
	export const EuiPanel: FunctionComponent<EuiPanelProps>;

}
declare module '@elastic/eui/src/services/hooks/useUpdateEffect' {
	export const useUpdateEffect: (effect: Function, deps: unknown[]) => void;

}
declare module '@elastic/eui/src/services/hooks/useDependentState' {
	
	export function useDependentState<T>(valueFn: (previousState: undefined | T) => T, deps: unknown[]): readonly [T, import("react").Dispatch<import("react").SetStateAction<T>>];

}
declare module '@elastic/eui/src/services/hooks/useCombinedRefs' {
	import { MutableRefObject, Ref } from 'react';
	export const useCombinedRefs: <T>(refs: (((instance: T | null) => void) | import("react").RefObject<T> | MutableRefObject<T | undefined> | null | undefined)[]) => (node: T) => void;

}
declare module '@elastic/eui/src/services/hooks/useForceRender' {
	export const useForceRender: () => () => void;

}
declare module '@elastic/eui/src/services/hooks/useIsWithinBreakpoints' {
	import { EuiBreakpointSize } from '@elastic/eui/src/services/breakpoint';
	/**
	 * Given the current window.innerWidth and an array of breakpoint keys,
	 * this hook stores state and returns true or false if the window.innerWidth
	 * falls within any of the named breakpoints.
	 *
	 * @param {EuiBreakpointSize[]} sizes An array of named breakpoints
	 * @param {boolean} isActive Manages whether the resize handler should be active
	 * @returns {boolean} Returns `true` if current breakpoint name is included in `sizes`
	 */
	export function useIsWithinBreakpoints(sizes: EuiBreakpointSize[], isActive?: boolean): boolean;

}
declare module '@elastic/eui/src/services/throttle' {
	export const throttle: (fn: (...args: any[]) => void, wait?: number) => (...args: any[]) => void;

}
declare module '@elastic/eui/src/services/hooks/useMouseMove' {
	import { MouseEvent, TouchEvent } from 'react';
	export function isMouseEvent<T = HTMLDivElement>(event: MouseEvent<T> | TouchEvent<T>): event is MouseEvent<T>;
	export function useMouseMove<T = HTMLDivElement>(handleChange: (location: {
	    x: number;
	    y: number;
	}, isFirstInteraction?: boolean) => void, interactionConditional?: any): [
	    (e: MouseEvent<T>) => void,
	    (e: MouseEvent<T> | TouchEvent<T>, isFirstInteraction?: boolean) => void
	];

}
declare module '@elastic/eui/src/services/hooks' {
	export * from '@elastic/eui/src/services/hooks/useDependentState';
	export * from '@elastic/eui/src/services/hooks/useCombinedRefs';
	export * from '@elastic/eui/src/services/hooks/useForceRender';
	export * from '@elastic/eui/src/services/hooks/useIsWithinBreakpoints';
	export * from '@elastic/eui/src/services/hooks/useMouseMove';
	export * from '@elastic/eui/src/services/hooks/useUpdateEffect';

}
declare module '@elastic/eui/src/components/panel/split_panel/split_panel' {
	import React, { FunctionComponent, ReactNode, HTMLAttributes } from 'react';
	import { _EuiPanelProps } from '@elastic/eui/src/components/panel/panel';
	import { EuiBreakpointSize } from '@elastic/eui/src/services/breakpoint';
	export type _EuiSplitPanelInnerProps = HTMLAttributes<HTMLDivElement> & Omit<_EuiPanelProps, 'hasShadow' | 'hasBorder' | 'borderRadius'>;
	/**
	 * Consumed via `EuiSplitPanel.Inner`.
	 * Extends most `EuiPanelProps`.
	 */
	export const _EuiSplitPanelInner: FunctionComponent<_EuiSplitPanelInnerProps>;
	export type _EuiSplitPanelOuterProps = HTMLAttributes<HTMLDivElement> & {
	    /**
	     * Any number of _EuiSplitPanelInner components
	     */
	    children?: ReactNode;
	    /**
	     * Changes the flex-direction
	     */
	    direction?: 'column' | 'row';
	    /**
	     * Stacks row display on small screens.
	     * Remove completely with `false` or provide your own list of breakpoint sizes to stack on.
	     */
	    responsive?: false | EuiBreakpointSize[];
	} & Omit<_EuiPanelProps, 'paddingSize'>;
	/**
	 * Consumed via `EuiSplitPanel.Outer`.
	 * Extends most `EuiPanelProps`.
	 */
	export const _EuiSplitPanelOuter: FunctionComponent<_EuiSplitPanelOuterProps>;
	export const EuiSplitPanel: {
	    Outer: React.FunctionComponent<_EuiSplitPanelOuterProps>;
	    Inner: React.FunctionComponent<_EuiSplitPanelInnerProps>;
	};

}
declare module '@elastic/eui/src/components/panel/split_panel' {
	export { EuiSplitPanel, _EuiSplitPanelInnerProps, _EuiSplitPanelOuterProps, } from '@elastic/eui/src/components/panel/split_panel/split_panel';

}
declare module '@elastic/eui/src/components/panel' {
	export { EuiPanel, EuiPanelProps, PanelPaddingSize, SIZES } from '@elastic/eui/src/components/panel/panel';
	export { EuiSplitPanel } from '@elastic/eui/src/components/panel/split_panel';

}
declare module '@elastic/eui/src/components/portal/portal' {
	/**
	 * NOTE: We can't test this component because Enzyme doesn't support rendering
	 * into portals.
	 */
	import { Component, ReactNode } from 'react';
	interface InsertPositionsMap {
	    after: InsertPosition;
	    before: InsertPosition;
	}
	export const insertPositions: InsertPositionsMap;
	export const INSERT_POSITIONS: EuiPortalInsertPosition[]; type EuiPortalInsertPosition = keyof typeof insertPositions;
	export interface EuiPortalProps {
	    /**
	     * ReactNode to render as this component's content
	     */
	    children: ReactNode;
	    insert?: {
	        sibling: HTMLElement;
	        position: EuiPortalInsertPosition;
	    };
	    portalRef?: (ref: HTMLDivElement | null) => void;
	}
	export class EuiPortal extends Component<EuiPortalProps> {
	    portalNode: HTMLDivElement;
	    constructor(props: EuiPortalProps);
	    componentDidMount(): void;
	    componentWillUnmount(): void;
	    updatePortalRef(ref: HTMLDivElement | null): void;
	    render(): import("react").ReactPortal;
	}
	export {};

}
declare module '@elastic/eui/src/components/portal' {
	export { EuiPortal, EuiPortalProps } from '@elastic/eui/src/components/portal/portal';

}
declare module '@elastic/eui/src/components/observer/observer' {
	import { Component, ReactNode } from 'react';
	interface BaseProps {
	    /**
	     * ReactNode to render as this component's content
	     */
	    children: (ref: any) => ReactNode;
	}
	export interface Observer {
	    disconnect: () => void;
	    observe: (element: Element, options?: {
	        [key: string]: any;
	    }) => void;
	}
	export class EuiObserver<Props extends BaseProps> extends Component<Props> {
	    protected name: string;
	    protected childNode: null | Element;
	    protected observer: null | Observer;
	    componentDidMount(): void;
	    componentWillUnmount(): void;
	    updateChildNode: (ref: Element) => void;
	    beginObserve: () => void;
	    render(): ReactNode;
	}
	export {};

}
declare module '@elastic/eui/src/components/observer/mutation_observer/mutation_observer' {
	import { ReactNode } from 'react';
	import { EuiObserver } from '@elastic/eui/src/components/observer/observer';
	export interface EuiMutationObserverProps {
	    /**
	     * ReactNode to render as this component's content
	     */
	    children: (ref: (e: HTMLElement | null) => void) => ReactNode;
	    onMutation: MutationCallback;
	    observerOptions?: MutationObserverInit;
	}
	export class EuiMutationObserver extends EuiObserver<EuiMutationObserverProps> {
	    name: string;
	    onMutation: MutationCallback;
	    beginObserve: () => void;
	}
	export const useMutationObserver: (container: Element | null, callback: MutationCallback, observerOptions?: MutationObserverInit | undefined) => void;

}
declare module '@elastic/eui/src/components/observer/mutation_observer' {
	export { EuiMutationObserver, EuiMutationObserverProps, useMutationObserver, } from '@elastic/eui/src/components/observer/mutation_observer/mutation_observer';

}
declare module '@elastic/eui/src/services/popover/types' {
	export type EuiPopoverPosition = 'top' | 'right' | 'bottom' | 'left';

}
declare module '@elastic/eui/src/services/popover/calculate_popover_position' {
	import { EuiPopoverPosition } from '@elastic/eui/src/services/popover/types';
	interface EuiPopoverBoundingBox {
	    top: number;
	    left: number;
	    width: number;
	    height: number;
	}
	interface EuiPopoverAnchorRect extends EuiPopoverBoundingBox {
	    right: number;
	    bottom: number;
	}
	interface EuiPopoverDimensions {
	    width: number;
	    height: number;
	}
	interface EuiPopoverPositionedBox extends EuiPopoverBoundingBox {
	    position: EuiPopoverPosition;
	}
	/**
	 * Determine the best position for a popover that avoids clipping by the window view port.
	 *
	 * @param {Object} anchorBounds - getBoundingClientRect() of the node the popover is tethered to (e.g. a button).
	 * @param {Object} popoverBounds - getBoundingClientRect() of the popover node (e.g. the tooltip).
	 * @param {string} requestedPosition - Position the user wants. One of ["top", "right", "bottom", "left"]
	 * @param {number} buffer - The space between the wrapper and the popover. Also the minimum space between the
	 * popover and the window.
	 * @param {Array} positions - List of acceptable positions. Defaults to ["top", "right", "bottom", "left"].
	 *
	 * @returns {Object} With properties position (one of ["top", "right", "bottom", "left"]), left, top, width, and height.
	 */
	export function calculatePopoverPosition(anchorBounds: EuiPopoverAnchorRect, popoverBounds: EuiPopoverDimensions, requestedPosition: EuiPopoverPosition, buffer?: number, positions?: EuiPopoverPosition[]): EuiPopoverPositionedBox;
	export {};

}
declare module '@elastic/eui/src/services/popover/popover_positioning' {
	import { EuiPopoverPosition } from '@elastic/eui/src/services/popover/types';
	export const POSITIONS: EuiPopoverPosition[];
	interface BoundingBox {
	    [position: string]: number;
	    top: number;
	    right: number;
	    bottom: number;
	    left: number;
	}
	export interface EuiClientRect extends BoundingBox {
	    height: number;
	    width: number;
	}
	interface FindPopoverPositionArgs {
	    anchor: HTMLElement;
	    popover: HTMLElement;
	    align?: EuiPopoverPosition;
	    position: EuiPopoverPosition;
	    forcePosition?: boolean;
	    buffer?: number | [number, number, number, number];
	    offset?: number;
	    allowCrossAxis?: boolean;
	    container?: HTMLElement;
	    arrowConfig?: {
	        arrowWidth: number;
	        arrowBuffer: number;
	    };
	    returnBoundingBox?: boolean;
	}
	interface FindPopoverPositionResult {
	    top: number;
	    left: number;
	    position: 'top' | 'right' | 'bottom' | 'left';
	    fit: number;
	    arrow?: {
	        left: number;
	        top: number;
	    };
	    anchorBoundingBox?: EuiClientRect;
	}
	/**
	 * Calculates the absolute positioning (relative to document.body) to place a popover element
	 *
	 * @param anchor {HTMLElement} Element to anchor the popover to
	 * @param popover {HTMLElement} Element containing the popover content
	 * @param position {string} Position the user wants. One of ["top", "right", "bottom", "left"]
	 * @param [forcePosition] {boolean} If true, use only the provided `position` value and don't try any other position
	 * @param [align] {string} Cross-axis alignment. One of ["top", "right", "bottom", "left"]
	 * @param [buffer=16] {number} Minimum distance between the popover and the bounding container
	 * @param [offset=0] {number} Distance between the popover and the anchor
	 * @param [allowCrossAxis=true] {boolean} Whether to allow the popover to be positioned on the cross-axis
	 * @param [container] {HTMLElement} Element the popover must be constrained to fit within
	 * @param [arrowConfig] {{arrowWidth: number, arrowBuffer: number}} If
	 *  present, describes the size & constraints for an arrow element, and the
	 *  function return value will include an `arrow` param with position details
	 *
	 * @returns {FindPopoverPositionResult} absolute page coordinates for the
	 * popover, and the placement's relation to the anchor or undefined
	 * there's no room.
	 */
	export function findPopoverPosition({ anchor, popover, align, position, forcePosition, buffer, offset, allowCrossAxis, container, arrowConfig, returnBoundingBox, }: FindPopoverPositionArgs): FindPopoverPositionResult;
	interface GetPopoverScreenCoordinatesArgs {
	    position: EuiPopoverPosition;
	    align?: EuiPopoverPosition;
	    anchorBoundingBox: EuiClientRect;
	    popoverBoundingBox: EuiClientRect;
	    windowBoundingBox: EuiClientRect;
	    containerBoundingBox: EuiClientRect;
	    arrowConfig?: {
	        arrowWidth: number;
	        arrowBuffer: number;
	    };
	    offset?: number;
	    buffer?: number | [number, number, number, number];
	}
	interface GetPopoverScreenCoordinatesResult {
	    top: number;
	    left: number;
	    fit: number;
	    arrow: {
	        top: number;
	        left: number;
	    } | undefined;
	}
	/**
	 * Given a target position and the popover's surrounding context, returns either an
	 * object with {top, left} screen coordinates or `null` if it's not possible to show
	 * content in the target position
	 * @param position {string} the target position, one of ["top", "right", "bottom", "left"]
	 * @param align {string} target alignment on the cross-axis, one of ["top", "right", "bottom", "left"]
	 * @param anchorBoundingBox {Object} bounding box of the anchor element
	 * @param popoverBoundingBox {Object} bounding box of the popover element
	 * @param windowBoundingBox {Object} bounding box of the window
	 * @param containerBoundingBox {Object} bounding box of the container
	 * @param [arrowConfig] {{arrowWidth: number, arrowBuffer: number}} If present, describes the size &
	 *  constraints for an arrow element, and the function return value will include an `arrow` param
	 *  with position details
	 * @param [offset=0] {number} Distance between the popover and the anchor
	 * @param [buffer=0] {number} Minimum distance between the popover's
	 *  placement and the container edge
	 *
	 * @returns {GetPopoverScreenCoordinatesResult}
	 *  object with top/left coordinates, the popover's relative position to the anchor, and how well the
	 *  popover fits in the location (0.0 -> 1.0) coordinates and the popover's relative position, if
	 *  there is no room in this placement then null
	 */
	export function getPopoverScreenCoordinates({ position, align, anchorBoundingBox, popoverBoundingBox, windowBoundingBox, containerBoundingBox, arrowConfig, offset, buffer, }: GetPopoverScreenCoordinatesArgs): GetPopoverScreenCoordinatesResult;
	/**
	 * Finds the client pixel coordinate of each edge for the element's bounding box,
	 * and the bounding box's width & height
	 *
	 * @param {HTMLElement} element
	 * @returns {{top: number, right: number, bottom: number, left: number, height: number, width: number}}
	 */
	export function getElementBoundingBox(element: HTMLElement): EuiClientRect;
	/**
	 * Calculates the available content space between anchor and container
	 *
	 * @param {Object} anchorBoundingBox Client bounding box of the anchor element
	 * @param {Object} containerBoundingBox Client bounding box of the container element
	 * @param {number} buffer Minimum distance between the popover and the bounding container
	 * @param {number} offset Distance between the popover and the anchor
	 * @param {string} offsetSide Side the offset needs to be applied to, one
	 *  of ["top", "right", "bottom", "left"]
	 * @returns {{top: number, right: number, bottom: number, left: number}}
	 */
	export function getAvailableSpace(anchorBoundingBox: BoundingBox, containerBoundingBox: BoundingBox, buffer: number | [number, number, number, number], offset: number, offsetSide: EuiPopoverPosition): BoundingBox;
	/**
	 * Computes the fit (overlap) of the content within the container, fit is in range 0.0 => 1.0
	 * @param contentBoundingBox bounding box of content to calculate fit for
	 * @param containerBoundingBox bounding box of container
	 * @returns {number}
	 */
	export function getVisibleFit(contentBoundingBox: BoundingBox, containerBoundingBox: BoundingBox): number;
	/**
	 * Calculates the intersection space between two bounding boxes
	 *
	 * @param firstBox
	 * @param secondBox
	 * @returns {EuiClientRect}
	 */
	export function intersectBoundingBoxes(firstBox: BoundingBox, secondBox: BoundingBox): EuiClientRect;
	/**
	 * Returns the top-most defined z-index in the element's ancestor hierarchy
	 * relative to the `target` element; if no z-index is defined, returns 0
	 * @param element {HTMLElement}
	 * @param cousin {HTMLElement}
	 * @returns {number}
	 */
	export function getElementZIndex(element: HTMLElement, cousin: HTMLElement): number;
	export {};

}
declare module '@elastic/eui/src/services/popover' {
	export { calculatePopoverPosition } from '@elastic/eui/src/services/popover/calculate_popover_position';
	export { findPopoverPosition, getElementZIndex } from '@elastic/eui/src/services/popover/popover_positioning';
	export { EuiPopoverPosition } from '@elastic/eui/src/services/popover/types';

}
declare module '@elastic/eui/src/components/outside_click_detector/outside_click_detector' {
	import { Component, EventHandler, MouseEvent as ReactMouseEvent, ReactElement } from 'react';
	export interface EuiEvent extends Event {
	    euiGeneratedBy: string[];
	}
	export interface EuiOutsideClickDetectorProps {
	    /**
	     * ReactNode to render as this component's content
	     */
	    children: ReactElement<any>;
	    onOutsideClick: (event: Event) => void;
	    isDisabled?: boolean;
	    onMouseDown?: (event: ReactMouseEvent) => void;
	    onMouseUp?: (event: ReactMouseEvent) => void;
	    onTouchStart?: (event: ReactMouseEvent) => void;
	    onTouchEnd?: (event: ReactMouseEvent) => void;
	}
	export class EuiOutsideClickDetector extends Component<EuiOutsideClickDetectorProps> {
	    private id;
	    private capturedDownIds;
	    constructor(props: EuiOutsideClickDetectorProps);
	    onClickOutside: EventHandler<any>;
	    componentDidMount(): void;
	    componentWillUnmount(): void;
	    onChildClick: (event: ReactMouseEvent, cb: (event: ReactMouseEvent) => void) => void;
	    onChildMouseDown: (event: ReactMouseEvent) => void;
	    onChildMouseUp: (event: ReactMouseEvent) => void;
	    render(): ReactElement<any, string | ((props: any) => ReactElement<any, string | any | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<any, any, any>)>;
	}

}
declare module '@elastic/eui/src/components/outside_click_detector' {
	export { EuiOutsideClickDetector, EuiOutsideClickDetectorProps, } from '@elastic/eui/src/components/outside_click_detector/outside_click_detector';

}
declare module '@elastic/eui/src/components/popover/popover' {
	import { Component, KeyboardEvent, CSSProperties, HTMLAttributes, ReactNode, Ref, RefCallback } from 'react';
	import { CommonProps, NoArgCallback } from '@elastic/eui/src/components/common';
	import { FocusTarget, EuiFocusTrapProps } from '@elastic/eui/src/components/focus_trap';
	import { ReactFocusOnProps } from 'react-focus-on/dist/es5/types';
	import { PanelPaddingSize, EuiPanelProps } from '@elastic/eui/src/components/panel';
	import { EuiPopoverPosition } from '@elastic/eui/src/services/popover';
	export const popoverAnchorPosition: readonly ["upCenter", "upLeft", "upRight", "downCenter", "downLeft", "downRight", "leftCenter", "leftUp", "leftDown", "rightCenter", "rightUp", "rightDown"];
	export type PopoverAnchorPosition = typeof popoverAnchorPosition[number];
	export interface EuiPopoverProps {
	    /**
	     * Class name passed to the direct parent of the button
	     */
	    anchorClassName?: string;
	    /**
	     * Alignment of the popover and arrow relative to the button
	     */
	    anchorPosition?: PopoverAnchorPosition;
	    /**
	     * Style and position alteration for arrow-less, left-aligned
	     * attachment. Intended for use with inputs as anchors, e.g.
	     * EuiInputPopover
	     */
	    attachToAnchor?: boolean;
	    /**
	     * Triggering element for which to align the popover to
	     */
	    button: NonNullable<ReactNode>;
	    buttonRef?: RefCallback<HTMLDivElement>;
	    /**
	     * Callback to handle hiding of the popover
	     */
	    closePopover: NoArgCallback<void>;
	    /**
	     * Restrict the popover's position within this element
	     */
	    container?: HTMLElement;
	    /**
	     * CSS display type for both the popover and anchor
	     */
	    display?: keyof typeof displayToClassNameMap;
	    /**
	     * Object of props passed to EuiFocusTrap
	     */
	    focusTrapProps?: Pick<EuiFocusTrapProps, 'clickOutsideDisables' | 'noIsolation' | 'scrollLock' | 'shards'>;
	    /**
	     * Show arrow indicating to originating button
	     */
	    hasArrow?: boolean;
	    /**
	     * Specifies what element should initially have focus; Can be a DOM
	     * node, or a selector string (which will be passed to
	     * document.querySelector() to find the DOM node), or a function that
	     * returns a DOM node
	     * Set to `false` to prevent initial auto-focus. Use only
	     * when your app handles setting initial focus state.
	     */
	    initialFocus?: FocusTarget | false;
	    /**
	     * Passed directly to EuiPortal for DOM positioning. Both properties are
	     * required if prop is specified
	     */
	    insert?: {
	        sibling: HTMLElement;
	        position: 'before' | 'after';
	    };
	    /**
	     * Visibility state of the popover
	     */
	    isOpen?: boolean;
	    /**
	     * Traps tab focus within the popover contents
	     */
	    ownFocus?: boolean;
	    /**
	     * Custom class added to the EuiPanel containing the popover contents
	     */
	    panelClassName?: string;
	    /**
	     * EuiPanel padding on all sides
	     */
	    panelPaddingSize?: PanelPaddingSize;
	    /**
	     * Standard DOM `style` attribute. Passed to the EuiPanel
	     */
	    panelStyle?: CSSProperties;
	    /**
	     * Object of props passed to EuiPanel
	     */
	    panelProps?: Omit<EuiPanelProps, 'style'>;
	    panelRef?: RefCallback<HTMLElement | null>;
	    popoverRef?: Ref<HTMLDivElement>;
	    /**
	     * When `true`, the popover's position is re-calculated when the user
	     * scrolls, this supports having fixed-position popover anchors. When nesting
	     * an `EuiPopover` in a scrollable container, `repositionOnScroll` should be `true`
	     */
	    repositionOnScroll?: boolean;
	    /**
	     * By default, popover content inherits the z-index of the anchor
	     * component; pass `zIndex` to override
	     */
	    zIndex?: number;
	    /**
	     * Function callback for when the focus trap is deactivated
	     */
	    onTrapDeactivation?: ReactFocusOnProps['onDeactivation'];
	    /**
	     * Distance away from the anchor that the popover will render
	     */
	    offset?: number;
	    /**
	     * Minimum distance between the popover and the bounding container;
	     * Pass an array of 4 values to adjust each side differently: `[top, right, bottom, left]`
	     * Default is 16
	     */
	    buffer?: number | [number, number, number, number];
	    /**
	     * Element to pass as the child element of the arrow;
	     * Use case is typically limited to an accompanying `EuiBeacon`
	     */
	    arrowChildren?: ReactNode;
	    /**
	     * Provide a name to the popover panel
	     */
	    'aria-label'?: string;
	    /**
	     * Alternative option to `aria-label` that takes an `id`.
	     * Usually takes the `id` of the popover title
	     */
	    'aria-labelledby'?: string;
	}
	export function getPopoverPositionFromAnchorPosition(anchorPosition: PopoverAnchorPosition): EuiPopoverPosition;
	export function getPopoverAlignFromAnchorPosition(anchorPosition: PopoverAnchorPosition): EuiPopoverPosition;
	export const ANCHOR_POSITIONS: string[]; const displayToClassNameMap: {
	    inlineBlock: undefined;
	    block: string;
	};
	export const DISPLAY: string[];
	export type Props = CommonProps & HTMLAttributes<HTMLDivElement> & EuiPopoverProps;
	interface State {
	    prevProps: {
	        isOpen?: boolean;
	    };
	    suppressingPopover?: boolean;
	    isClosing: boolean;
	    isOpening: boolean;
	    popoverStyles: CSSProperties;
	    arrowStyles?: CSSProperties;
	    arrowPosition: any;
	    openPosition: any;
	    isOpenStable: boolean;
	} type PropsWithDefaults = Props & {
	    anchorPosition: PopoverAnchorPosition;
	    /** CSS display type for both the popover and anchor */
	    display: keyof typeof displayToClassNameMap;
	    hasArrow: boolean;
	    isOpen: boolean;
	    ownFocus: boolean;
	    panelPaddingSize: PanelPaddingSize;
	};
	export class EuiPopover extends Component<Props, State> {
	    static defaultProps: Partial<PropsWithDefaults>;
	    static getDerivedStateFromProps(nextProps: Props, prevState: State): Partial<State> | null;
	    private respositionTimeout;
	    private closingTransitionTimeout;
	    private closingTransitionAnimationFrame;
	    private updateFocusAnimationFrame;
	    private button;
	    private panel;
	    private hasSetInitialFocus;
	    private descriptionId;
	    constructor(props: Props);
	    closePopover: () => void;
	    onEscapeKey: (event: Event) => void;
	    onKeyDown: (event: KeyboardEvent) => void;
	    onClickOutside: (event: Event) => void;
	    updateFocus(): void;
	    onOpenPopover: () => void;
	    componentDidMount(): void;
	    componentDidUpdate(prevProps: Props): void;
	    componentWillUnmount(): void;
	    onMutation: (records: MutationRecord[]) => void;
	    positionPopover: (allowEnforcePosition: boolean) => void;
	    positionPopoverFixed: () => void;
	    positionPopoverFluid: () => void;
	    panelRef: (node: HTMLElement | null) => void;
	    buttonRef: (node: HTMLDivElement | null) => void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/observer/resize_observer/resize_observer' {
	
	import { ReactNode } from 'react';
	import { EuiObserver } from '@elastic/eui/src/components/observer/observer';
	export interface EuiResizeObserverProps {
	    /**
	     * ReactNode to render as this component's content
	     */
	    children: (ref: (e: HTMLElement | null) => void) => ReactNode;
	    onResize: (dimensions: {
	        height: number;
	        width: number;
	    }) => void;
	}
	export const hasResizeObserver: boolean;
	export class EuiResizeObserver extends EuiObserver<EuiResizeObserverProps> {
	    name: string;
	    state: {
	        height: number;
	        width: number;
	    };
	    onResize: ResizeObserverCallback;
	    beginObserve: () => void;
	}
	export const useResizeObserver: (container: Element | null, dimension?: "width" | "height" | undefined) => {
	    width: number;
	    height: number;
	};

}
declare module '@elastic/eui/src/components/observer/resize_observer' {
	export { EuiResizeObserver, EuiResizeObserverProps, useResizeObserver, } from '@elastic/eui/src/components/observer/resize_observer/resize_observer';

}
declare module '@elastic/eui/src/components/popover/input_popover' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiPopoverProps } from '@elastic/eui/src/components/popover/popover';
	export interface _EuiInputPopoverProps extends Omit<EuiPopoverProps, 'button' | 'buttonRef'> {
	    disableFocusTrap?: boolean;
	    fullWidth?: boolean;
	    input: EuiPopoverProps['button'];
	    inputRef?: EuiPopoverProps['buttonRef'];
	    onPanelResize?: (width?: number) => void;
	}
	export type EuiInputPopoverProps = CommonProps & HTMLAttributes<HTMLDivElement> & _EuiInputPopoverProps;
	export const EuiInputPopover: FunctionComponent<EuiInputPopoverProps>;

}
declare module '@elastic/eui/src/components/popover/popover_title' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { PanelPaddingSize } from '@elastic/eui/src/components/panel';
	export type EuiPopoverTitleProps = FunctionComponent<HTMLAttributes<HTMLDivElement> & CommonProps & {
	    /**
	     * Customize the all around padding of the popover title.
	     * Leave `undefined` to inherit from the `panelPaddingSize` of the containing EuiPopover
	     */
	    paddingSize?: PanelPaddingSize;
	}>;
	export const PADDING_SIZES: ("s" | "m" | "l" | "none")[];
	export const EuiPopoverTitle: EuiPopoverTitleProps;

}
declare module '@elastic/eui/src/components/popover/popover_footer' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { PanelPaddingSize } from '@elastic/eui/src/components/panel';
	export type EuiPopoverFooterProps = FunctionComponent<HTMLAttributes<HTMLDivElement> & CommonProps & {
	    /**
	     * Customize the all around padding of the popover footer.
	     * Leave `undefined` to inherit from the `panelPaddingSize` of the containing EuiPopover
	     */
	    paddingSize?: PanelPaddingSize;
	}>;
	export const PADDING_SIZES: ("s" | "m" | "l" | "none")[];
	export const EuiPopoverFooter: EuiPopoverFooterProps;

}
declare module '@elastic/eui/src/components/popover/wrapping_popover' {
	import { Component } from 'react';
	import { Props as EuiPopoverProps } from '@elastic/eui/src/components/popover/popover';
	export interface EuiWrappingPopoverProps extends EuiPopoverProps {
	    button: HTMLElement;
	}
	/**
	 * Injects the EuiPopover next to the button via EuiPortal
	 * then the button element is moved into the popover dom.
	 * On unmount, the button is moved back to its original location.
	 */
	export class EuiWrappingPopover extends Component<EuiWrappingPopoverProps> {
	    private portal;
	    private anchor;
	    componentDidMount(): void;
	    componentWillUnmount(): void;
	    setPortalRef: (node: HTMLElement | null) => void;
	    setAnchorRef: (node: HTMLElement | null) => void;
	    render(): JSX.Element;
	}

}
declare module '@elastic/eui/src/components/popover' {
	export { EuiInputPopover, EuiInputPopoverProps } from '@elastic/eui/src/components/popover/input_popover';
	export { EuiPopover, EuiPopoverProps, PopoverAnchorPosition } from '@elastic/eui/src/components/popover/popover';
	export { EuiPopoverTitle, EuiPopoverTitleProps } from '@elastic/eui/src/components/popover/popover_title';
	export { EuiPopoverFooter, EuiPopoverFooterProps } from '@elastic/eui/src/components/popover/popover_footer';
	export { EuiWrappingPopover, EuiWrappingPopoverProps, } from '@elastic/eui/src/components/popover/wrapping_popover';

}
declare module '@elastic/eui/src/components/form/range/range_highlight' {
	import React, { FunctionComponent } from 'react';
	export interface EuiRangeHighlightProps {
	    className?: string;
	    background?: string;
	    compressed?: boolean;
	    hasFocus?: boolean;
	    showTicks?: boolean;
	    lowerValue: number;
	    upperValue: number;
	    max: number;
	    min: number;
	    onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;
	}
	export const EuiRangeHighlight: FunctionComponent<EuiRangeHighlightProps>;

}
declare module '@elastic/eui/src/components/form/range/range_input' {
	import { FunctionComponent } from 'react';
	import { EuiFieldNumberProps } from '@elastic/eui/src/components/form/field_number';
	export interface EuiRangeInputProps extends Omit<EuiFieldNumberProps, 'max' | 'min' | 'value'> {
	    autoSize?: boolean;
	    digitTolerance: number;
	    max: number;
	    min: number;
	    side?: 'min' | 'max';
	    value: string | number;
	}
	export const EuiRangeInput: FunctionComponent<EuiRangeInputProps>;

}
declare module '@elastic/eui/src/components/form/range/range_label' {
	import { FunctionComponent } from 'react';
	export interface EuiRangeLabelProps {
	    /**
	     * ReactNode to render as this component's content
	     */
	    children: string | number;
	    disabled?: boolean;
	    side?: 'min' | 'max';
	}
	export const EuiRangeLabel: FunctionComponent<EuiRangeLabelProps>;

}
declare module '@elastic/eui/src/components/form/range/range_levels' {
	import { CSSProperties, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiRangeLevelColor = 'primary' | 'success' | 'warning' | 'danger';
	export const LEVEL_COLORS: EuiRangeLevelColor[];
	export interface EuiRangeLevel extends CommonProps {
	    min: number;
	    max: number;
	    /**
	     * Accepts one of `["primary", "success", "warning", "danger"]` or a valid CSS color value.
	     */
	    color: EuiRangeLevelColor | CSSProperties['color'];
	}
	export interface EuiRangeLevelsProps {
	    /**
	     * An array of #EuiRangeLevel objects
	     */
	    levels?: EuiRangeLevel[];
	    max: number;
	    min: number;
	    showTicks?: boolean;
	    compressed?: boolean;
	}
	export const EuiRangeLevels: FunctionComponent<EuiRangeLevelsProps>;

}
declare module '@elastic/eui/src/components/form/range/range_slider' {
	import React, { ChangeEventHandler, InputHTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiRangeSliderProps = InputHTMLAttributes<HTMLInputElement> & CommonProps & {
	    id?: string;
	    name?: string;
	    min: number;
	    max: number;
	    step?: number;
	    compressed?: boolean;
	    hasFocus?: boolean;
	    showRange?: boolean;
	    showTicks?: boolean;
	    disabled?: boolean;
	    tabIndex?: number;
	    onChange?: ChangeEventHandler<HTMLInputElement>;
	};
	export const EuiRangeSlider: React.ForwardRefExoticComponent<React.InputHTMLAttributes<HTMLInputElement> & CommonProps & {
	    id?: string | undefined;
	    name?: string | undefined;
	    min: number;
	    max: number;
	    step?: number | undefined;
	    compressed?: boolean | undefined;
	    hasFocus?: boolean | undefined;
	    showRange?: boolean | undefined;
	    showTicks?: boolean | undefined;
	    disabled?: boolean | undefined;
	    tabIndex?: number | undefined;
	    onChange?: ((event: React.ChangeEvent<HTMLInputElement>) => void) | undefined;
	} & React.RefAttributes<HTMLInputElement>>;

}
declare module '@elastic/eui/src/components/form/range/range_ticks' {
	import { ButtonHTMLAttributes, MouseEventHandler, FunctionComponent, ReactNode } from 'react';
	export interface EuiRangeTick {
	    value: number;
	    label: ReactNode;
	}
	export type EuiRangeTicksProps = Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'value'> & {
	    ticks?: EuiRangeTick[];
	    tickSequence: number[];
	    value?: number | string | Array<string | number>;
	    min: number;
	    max: number;
	    compressed?: boolean;
	    interval?: number;
	    disabled?: boolean;
	    onChange?: MouseEventHandler<HTMLButtonElement>;
	};
	export const EuiRangeTicks: FunctionComponent<EuiRangeTicksProps>;

}
declare module '@elastic/eui/src/components/form/range/range_tooltip' {
	import { FunctionComponent, ReactNode } from 'react';
	export interface EuiRangeTooltipProps {
	    value?: number | string;
	    valueAppend?: ReactNode;
	    valuePrepend?: ReactNode;
	    max: number;
	    min: number;
	    name?: string;
	    showTicks?: boolean;
	    compressed?: boolean;
	}
	export const EuiRangeTooltip: FunctionComponent<EuiRangeTooltipProps>;

}
declare module '@elastic/eui/src/components/form/range/range_track' {
	import { Component, MouseEventHandler, HTMLAttributes } from 'react';
	import { EuiRangeLevel, LEVEL_COLORS } from '@elastic/eui/src/components/form/range/range_levels';
	import { EuiRangeTick } from '@elastic/eui/src/components/form/range/range_ticks';
	export { LEVEL_COLORS };
	export interface EuiRangeTrackProps extends Omit<HTMLAttributes<HTMLDivElement>, 'onChange'> {
	    min: number;
	    max: number;
	    step?: number;
	    value?: number | string | Array<string | number>;
	    compressed?: boolean;
	    disabled?: boolean;
	    showTicks?: boolean;
	    tickInterval?: number;
	    ticks?: EuiRangeTick[];
	    onChange?: MouseEventHandler<HTMLButtonElement>;
	    levels?: EuiRangeLevel[];
	}
	export class EuiRangeTrack extends Component<EuiRangeTrackProps> {
	    validateValueIsInStep: (value: number) => number;
	    calculateSequence: (min: EuiRangeTrackProps['min'], max: EuiRangeTrackProps['max'], interval?: EuiRangeTrackProps['tickInterval']) => number[];
	    calculateTicks: (min: EuiRangeTrackProps['min'], max: EuiRangeTrackProps['max'], step?: EuiRangeTrackProps['step'], tickInterval?: EuiRangeTrackProps['tickInterval'], customTicks?: EuiRangeTick[] | undefined) => number[];
	    render(): JSX.Element;
	}

}
declare module '@elastic/eui/src/components/form/range/range_wrapper' {
	import React, { HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export interface EuiRangeWrapperProps extends CommonProps, HTMLAttributes<HTMLDivElement> {
	    fullWidth?: boolean;
	    compressed?: boolean;
	}
	export const EuiRangeWrapper: React.ForwardRefExoticComponent<EuiRangeWrapperProps & React.RefAttributes<HTMLDivElement>>;

}
declare module '@elastic/eui/src/components/form/range/range' {
	
	import React, { Component, ReactNode } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiRangeInputProps } from '@elastic/eui/src/components/form/range/range_input';
	import { EuiRangeLevel } from '@elastic/eui/src/components/form/range/range_levels';
	import { EuiRangeTick } from '@elastic/eui/src/components/form/range/range_ticks';
	export interface EuiRangeProps extends CommonProps, Omit<EuiRangeInputProps, 'onChange' | 'digitTolerance'> {
	    compressed?: boolean;
	    readOnly?: boolean;
	    fullWidth?: boolean;
	    id?: string;
	    /**
	     * Create colored indicators for certain intervals
	     */
	    levels?: EuiRangeLevel[];
	    step?: number;
	    /**
	     * Pass `true` to displays an extra input control for direct manipulation.
	     * Pass `'inputWithPopover'` to only show the input but show the range in a dropdown.
	     */
	    showInput?: boolean | 'inputWithPopover';
	    /**
	     * Shows static min/max labels on the sides of the range slider
	     */
	    showLabels?: boolean;
	    /**
	     * Shows a thick line from min to value
	     */
	    showRange?: boolean;
	    /**
	     * Shows clickable tick marks and labels at the given interval (`step`/`tickInterval`)
	     */
	    showTicks?: boolean;
	    /**
	     * Shows a tooltip styled value
	     */
	    showValue?: boolean;
	    /**
	     * Specified ticks at specified values
	     */
	    ticks?: EuiRangeTick[];
	    /**
	     * Modifies the number of tick marks and at what interval
	     */
	    tickInterval?: number;
	    /**
	     * Appends to the tooltip
	     */
	    valueAppend?: ReactNode;
	    /**
	     * Prepends to the tooltip
	     */
	    valuePrepend?: ReactNode;
	    onChange?: (event: React.ChangeEvent<HTMLInputElement> | React.MouseEvent<HTMLButtonElement>, isValid: boolean) => void;
	}
	export class EuiRange extends Component<EuiRangeProps> {
	    static defaultProps: {
	        min: number;
	        max: number;
	        step: number;
	        fullWidth: boolean;
	        compressed: boolean;
	        isLoading: boolean;
	        showLabels: boolean;
	        showInput: boolean;
	        showRange: boolean;
	        showTicks: boolean;
	        showValue: boolean;
	        levels: never[];
	    };
	    preventPopoverClose: boolean;
	    state: {
	        id: string;
	        isPopoverOpen: boolean;
	    };
	    handleOnChange: (e: React.ChangeEvent<HTMLInputElement> | React.MouseEvent<HTMLButtonElement>) => void;
	    get isValid(): boolean;
	    onInputFocus: (e: React.FocusEvent<HTMLInputElement>) => void;
	    onInputBlur: (e: React.FocusEvent<HTMLInputElement>) => NodeJS.Timeout;
	    closePopover: () => void;
	    render(): JSX.Element;
	}

}
declare module '@elastic/eui/src/components/form/range/range_draggable' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	export interface EuiRangeDraggableProps extends Omit<HTMLAttributes<HTMLDivElement>, 'onChange'> {
	    min: number;
	    max: number;
	    value: number[];
	    disabled?: boolean;
	    compressed?: boolean;
	    showTicks?: boolean;
	    lowerPosition: string;
	    upperPosition: string;
	    onChange: (x: number, isFirstInteraction?: boolean) => void;
	}
	export const EuiRangeDraggable: FunctionComponent<EuiRangeDraggableProps>;

}
declare module '@elastic/eui/src/components/form/range/range_thumb' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common';
	interface BaseProps extends CommonProps {
	    min: number;
	    max: number;
	    value?: number | string;
	    disabled?: boolean;
	    showInput?: boolean;
	    showTicks?: boolean;
	}
	interface ButtonLike extends BaseProps, HTMLAttributes<HTMLButtonElement> {
	}
	interface DivLike extends BaseProps, Omit<HTMLAttributes<HTMLDivElement>, 'onClick' | 'onMouseDown'> {
	}
	export type EuiRangeThumbProps = ExclusiveUnion<ButtonLike, DivLike>;
	export const EuiRangeThumb: FunctionComponent<EuiRangeThumbProps>;
	export {};

}
declare module '@elastic/eui/src/components/form/range/dual_range' {
	
	import React, { Component } from 'react';
	import { EuiFormControlLayoutProps } from '@elastic/eui/src/components/form/form_control_layout';
	import { EuiRangeProps } from '@elastic/eui/src/components/form/range/range';
	import { EuiRangeInputProps } from '@elastic/eui/src/components/form/range/range_input';
	import { EuiRangeLevel } from '@elastic/eui/src/components/form/range/range_levels';
	import { EuiRangeSliderProps } from '@elastic/eui/src/components/form/range/range_slider';
	import { EuiRangeTick } from '@elastic/eui/src/components/form/range/range_ticks'; type ValueMember = number | string;
	export interface EuiDualRangeProps extends Omit<EuiRangeSliderProps, 'onChange' | 'onBlur' | 'onFocus' | 'value'> {
	    value: [ValueMember, ValueMember];
	    onBlur?: (event: React.FocusEvent<HTMLInputElement> | React.FocusEvent<HTMLDivElement>) => void;
	    onFocus?: (event: React.FocusEvent<HTMLInputElement> | React.FocusEvent<HTMLDivElement>) => void;
	    onChange: (values: [ValueMember, ValueMember], isValid: boolean, event?: React.ChangeEvent<HTMLInputElement> | React.MouseEvent<HTMLButtonElement> | React.KeyboardEvent<HTMLInputElement> | React.KeyboardEvent<HTMLDivElement>) => void;
	    fullWidth?: boolean;
	    isInvalid?: boolean;
	    /**
	     * Create colored indicators for certain intervals
	     */
	    levels?: EuiRangeLevel[];
	    /**
	     * Shows static min/max labels on the sides of the range slider
	     */
	    showLabels?: boolean;
	    /**
	     * Pass `true` to displays an extra input control for direct manipulation.
	     * Pass `'inputWithPopover'` to only show the input but show the range in a dropdown.
	     */
	    showInput?: EuiRangeProps['showInput'];
	    /**
	     * Modifies the number of tick marks and at what interval
	     */
	    tickInterval?: number;
	    /**
	     * Specified ticks at specified values
	     */
	    ticks?: EuiRangeTick[];
	    /**
	     * Creates an input group with element(s) coming before input.  Will only show if `showInput = inputWithPopover`.
	     * `string` | `ReactElement` or an array of these
	     */
	    prepend?: EuiFormControlLayoutProps['prepend'];
	    /**
	     * Creates an input group with element(s) coming after input. Will only show if `showInput = inputWithPopover`.
	     * `string` | `ReactElement` or an array of these
	     */
	    append?: EuiFormControlLayoutProps['append'];
	    /**
	     *  Intended to be uses with aria attributes. Some attributes may be overwritten.
	     */
	    minInputProps?: Partial<EuiRangeInputProps>;
	    /**
	     *  Intended to be uses with aria attributes. Some attributes may be overwritten.
	     */
	    maxInputProps?: Partial<EuiRangeInputProps>;
	    /**
	     *  Creates a draggble highlighted range area
	     */
	    isDraggable?: boolean;
	}
	export class EuiDualRange extends Component<EuiDualRangeProps> {
	    static defaultProps: {
	        min: number;
	        max: number;
	        step: number;
	        fullWidth: boolean;
	        compressed: boolean;
	        showLabels: boolean;
	        showInput: boolean;
	        showRange: boolean;
	        showTicks: boolean;
	        levels: never[];
	    };
	    state: {
	        id: string;
	        hasFocus: boolean;
	        rangeSliderRefAvailable: boolean;
	        isPopoverOpen: boolean;
	        rangeWidth: undefined;
	        isVisible: boolean;
	    };
	    preventPopoverClose: boolean;
	    rangeSliderRef: HTMLInputElement | null;
	    handleRangeSliderRefUpdate: (ref: HTMLInputElement | null) => void;
	    private leftPosition;
	    private dragAcc;
	    get lowerValue(): React.ReactText;
	    get upperValue(): React.ReactText;
	    get lowerValueIsValid(): boolean;
	    get upperValueIsValid(): boolean;
	    get isValid(): boolean;
	    componentDidMount(): void;
	    componentDidUpdate(): void;
	    _determineInvalidThumbMovement: (newVal: ValueMember, lower: ValueMember, upper: ValueMember, e: React.ChangeEvent<HTMLInputElement> | React.MouseEvent<HTMLButtonElement> | React.KeyboardEvent<HTMLInputElement>) => void;
	    _determineValidThumbMovement: (newVal: ValueMember, lower: ValueMember, upper: ValueMember, e: React.ChangeEvent<HTMLInputElement> | React.MouseEvent<HTMLButtonElement>) => void;
	    _determineThumbMovement: (newVal: number, e: React.ChangeEvent<HTMLInputElement> | React.MouseEvent<HTMLButtonElement>) => void;
	    _handleOnChange: (lower: ValueMember, upper: ValueMember, e?: React.KeyboardEvent<HTMLDivElement> | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent<HTMLInputElement> | React.MouseEvent<HTMLButtonElement, MouseEvent> | undefined) => void;
	    handleSliderChange: (e: React.ChangeEvent<HTMLInputElement> | React.MouseEvent<HTMLButtonElement>) => void;
	    _resetToRangeEnds: (e: React.KeyboardEvent<HTMLInputElement>) => void;
	    _isDirectionalKeyPress: (event: React.KeyboardEvent<HTMLInputElement>) => boolean;
	    handleInputKeyDown: (e: React.KeyboardEvent<HTMLInputElement>) => void;
	    handleLowerInputChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
	    handleUpperInputChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
	    _handleKeyDown: (value: ValueMember, event: React.KeyboardEvent<HTMLInputElement> | React.KeyboardEvent<HTMLDivElement>) => number;
	    handleLowerKeyDown: (event: React.KeyboardEvent<HTMLInputElement>) => void;
	    handleUpperKeyDown: (event: React.KeyboardEvent<HTMLInputElement>) => void;
	    handleDraggableKeyDown: (event: React.KeyboardEvent<HTMLDivElement>) => void;
	    calculateThumbPositionStyle: (value: number, width?: number | undefined) => {
	        left: string;
	    };
	    toggleHasFocus: (shouldFocused?: boolean) => void;
	    onThumbFocus: (e: React.FocusEvent<HTMLDivElement>) => void;
	    onThumbBlur: (e: React.FocusEvent<HTMLDivElement>) => void;
	    onInputFocus: (e: React.FocusEvent<HTMLInputElement>) => void;
	    onInputBlur: (e: React.FocusEvent<HTMLInputElement>) => NodeJS.Timeout;
	    closePopover: () => void;
	    onResize: (width?: number | undefined) => void;
	    getNearestStep: (value: number) => number;
	    handleDrag: (x: number, isFirstInteraction?: boolean | undefined) => void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/form/range' {
	export { EuiDualRange, EuiDualRangeProps } from '@elastic/eui/src/components/form/range/dual_range';
	export { EuiRange, EuiRangeProps } from '@elastic/eui/src/components/form/range/range';

}
declare module '@elastic/eui/src/components/form/select/select' {
	import React, { SelectHTMLAttributes, OptionHTMLAttributes, Ref, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiFormControlLayoutProps } from '@elastic/eui/src/components/form/form_control_layout';
	export interface EuiSelectOption extends OptionHTMLAttributes<HTMLOptionElement> {
	    text: React.ReactNode;
	}
	export type EuiSelectProps = Omit<SelectHTMLAttributes<HTMLSelectElement>, 'value'> & CommonProps & {
	    options?: EuiSelectOption[];
	    isInvalid?: boolean;
	    fullWidth?: boolean;
	    isLoading?: boolean;
	    /**
	     * Simulates no selection by creating an empty, selected, hidden first option
	     */
	    hasNoInitialSelection?: boolean;
	    inputRef?: Ref<HTMLSelectElement>;
	    value?: string | number;
	    /**
	     * when `true` creates a shorter height input
	     */
	    compressed?: boolean;
	    /**
	     * Creates an input group with element(s) coming before select.
	     * `string` | `ReactElement` or an array of these
	     */
	    prepend?: EuiFormControlLayoutProps['prepend'];
	    /**
	     * Creates an input group with element(s) coming after select.
	     * `string` | `ReactElement` or an array of these
	     */
	    append?: EuiFormControlLayoutProps['append'];
	};
	export const EuiSelect: FunctionComponent<EuiSelectProps>;

}
declare module '@elastic/eui/src/components/form/select' {
	export { EuiSelect, EuiSelectProps, EuiSelectOption } from '@elastic/eui/src/components/form/select/select';

}
declare module '@elastic/eui/src/components/form/super_select/super_select_control' {
	import { FunctionComponent, ButtonHTMLAttributes, ReactNode } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiFormControlLayoutProps } from '@elastic/eui/src/components/form/form_control_layout';
	export interface EuiSuperSelectOption<T> {
	    value: T;
	    inputDisplay?: ReactNode;
	    dropdownDisplay?: ReactNode;
	    disabled?: boolean;
	    'data-test-subj'?: string;
	}
	export interface EuiSuperSelectControlProps<T> extends CommonProps, Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'value'> {
	    compressed?: boolean;
	    fullWidth?: boolean;
	    isInvalid?: boolean;
	    isLoading?: boolean;
	    readOnly?: boolean;
	    name?: string;
	    value?: T;
	    options?: Array<EuiSuperSelectOption<T>>;
	    /**
	     * Creates an input group with element(s) coming before input.
	     * `string` | `ReactElement` or an array of these
	     */
	    prepend?: EuiFormControlLayoutProps['prepend'];
	    /**
	     * Creates an input group with element(s) coming after input.
	     * `string` | `ReactElement` or an array of these
	     */
	    append?: EuiFormControlLayoutProps['append'];
	    /**
	     * Creates a semantic label ID for the `div[role="listbox"]` that's opened on click or keypress.
	     * __Generated and passed down by `EuiSuperSelect`.__
	     */
	    screenReaderId?: string;
	}
	export const EuiSuperSelectControl: <T extends string>(props: EuiSuperSelectControlProps<T>) => ReturnType<FunctionComponent<EuiSuperSelectControlProps<T>>>;

}
declare module '@elastic/eui/src/components/tool_tip/tool_tip_popover' {
	import { HTMLAttributes, Component, ReactNode } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; type Props = CommonProps & Omit<HTMLAttributes<HTMLDivElement>, 'title'> & {
	    positionToolTip: () => void;
	    children?: ReactNode;
	    title?: ReactNode;
	    popoverRef?: (ref: HTMLDivElement) => void;
	};
	export class EuiToolTipPopover extends Component<Props> {
	    private popover;
	    updateDimensions: () => void;
	    setPopoverRef: (ref: HTMLDivElement) => void;
	    componentDidMount(): void;
	    componentWillUnmount(): void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/tool_tip/tool_tip' {
	import { Component, ReactElement, ReactNode, MouseEvent as ReactMouseEvent } from 'react';
	export type ToolTipPositions = 'top' | 'right' | 'bottom' | 'left';
	export const POSITIONS: import ("@elastic/eui/src/services/popover").EuiPopoverPosition[];
	export type ToolTipDelay = 'regular' | 'long';
	interface ToolTipStyles {
	    top: number;
	    left: number | 'auto';
	    right?: number | 'auto';
	    opacity?: number;
	    visibility?: 'hidden';
	} const displayToClassNameMap: {
	    inlineBlock: undefined;
	    block: string;
	};
	export interface EuiToolTipProps {
	    /**
	     * Passes onto the the trigger.
	     */
	    anchorClassName?: string;
	    /**
	     * The in-view trigger for your tooltip.
	     */
	    children: ReactElement;
	    /**
	     * Passes onto the tooltip itself, not the trigger.
	     */
	    className?: string;
	    /**
	     * The main content of your tooltip.
	     */
	    content?: ReactNode;
	    /**
	     * Common display alternatives for the anchor wrapper
	     */
	    display?: keyof typeof displayToClassNameMap;
	    /**
	     * Delay before showing tooltip. Good for repeatable items.
	     */
	    delay: ToolTipDelay;
	    /**
	     * An optional title for your tooltip.
	     */
	    title?: ReactNode;
	    /**
	     * Unless you provide one, this will be randomly generated.
	     */
	    id?: string;
	    /**
	     * Suggested position. If there is not enough room for it this will be changed.
	     */
	    position: ToolTipPositions;
	    /**
	     * If supplied, called when mouse movement causes the tool tip to be
	     * hidden.
	     */
	    onMouseOut?: (event: ReactMouseEvent<HTMLSpanElement, MouseEvent>) => void;
	}
	interface State {
	    visible: boolean;
	    hasFocus: boolean;
	    calculatedPosition: ToolTipPositions;
	    toolTipStyles: ToolTipStyles;
	    arrowStyles: undefined | {
	        left: number;
	        top: number;
	    };
	    id: string;
	}
	export class EuiToolTip extends Component<EuiToolTipProps, State> {
	    _isMounted: boolean;
	    anchor: null | HTMLElement;
	    popover: null | HTMLElement;
	    private timeoutId?;
	    state: State;
	    static defaultProps: Partial<EuiToolTipProps>;
	    clearAnimationTimeout: () => void;
	    componentDidMount(): void;
	    componentWillUnmount(): void;
	    componentDidUpdate(prevProps: EuiToolTipProps, prevState: State): void;
	    testAnchor: () => void;
	    setPopoverRef: (ref: HTMLElement) => void;
	    showToolTip: () => void;
	    positionToolTip: () => void;
	    hideToolTip: () => void;
	    onFocus: () => void;
	    onBlur: () => void;
	    onMouseOut: (event: ReactMouseEvent<HTMLSpanElement, MouseEvent>) => void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/tool_tip/icon_tip' {
	import { FunctionComponent } from 'react';
	import { PropsOf } from '@elastic/eui/src/components/common';
	import { EuiIcon, IconSize, IconType } from '@elastic/eui/src/components/icon';
	import { EuiToolTipProps } from '@elastic/eui/src/components/tool_tip/tool_tip';
	export interface EuiIconTipProps {
	    /**
	     * Children are not allowed as they are built using the icon props
	     */
	    children?: never;
	    /**
	     * The icon color.
	     */
	    color?: string;
	    /**
	     * The icon type.
	     */
	    type?: IconType;
	    /**
	     * The icon size.
	     */
	    size?: IconSize;
	    /**
	     * Explain what this icon means for screen readers.
	     */
	    'aria-label'?: string;
	    /**
	     * Pass certain props down to `EuiIcon`
	     */
	    iconProps?: Omit<PropsOf<EuiIcon>, 'type'> & {
	        type?: never;
	    };
	} type Props = Omit<EuiToolTipProps, 'children' | 'delay' | 'position'> & EuiIconTipProps & {
	    delay?: EuiToolTipProps['delay'];
	    position?: EuiToolTipProps['position'];
	};
	export const EuiIconTip: FunctionComponent<Props>;
	export {};

}
declare module '@elastic/eui/src/components/tool_tip' {
	export { EuiToolTip, ToolTipPositions, EuiToolTipProps } from '@elastic/eui/src/components/tool_tip/tool_tip';
	export { EuiIconTip, EuiIconTipProps } from '@elastic/eui/src/components/tool_tip/icon_tip';

}
declare module '@elastic/eui/src/components/context_menu/context_menu_item' {
	import React, { ButtonHTMLAttributes, Component, ReactElement, ReactNode, Ref } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { ToolTipPositions } from '@elastic/eui/src/components/tool_tip';
	export type EuiContextMenuItemIcon = ReactElement<any> | string | HTMLElement;
	export type EuiContextMenuItemLayoutAlignment = 'center' | 'top' | 'bottom'; const sizeToClassNameMap: {
	    s: string;
	    m: null;
	};
	export const SIZES: ("s" | "m")[];
	export interface EuiContextMenuItemProps extends CommonProps {
	    icon?: EuiContextMenuItemIcon;
	    hasPanel?: boolean;
	    disabled?: boolean;
	    onClick?: (event: React.MouseEvent) => void;
	    buttonRef?: Ref<HTMLButtonElement>;
	    /**
	     * Required if using a tooltip. Add an optional tooltip on hover
	     */
	    toolTipContent?: ReactNode;
	    /**
	     * Optional title for the tooltip
	     */
	    toolTipTitle?: ReactNode;
	    /**
	     * Dictates the position of the tooltip.
	     */
	    toolTipPosition?: ToolTipPositions;
	    href?: string;
	    target?: string;
	    rel?: string;
	    /**
	     * How to align icon with content of button
	     */
	    layoutAlign?: EuiContextMenuItemLayoutAlignment;
	    /**
	     * Reduce the size to `s` when in need of a more compressed menu
	     */
	    size?: keyof typeof sizeToClassNameMap;
	} type Props = CommonProps & Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'type' | 'onClick' | 'disabled'> & EuiContextMenuItemProps;
	export const LAYOUT_ALIGN: EuiContextMenuItemLayoutAlignment[];
	export class EuiContextMenuItem extends Component<Props> {
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/context_menu/context_menu_panel' {
	import React, { Component, HTMLAttributes, ReactElement, ReactNode } from 'react';
	import { CommonProps, NoArgCallback } from '@elastic/eui/src/components/common';
	export type EuiContextMenuPanelHeightChangeHandler = (height: number) => void;
	export type EuiContextMenuPanelTransitionType = 'in' | 'out';
	export type EuiContextMenuPanelTransitionDirection = 'next' | 'previous';
	export type EuiContextMenuPanelShowPanelCallback = (currentPanelIndex?: number) => void;
	export const SIZES: ("s" | "m")[];
	export interface EuiContextMenuPanelProps {
	    hasFocus?: boolean;
	    initialFocusedItemIndex?: number;
	    items?: ReactElement[];
	    onClose?: NoArgCallback<void>;
	    onHeightChange?: EuiContextMenuPanelHeightChangeHandler;
	    onTransitionComplete?: NoArgCallback<void>;
	    onUseKeyboardToNavigate?: NoArgCallback<void>;
	    showNextPanel?: EuiContextMenuPanelShowPanelCallback;
	    showPreviousPanel?: NoArgCallback<void>;
	    title?: ReactNode;
	    transitionDirection?: EuiContextMenuPanelTransitionDirection;
	    transitionType?: EuiContextMenuPanelTransitionType;
	    watchedItemProps?: string[];
	    /**
	     * Alters the size of the items and the title
	     */
	    size?: typeof SIZES[number];
	} type Props = CommonProps & Omit<HTMLAttributes<HTMLDivElement>, 'onKeyDown' | 'tabIndex' | 'onAnimationEnd' | 'title'> & EuiContextMenuPanelProps;
	interface State {
	    prevProps: {
	        items: Props['items'];
	    };
	    menuItems: HTMLElement[];
	    focusedItemIndex?: number;
	    currentHeight?: number;
	    height?: number;
	}
	export class EuiContextMenuPanel extends Component<Props, State> {
	    static defaultProps: Partial<Props>;
	    private _isMounted;
	    private backButton?;
	    private content?;
	    private panel?;
	    constructor(props: Props);
	    incrementFocusedItemIndex: (amount: number) => void;
	    onKeyDown: (event: React.KeyboardEvent<HTMLDivElement>) => void;
	    updateFocus(): void;
	    onTransitionComplete: () => void;
	    componentDidMount(): void;
	    componentWillUnmount(): void;
	    static getDerivedStateFromProps(nextProps: Props, prevState: State): Partial<State> | null;
	    getWatchedPropsForItems(items: ReactElement[]): string | null;
	    didItemsChange(prevItems: ReactElement[], nextItems: ReactElement[]): true | undefined;
	    shouldComponentUpdate(nextProps: Props, nextState: State): boolean;
	    updateHeight(): void;
	    componentDidUpdate(): void;
	    menuItemRef: (index: number, node: HTMLElement | null) => void;
	    panelRef: (node: HTMLElement | null) => void;
	    contentRef: (node: HTMLElement | null) => void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/horizontal_rule/horizontal_rule' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiHorizontalRuleSize = keyof typeof sizeToClassNameMap;
	export type EuiHorizontalRuleMargin = keyof typeof marginToClassNameMap;
	export interface EuiHorizontalRuleProps extends CommonProps, HTMLAttributes<HTMLHRElement> {
	    /**
	     * Defines the width of the HR.
	     */
	    size?: EuiHorizontalRuleSize;
	    margin?: EuiHorizontalRuleMargin;
	} const sizeToClassNameMap: {
	    full: string;
	    half: string;
	    quarter: string;
	};
	export const SIZES: string[]; const marginToClassNameMap: {
	    none: null;
	    xs: string;
	    s: string;
	    m: string;
	    l: string;
	    xl: string;
	    xxl: string;
	};
	export const MARGINS: string[];
	export const EuiHorizontalRule: FunctionComponent<EuiHorizontalRuleProps>;
	export {};

}
declare module '@elastic/eui/src/components/horizontal_rule' {
	export { EuiHorizontalRule, EuiHorizontalRuleProps } from '@elastic/eui/src/components/horizontal_rule/horizontal_rule';

}
declare module '@elastic/eui/src/components/context_menu/context_menu' {
	import React, { Component, HTMLAttributes, ReactElement, ReactNode } from 'react';
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common';
	import { EuiContextMenuPanelTransitionDirection, EuiContextMenuPanelTransitionType } from '@elastic/eui/src/components/context_menu/context_menu_panel';
	import { EuiContextMenuItemProps } from '@elastic/eui/src/components/context_menu/context_menu_item';
	import { EuiHorizontalRuleProps } from '@elastic/eui/src/components/horizontal_rule';
	export type EuiContextMenuPanelId = string | number;
	export type EuiContextMenuPanelItemDescriptorEntry = Omit<EuiContextMenuItemProps, 'hasPanel'> & {
	    name: React.ReactNode;
	    key?: string;
	    panel?: EuiContextMenuPanelId;
	};
	export interface EuiContextMenuPanelItemSeparator extends EuiHorizontalRuleProps {
	    isSeparator: true;
	    key?: string;
	}
	export type EuiContextMenuPanelItemDescriptor = ExclusiveUnion<EuiContextMenuPanelItemDescriptorEntry, EuiContextMenuPanelItemSeparator>;
	export interface EuiContextMenuPanelDescriptor {
	    id: EuiContextMenuPanelId;
	    title?: ReactNode;
	    items?: EuiContextMenuPanelItemDescriptor[];
	    content?: ReactNode;
	    width?: number;
	    initialFocusedItemIndex?: number;
	    /**
	     * Alters the size of the items and the title
	     */
	    size?: keyof typeof sizeToClassNameMap;
	} const sizeToClassNameMap: {
	    s: string;
	    m: null;
	};
	export const SIZES: ("s" | "m")[];
	export type EuiContextMenuProps = CommonProps & Omit<HTMLAttributes<HTMLDivElement>, 'style'> & {
	    panels?: EuiContextMenuPanelDescriptor[];
	    initialPanelId?: EuiContextMenuPanelId;
	    /**
	     * Alters the size of the items and the title
	     */
	    size?: keyof typeof sizeToClassNameMap;
	};
	interface State {
	    prevProps: {
	        panels?: EuiContextMenuPanelDescriptor[];
	    };
	    idToPanelMap: {
	        [id: string]: EuiContextMenuPanelDescriptor;
	    };
	    idToPreviousPanelIdMap: {
	        [panel: string]: EuiContextMenuPanelId;
	    };
	    idAndItemIndexToPanelIdMap: {
	        [id: string]: {
	            [index: string]: EuiContextMenuPanelId;
	        };
	    };
	    idToRenderedItemsMap: {
	        [id: string]: ReactElement[];
	    };
	    height?: number;
	    outgoingPanelId?: EuiContextMenuPanelId;
	    incomingPanelId?: EuiContextMenuPanelId;
	    transitionDirection?: EuiContextMenuPanelTransitionDirection;
	    isOutgoingPanelVisible: boolean;
	    focusedItemIndex?: number;
	    isUsingKeyboardToNavigate: boolean;
	}
	export class EuiContextMenu extends Component<EuiContextMenuProps, State> {
	    static defaultProps: Partial<EuiContextMenuProps>;
	    static getDerivedStateFromProps(nextProps: EuiContextMenuProps, prevState: State): Partial<State> | null;
	    constructor(props: EuiContextMenuProps);
	    componentDidUpdate(prevProps: EuiContextMenuProps): void;
	    hasPreviousPanel: (panelId: EuiContextMenuPanelId) => boolean;
	    showPanel(panelId: EuiContextMenuPanelId, direction?: EuiContextMenuPanelTransitionDirection): void;
	    showNextPanel: (itemIndex?: number | undefined) => void;
	    showPreviousPanel: () => void;
	    onIncomingPanelHeightChange: (height: number) => void;
	    onOutGoingPanelTransitionComplete: () => void;
	    onUseKeyboardToNavigate: () => void;
	    mapIdsToRenderedItems: (panels?: EuiContextMenuPanelDescriptor[]) => {
	        [id: string]: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>[];
	    };
	    renderItems(items?: EuiContextMenuPanelItemDescriptor[]): JSX.Element[];
	    renderPanel(panelId: EuiContextMenuPanelId, transitionType: EuiContextMenuPanelTransitionType): JSX.Element | undefined;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/context_menu' {
	export { EuiContextMenu, EuiContextMenuProps, EuiContextMenuPanelDescriptor, EuiContextMenuPanelItemDescriptor, } from '@elastic/eui/src/components/context_menu/context_menu';
	export { EuiContextMenuPanel, EuiContextMenuPanelProps, } from '@elastic/eui/src/components/context_menu/context_menu_panel';
	export { EuiContextMenuItem, EuiContextMenuItemProps, EuiContextMenuItemIcon, EuiContextMenuItemLayoutAlignment, } from '@elastic/eui/src/components/context_menu/context_menu_item';

}
declare module '@elastic/eui/src/components/form/super_select/super_select' {
	import React, { Component, FocusEvent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiSuperSelectControlProps, EuiSuperSelectOption } from '@elastic/eui/src/components/form/super_select/super_select_control';
	import { EuiPopoverProps } from '@elastic/eui/src/components/popover';
	import { EuiContextMenuItemLayoutAlignment } from '@elastic/eui/src/components/context_menu'; enum ShiftDirection {
	    BACK = "back",
	    FORWARD = "forward"
	}
	export type EuiSuperSelectProps<T extends string> = CommonProps & Omit<EuiSuperSelectControlProps<T>, 'onChange' | 'onClick' | 'onFocus' | 'onBlur' | 'options' | 'value'> & {
	    /**
	     * Pass an array of options that must at least include:
	     * `value`: storing unique value of item,
	     * `inputDisplay`: what shows inside the form input when selected
	     * `dropdownDisplay` (optional): what shows for the item in the dropdown
	     */
	    options: Array<EuiSuperSelectOption<T>>;
	    valueOfSelected?: T;
	    /**
	     * Classes for the context menu item
	     */
	    itemClassName?: string;
	    /**
	     * You must pass an `onChange` function to handle the update of the value
	     */
	    onChange?: (value: T) => void;
	    onFocus?: (event?: FocusEvent) => void;
	    onBlur?: (event?: FocusEvent) => void;
	    /**
	     * Change to `true` if you want horizontal lines between options.
	     * This is best used when options are multi-line.
	     */
	    hasDividers?: boolean;
	    /**
	     * Change `EuiContextMenuItem` layout position of icon
	     */
	    itemLayoutAlign?: EuiContextMenuItemLayoutAlignment;
	    /**
	     * Controls whether the options are shown. Default: false
	     */
	    isOpen?: boolean;
	    /**
	     * Optional props to pass to the underlying [EuiPopover](/#/layout/popover).
	     * Allows fine-grained control of the popover dropdown menu, including
	     * `repositionOnScroll` for EuiSuperSelects used within scrollable containers,
	     * and customizing popover panel styling.
	     *
	     * Does not accept a nested `popoverProps.isOpen` property - use the top level
	     * `isOpen` API instead.
	     */
	    popoverProps?: Partial<CommonProps & Omit<EuiPopoverProps, 'isOpen'>>;
	};
	export class EuiSuperSelect<T extends string> extends Component<EuiSuperSelectProps<T>> {
	    static defaultProps: {
	        hasDividers: boolean;
	        fullWidth: boolean;
	        compressed: boolean;
	        isInvalid: boolean;
	        isLoading: boolean;
	    };
	    private itemNodes;
	    private _isMounted;
	    describedById: string;
	    labelledById: string;
	    state: {
	        isPopoverOpen: boolean;
	    };
	    componentDidMount(): void;
	    componentWillUnmount(): void;
	    setItemNode: (node: HTMLButtonElement | null, index: number) => void;
	    openPopover: () => void;
	    closePopover: () => void;
	    itemClicked: (value: T) => void;
	    onSelectKeyDown: (event: React.KeyboardEvent<HTMLButtonElement>) => void;
	    onItemKeyDown: (event: React.KeyboardEvent<HTMLButtonElement>) => void;
	    focusItemAt(index: number): void;
	    shiftFocus(direction: ShiftDirection): void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/form/super_select' {
	export { EuiSuperSelect, EuiSuperSelectProps } from '@elastic/eui/src/components/form/super_select/super_select';
	export { EuiSuperSelectControl, EuiSuperSelectControlProps, EuiSuperSelectOption, } from '@elastic/eui/src/components/form/super_select/super_select_control';

}
declare module '@elastic/eui/src/components/form/switch/switch' {
	import React, { ButtonHTMLAttributes, HTMLAttributes, FunctionComponent, ReactNode } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiSwitchEvent = React.BaseSyntheticEvent<React.MouseEvent<HTMLButtonElement>, HTMLButtonElement, EventTarget & {
	    checked: boolean;
	}>;
	export type EuiSwitchProps = CommonProps & Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'onChange' | 'type' | 'disabled'> & {
	    /**
	     * Whether to render the render the text label
	     */
	    showLabel?: boolean;
	    /**
	     * Must be a string if `showLabel` prop is false
	     */
	    label: ReactNode | string;
	    checked: boolean;
	    onChange: (event: EuiSwitchEvent) => void;
	    disabled?: boolean;
	    compressed?: boolean;
	    type?: 'submit' | 'reset' | 'button';
	    /**
	     * Object of props passed to the label's <span/>
	     */
	    labelProps?: CommonProps & HTMLAttributes<HTMLSpanElement>;
	};
	export const EuiSwitch: FunctionComponent<EuiSwitchProps>;

}
declare module '@elastic/eui/src/components/form/switch' {
	export { EuiSwitch, EuiSwitchProps, EuiSwitchEvent } from '@elastic/eui/src/components/form/switch/switch';

}
declare module '@elastic/eui/src/components/form/text_area/text_area' {
	import { TextareaHTMLAttributes, Ref, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiTextAreaProps = TextareaHTMLAttributes<HTMLTextAreaElement> & CommonProps & {
	    isInvalid?: boolean;
	    fullWidth?: boolean;
	    compressed?: boolean;
	    /**
	     * Which direction, if at all, should the textarea resize
	     */
	    resize?: keyof typeof resizeToClassNameMap;
	    inputRef?: Ref<HTMLTextAreaElement>;
	}; const resizeToClassNameMap: {
	    vertical: string;
	    horizontal: string;
	    both: string;
	    none: string;
	};
	export const RESIZE: string[];
	export const EuiTextArea: FunctionComponent<EuiTextAreaProps>;
	export {};

}
declare module '@elastic/eui/src/components/form/text_area' {
	export { EuiTextArea, EuiTextAreaProps } from '@elastic/eui/src/components/form/text_area/text_area';

}
declare module '@elastic/eui/src/components/form' {
	export * from '@elastic/eui/src/components/form/checkbox';
	export * from '@elastic/eui/src/components/form/described_form_group';
	export * from '@elastic/eui/src/components/form/field_number';
	export * from '@elastic/eui/src/components/form/field_password';
	export * from '@elastic/eui/src/components/form/field_search';
	export * from '@elastic/eui/src/components/form/field_text';
	export * from '@elastic/eui/src/components/form/file_picker';
	export * from '@elastic/eui/src/components/form/form';
	export * from '@elastic/eui/src/components/form/form_control_layout';
	export * from '@elastic/eui/src/components/form/form_error_text';
	export * from '@elastic/eui/src/components/form/form_fieldset';
	export * from '@elastic/eui/src/components/form/form_help_text';
	export * from '@elastic/eui/src/components/form/form_label';
	export * from '@elastic/eui/src/components/form/form_row';
	export * from '@elastic/eui/src/components/form/radio';
	export * from '@elastic/eui/src/components/form/range';
	export * from '@elastic/eui/src/components/form/select';
	export * from '@elastic/eui/src/components/form/super_select';
	export * from '@elastic/eui/src/components/form/switch';
	export * from '@elastic/eui/src/components/form/text_area';
	export * from '@elastic/eui/src/components/form/validatable_control';

}
declare module '@elastic/eui/src/components/spacer/spacer' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; const sizeToClassNameMap: {
	    xs: string;
	    s: string;
	    m: string;
	    l: string;
	    xl: string;
	    xxl: string;
	};
	export const SIZES: string[];
	export type SpacerSize = keyof typeof sizeToClassNameMap;
	export type EuiSpacerProps = HTMLAttributes<HTMLDivElement> & CommonProps & {
	    size?: SpacerSize;
	};
	export const EuiSpacer: FunctionComponent<EuiSpacerProps>;
	export {};

}
declare module '@elastic/eui/src/components/spacer' {
	export { EuiSpacer, EuiSpacerProps } from '@elastic/eui/src/components/spacer/spacer';

}
declare module '@elastic/eui/src/components/color_picker/color_picker_swatch' {
	import React, { ButtonHTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiColorPickerSwatchProps = CommonProps & Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'color'> & {
	    color?: string;
	};
	export const EuiColorPickerSwatch: React.ForwardRefExoticComponent<CommonProps & Pick<React.ButtonHTMLAttributes<HTMLButtonElement>, "children" | "form" | "slot" | "style" | "title" | "prefix" | "className" | "id" | "lang" | "name" | "type" | "role" | "tabIndex" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "placeholder" | "spellCheck" | "translate" | "radioGroup" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "autoFocus" | "disabled" | "formAction" | "formEncType" | "formMethod" | "formNoValidate" | "formTarget" | "value"> & {
	    color?: string | undefined;
	} & React.RefAttributes<HTMLButtonElement>>;

}
declare module '@elastic/eui/src/components/color_picker/hue' {
	import { InputHTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiHueProps = Omit<InputHTMLAttributes<HTMLInputElement>, 'onChange'> & CommonProps & {
	    hex?: string;
	    hue?: string | number;
	    onChange: (hue: number) => void;
	};
	export const EuiHue: FunctionComponent<EuiHueProps>;

}
declare module '@elastic/eui/src/components/color_picker/saturation' {
	import React, { HTMLAttributes } from 'react';
	import { ColorSpaces } from 'chroma-js';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type SaturationClientRect = Pick<ClientRect, 'left' | 'top' | 'width' | 'height'>;
	export type SaturationPosition = Pick<SaturationClientRect, 'left' | 'top'>;
	interface HTMLDivElementOverrides {
	    color?: ColorSpaces['hsv'];
	    onChange: (color: ColorSpaces['hsv']) => void;
	}
	export type EuiSaturationProps = Omit<HTMLAttributes<HTMLDivElement>, keyof HTMLDivElementOverrides> & CommonProps & HTMLDivElementOverrides & {
	    hex?: string;
	};
	export const EuiSaturation: React.ForwardRefExoticComponent<Pick<React.HTMLAttributes<HTMLDivElement>, "children" | "slot" | "style" | "title" | "prefix" | "className" | "id" | "lang" | "role" | "tabIndex" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "placeholder" | "spellCheck" | "translate" | "radioGroup" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is"> & CommonProps & HTMLDivElementOverrides & {
	    hex?: string | undefined;
	} & React.RefAttributes<HTMLDivElement>>;
	export {};

}
declare module '@elastic/eui/src/components/color_picker/color_picker' {
	import { FunctionComponent, HTMLAttributes, ReactElement } from 'react';
	import { ColorSpaces } from 'chroma-js';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiFormControlLayoutProps } from '@elastic/eui/src/components/form'; type EuiColorPickerDisplay = 'default' | 'inline'; type EuiColorPickerMode = 'default' | 'swatch' | 'picker' | 'secondaryInput';
	export interface EuiColorPickerOutput {
	    rgba: ColorSpaces['rgba'];
	    hex: string;
	    isValid: boolean;
	}
	interface HTMLDivElementOverrides {
	    /**
	     * hex (string)
	     * RGB (as comma separated string)
	     * RGBa (as comma separated string)
	     * Empty string will register as 'transparent'
	     */
	    color?: string | null;
	    onBlur?: () => void;
	    /**
	     * text (string, as entered or selected)
	     * hex (8-digit hex if alpha < 1, otherwise 6-digit hex)
	     * RGBa (as array; values of NaN if color is invalid)
	     * isValid (boolean signifying if the input text is a valid color)
	     */
	    onChange: (text: string, output: EuiColorPickerOutput) => void;
	    onFocus?: () => void;
	}
	export interface EuiColorPickerProps extends CommonProps, Omit<HTMLAttributes<HTMLDivElement>, keyof HTMLDivElementOverrides>, HTMLDivElementOverrides {
	    /**
	     *  Custom element to use instead of text input
	     */
	    button?: ReactElement;
	    /**
	     *  Use the compressed style for EuiFieldText
	     */
	    compressed?: boolean;
	    display?: EuiColorPickerDisplay;
	    disabled?: boolean;
	    fullWidth?: boolean;
	    id?: string;
	    /**
	     *  Custom validation flag
	     */
	    isInvalid?: boolean;
	    /**
	     * Choose between swatches with gradient picker (default), swatches only, gradient picker only, or secondary input only.
	     */
	    mode?: EuiColorPickerMode;
	    /**
	     *  Custom z-index for the popover
	     */
	    popoverZIndex?: number;
	    readOnly?: boolean;
	    /**
	     *  Array of hex strings (3 or 6 character) to use as swatch options. Defaults to EUI visualization colors
	     */
	    swatches?: string[];
	    /**
	     * Creates an input group with element(s) coming before input. It only shows when the `display` is set to `default`.
	     * `string` | `ReactElement` or an array of these
	     */
	    prepend?: EuiFormControlLayoutProps['prepend'];
	    /**
	     * Creates an input group with element(s) coming after input. It only shows when the `display` is set to `default`.
	     * `string` | `ReactElement` or an array of these
	     */
	    append?: EuiFormControlLayoutProps['append'];
	    /**
	     * Whether to render the alpha channel (opacity) value range slider.
	     */
	    showAlpha?: boolean;
	    /**
	     * Will format the text input in the provided format when possible (hue and saturation selection)
	     * Exceptions: Manual text input and swatches will display as-authored
	     * Default is to display the last format entered by the user
	     */
	    format?: 'hex' | 'rgba';
	    /**
	     * Placement option for a secondary color value input.
	     */
	    secondaryInputDisplay?: 'top' | 'bottom' | 'none';
	    /**
	     * Add a button to the primary input to clear its value.
	     */
	    isClearable?: boolean;
	    /**
	     * Text to replace the default 'Transparent' placeholder for unset color values.
	     */
	    placeholder?: string;
	}
	export const EuiColorPicker: FunctionComponent<EuiColorPickerProps>;
	export {};

}
declare module '@elastic/eui/src/components/color_picker/color_stops/color_stop_thumb' {
	import { FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiColorPickerProps } from '@elastic/eui/src/components/color_picker/color_picker';
	import { EuiFieldNumberProps } from '@elastic/eui/src/components/form';
	export interface ColorStop {
	    stop: number;
	    color: string;
	}
	interface EuiColorStopThumbProps extends CommonProps, ColorStop {
	    className?: string;
	    onChange: (colorStop: ColorStop) => void;
	    onFocus?: () => void;
	    onRemove?: () => void;
	    globalMin: number;
	    globalMax: number;
	    localMin: number;
	    localMax: number;
	    min?: number;
	    max?: number;
	    isRangeMin?: boolean;
	    isRangeMax?: boolean;
	    parentRef?: HTMLDivElement | null;
	    colorPickerMode: EuiColorPickerProps['mode'];
	    colorPickerShowAlpha?: EuiColorPickerProps['showAlpha'];
	    colorPickerSwatches?: EuiColorPickerProps['swatches'];
	    disabled?: boolean;
	    readOnly?: boolean;
	    isPopoverOpen: boolean;
	    openPopover: () => void;
	    closePopover: () => void;
	    'data-index'?: string;
	    'aria-valuetext'?: string;
	    valueInputProps?: Partial<EuiFieldNumberProps>;
	}
	export const EuiColorStopThumb: FunctionComponent<EuiColorStopThumbProps>;
	export {};

}
declare module '@elastic/eui/src/components/color_picker/color_stops/color_stops' {
	import { FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { ColorStop } from '@elastic/eui/src/components/color_picker/color_stops/color_stop_thumb';
	import { EuiColorPickerProps } from '@elastic/eui/src/components/color_picker/color_picker';
	import { EuiFieldNumberProps } from '@elastic/eui/src/components/form/field_number';
	export interface EuiColorStopsProps extends CommonProps {
	    addColor?: ColorStop['color'];
	    /**
	     * An array of #ColorStop. The stops must be numbers in an ordered range.
	     */
	    colorStops: ColorStop[];
	    onChange: (stops?: ColorStop[], isInvalid?: boolean) => void;
	    fullWidth?: boolean;
	    disabled?: boolean;
	    readOnly?: boolean;
	    invalid?: boolean;
	    compressed?: boolean;
	    className?: string;
	    max?: number;
	    min?: number;
	    label: string;
	    /**
	     *  Specify the type of stops:
	     *  `fixed`: individual color blocks.
	     *  `gradient`: each color fades into the next.
	     *  `stepped`: interpolation between colors with a fixed number of steps.
	     */
	    stopType?: 'fixed' | 'gradient' | 'stepped';
	    /**
	     * Only works when `stopType="stepped"`
	     */
	    stepNumber?: number;
	    mode?: EuiColorPickerProps['mode'];
	    swatches?: EuiColorPickerProps['swatches'];
	    showAlpha?: EuiColorPickerProps['showAlpha'];
	    /**
	     * Props passed to the value input field in the color stop popover.
	     * Can be used to configure functionality like append or prepend.
	     */
	    valueInputProps?: Partial<Omit<EuiFieldNumberProps, 'inputRef' | 'compressed' | 'readOnly' | 'min' | 'max' | 'value' | 'isInvalid' | 'onChange'>>;
	}
	export const EuiColorStops: FunctionComponent<EuiColorStopsProps>;

}
declare module '@elastic/eui/src/components/color_picker/color_stops' {
	export { EuiColorStops } from '@elastic/eui/src/components/color_picker/color_stops/color_stops';
	export { ColorStop } from '@elastic/eui/src/components/color_picker/color_stops/color_stop_thumb';

}
declare module '@elastic/eui/src/services/color/stepped_gradient' {
	import { ColorStop } from '@elastic/eui/src/components/color_picker/color_stops';
	export const getSteppedGradient: (colors: ColorStop[], steps: number) => string[];

}
declare module '@elastic/eui/src/services/color/manipulation' {
	/**
	 * Makes a color more transparent.
	 * @param color - Color to manipulate
	 * @param alpha - alpha channel value. From 0-1.
	 */
	export const transparentize: (color: string, alpha: number) => string;
	/**
	 * Mixes a provided color with white.
	 * @param color - Color to mix with white
	 * @param ratio - Mix weight. From 0-1. Larger value indicates more white.
	 */
	export const tint: (color: string, ratio: number) => string;
	/**
	 * Mixes a provided color with black.
	 * @param color - Color to mix with black
	 * @param ratio - Mix weight. From 0-1. Larger value indicates more black.
	 */
	export const shade: (color: string, ratio: number) => string;
	/**
	 * Increases the saturation of a color by manipulating the hsl saturation.
	 * @param color - Color to manipulate
	 * @param amount - Amount to change in absolute terms. 0-1.
	 */
	export const saturate: (color: string, amount: number) => string;
	/**
	 * Decreases the saturation of a color by manipulating the hsl saturation.
	 * @param color - Color to manipulate
	 * @param amount - Amount to change in absolute terms. 0-1.
	 */
	export const desaturate: (color: string, amount: number) => string;
	/**
	 * Returns the lightness value of a color. 0-100
	 * @param color
	 */
	export const lightness: (color: string) => number;

}
declare module '@elastic/eui/src/global_styling/variables/_animations' {
	import { CSSProperties } from 'react';
	export interface _EuiThemeAnimationSpeed {
	    extraFast: CSSProperties['animationDuration'];
	    fast: CSSProperties['animationDuration'];
	    normal: CSSProperties['animationDuration'];
	    slow: CSSProperties['animationDuration'];
	    extraSlow: CSSProperties['animationDuration'];
	}
	export interface _EuiThemeAnimationEasing {
	    bounce: CSSProperties['animationTimingFunction'];
	    resistance: CSSProperties['animationTimingFunction'];
	}
	export type EuiThemeAnimation = _EuiThemeAnimationEasing & _EuiThemeAnimationSpeed;
	export const animation_speed: _EuiThemeAnimationSpeed;
	export const animation_ease: _EuiThemeAnimationEasing;
	export const animation: EuiThemeAnimation;

}
declare module '@elastic/eui/src/global_styling/variables/_breakpoint' {
	export type _EuiBreakpointSize = 'xs' | 's' | 'm' | 'l' | 'xl';
	export type EuiThemeBreakpoint = {
	    [key in _EuiBreakpointSize]: number;
	};
	export const breakpoint: EuiThemeBreakpoint;

}
declare module '@elastic/eui/src/services/theme/size' {
	/**
	 * Calculates the `px` value based on a scale multiplier
	 * @param scale - The font scale multiplier
	 * *
	 * @param themeOrBase - Theme base value
	 * *
	 * @returns string - Rem unit aligned to baseline
	 */
	export const sizeToPixel: (scale?: number) => (themeOrBase: number | {
	    [key: string]: any;
	    base: number;
	}) => string;

}
declare module '@elastic/eui/src/global_styling/variables/_borders' {
	import { CSSProperties } from 'react';
	import { ColorModeSwitch } from '@elastic/eui/src/services/theme/types';
	export interface _EuiThemeBorderWidthValues {
	    /**
	     * Thinnest width for border
	     */
	    thin: CSSProperties['borderWidth'];
	    /**
	     * Thickest width for border
	     */
	    thick: CSSProperties['borderWidth'];
	}
	export interface _EuiThemeBorderRadiusValues {
	    /**
	     * Primary corner radius size
	     */
	    medium: CSSProperties['borderRadius'];
	    /**
	     * Small corner radius size
	     */
	    small: CSSProperties['borderRadius'];
	}
	export interface _EuiThemeBorderColorValues {
	    /**
	     * Color for all borders; Default is `colors.lightShade`
	     */
	    color: ColorModeSwitch;
	}
	export interface _EuiThemeBorderValues extends _EuiThemeBorderColorValues {
	    /**
	     * Varied thicknesses for borders
	     */
	    width: _EuiThemeBorderWidthValues;
	    /**
	     * Varied border radii
	     */
	    radius: _EuiThemeBorderRadiusValues;
	}
	export interface _EuiThemeBorderTypes {
	    /**
	     * Full `border` property string computed using `border.width.thin` and `border.color`
	     */
	    thin: CSSProperties['border'];
	    /**
	     * Full `border` property string computed using `border.width.thick` and `border.color`
	     */
	    thick: CSSProperties['border'];
	    /**
	     * Full editable style `border` property string computed using `border.width.thick` and `border.color`
	     */
	    editable: CSSProperties['border'];
	}
	export type EuiThemeBorder = _EuiThemeBorderValues & _EuiThemeBorderTypes;
	export const border: EuiThemeBorder;

}
declare module '@elastic/eui/src/global_styling/variables/_colors' {
	import { ColorModeSwitch, StrictColorModeSwitch } from '@elastic/eui/src/services/theme/types';
	/**
	 * Top 5 colors
	 */
	export type _EuiThemeBrandColors = {
	    /**
	     * Main brand color and used for most **call to actions** like buttons and links.
	     */
	    primary: ColorModeSwitch;
	    /**
	     * Pulls attention to key indicators like **notifications** or number of selections.
	     */
	    accent: ColorModeSwitch;
	    /**
	     * Used for **positive** messages/graphics and additive actions.
	     */
	    success: ColorModeSwitch;
	    /**
	     * Used for **warnings** and actions that have a potential to be destructive.
	     */
	    warning: ColorModeSwitch;
	    /**
	     * Used for **negative** messages/graphics like errors and destructive actions.
	     */
	    danger: ColorModeSwitch;
	};
	/**
	 * Every brand color must have a contrast computed text equivelant
	 */
	export type _EuiThemeBrandTextColors = {
	    /**
	     * Typically computed against `colors.primary`
	     */
	    primaryText: ColorModeSwitch;
	    /**
	     * Typically computed against `colors.accent`
	     */
	    accentText: ColorModeSwitch;
	    /**
	     * Typically computed against `colors.success`
	     */
	    successText: ColorModeSwitch;
	    /**
	     * Typically computed against `colors.warning`
	     */
	    warningText: ColorModeSwitch;
	    /**
	     * Typically computed against `colors.danger`
	     */
	    dangerText: ColorModeSwitch;
	};
	export type _EuiThemeShadeColors = {
	    /**
	     * Used as the background color of primary **page content and panels** including modals and flyouts.
	     */
	    emptyShade: ColorModeSwitch;
	    /**
	     * Used to lightly shade areas that contain **secondary content** or contain panel-like components.
	     */
	    lightestShade: ColorModeSwitch;
	    /**
	     * Used for most **borders** and dividers (horizontal rules).
	     */
	    lightShade: ColorModeSwitch;
	    /**
	     * The middle gray for all themes; this is the base for `colors.subdued`.
	     */
	    mediumShade: ColorModeSwitch;
	    /**
	     * Slightly subtle graphic color
	     */
	    darkShade: ColorModeSwitch;
	    /**
	     * Used as the **text** color and the background color for **inverted components** like tooltips and the control bar.
	     */
	    darkestShade: ColorModeSwitch;
	    /**
	     * The opposite of `emptyShade`
	     */
	    fullShade: ColorModeSwitch;
	};
	export type _EuiThemeTextColors = {
	    /**
	     * Computed against `colors.darkestShade`
	     */
	    text: ColorModeSwitch;
	    /**
	     * Computed against `colors.text`
	     */
	    title: ColorModeSwitch;
	    /**
	     * Computed against `colors.mediumShade`
	     */
	    subdued: ColorModeSwitch;
	    /**
	     * Computed against `colors.primaryText`
	     */
	    link: ColorModeSwitch;
	};
	export type _EuiThemeSpecialColors = {
	    /**
	     * The background color for the **whole window (body)** and is a computed value of `colors.lightestShade`.
	     * Provides denominator (background) value for **contrast calculations**.
	     */
	    body: ColorModeSwitch;
	    /**
	     * Used to **highlight text** when matching against search strings
	     */
	    highlight: ColorModeSwitch;
	    /**
	     * Computed against `colors.darkestShade`
	     */
	    disabled: ColorModeSwitch;
	    /**
	     * Computed against `colors.disabled`
	     */
	    disabledText: ColorModeSwitch;
	    /**
	     * Base color for shadows that gets `transparentized`
	     */
	    shadow: ColorModeSwitch;
	};
	export type _EuiThemeConstantColors = {
	    /**
	     * Purest **white**
	     */
	    ghost: string;
	    /**
	     * Purest **black**
	     */
	    ink: string;
	};
	export type _EuiThemeColors = _EuiThemeBrandColors & _EuiThemeBrandTextColors & _EuiThemeShadeColors & _EuiThemeSpecialColors & _EuiThemeTextColors;
	export const brand_colors: _EuiThemeBrandColors;
	export const brand_text_colors: _EuiThemeBrandTextColors;
	export const shade_colors: _EuiThemeShadeColors;
	export const special_colors: _EuiThemeSpecialColors;
	export const text_colors: _EuiThemeTextColors;
	export const light_colors: _EuiThemeColors;
	export const dark_shades: _EuiThemeShadeColors;
	export const dark_colors: _EuiThemeColors;
	export type EuiThemeColors = StrictColorModeSwitch<_EuiThemeColors> & _EuiThemeConstantColors;
	export const colors: EuiThemeColors;

}
declare module '@elastic/eui/src/global_styling/variables/_size' {
	export type EuiThemeBase = number;
	export const base: EuiThemeBase;
	export type EuiThemeSize = {
	    xxs: string;
	    xs: string;
	    s: string;
	    m: string;
	    base: string;
	    l: string;
	    xl: string;
	    xxl: string;
	    xxxl: string;
	    xxxxl: string;
	};
	export const size: EuiThemeSize;

}
declare module '@elastic/eui/src/global_styling/variables/_typography' {
	import { CSSProperties } from 'react';
	export const fontScale: {
	    xxxs: number;
	    xxs: number;
	    xs: number;
	    s: number;
	    m: number;
	    l: number;
	    xl: number;
	    xxl: number;
	};
	export const SCALES: ("s" | "xs" | "m" | "l" | "xl" | "xxl" | "xxxs" | "xxs")[];
	export type _EuiThemeFontScale = keyof typeof fontScale;
	export type _EuiThemeFontBase = {
	    /**
	     * The whole font family stack for all parts of the UI.
	     * We encourage only customizing the first font in the stack.
	     */
	    family: string;
	    /**
	     * The font family used for monospace UI elements like EuiCode
	     */
	    familyCode?: string;
	    /**
	     * Controls advanced features OpenType fonts.
	     * https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings
	     */
	    featureSettings?: string;
	    /**
	     * A computed number that is 1/4 of `base`
	     */
	    baseline: number;
	    /**
	     * Establishes the ideal line-height percentage, but it is the `baseline` integer that establishes the final pixel/rem value
	     */
	    lineHeightMultiplier: number;
	};
	export const fontBase: _EuiThemeFontBase;
	export interface _EuiThemeFontWeight {
	    light: CSSProperties['fontWeight'];
	    regular: CSSProperties['fontWeight'];
	    medium: CSSProperties['fontWeight'];
	    semiBold: CSSProperties['fontWeight'];
	    bold: CSSProperties['fontWeight'];
	}
	export const fontWeight: _EuiThemeFontWeight;
	export type EuiThemeFont = _EuiThemeFontBase & {
	    scale: {
	        [key in _EuiThemeFontScale]: number;
	    };
	    weight: _EuiThemeFontWeight;
	    body: {
	        scale: _EuiThemeFontScale;
	        weight: keyof _EuiThemeFontWeight;
	        letterSpacing?: CSSProperties['letterSpacing'];
	    };
	};
	export const font: EuiThemeFont;

}
declare module '@elastic/eui/src/global_styling/variables/_states' {
	import { ColorModeSwitch } from '@elastic/eui/src/services/theme/types';
	import { CSSProperties } from 'react';
	/**
	 * NOTE: These were quick conversions of their Sass counterparts.
	 *       They have yet to be used/tested.
	 */
	export interface _EuiThemeFocusOutline {
	    /**
	     * A single CSS property: value
	     */
	    [key: string]: ColorModeSwitch;
	}
	export interface _EuiThemeFocus {
	    /**
	     * Color is used deterministically by the legacy theme, and as fallback for Amsterdam
	     */
	    color: ColorModeSwitch;
	    /**
	     * Used to transprentize any color at certain values
	     */
	    transparency: ColorModeSwitch<number>;
	    /**
	     * Default color plus transparency
	     */
	    backgroundColor: ColorModeSwitch;
	    /**
	     * Width is the thickness of the outline or faux ring
	     */
	    width: CSSProperties['borderWidth'];
	    /**
	     * Larger thickness of the outline for larger components
	     */
	    widthLarge: CSSProperties['borderWidth'];
	    /**
	     * Using `outline` is new for Amsterdam but is set to `none` in legacy theme
	     */
	    outline: _EuiThemeFocusOutline;
	}
	export const focus: _EuiThemeFocus;

}
declare module '@elastic/eui/src/services/theme/types' {
	import { RecursivePartial, ValueOf } from '@elastic/eui/src/components/common';
	import { EuiThemeAnimation } from '@elastic/eui/src/global_styling/variables/_animations';
	import { EuiThemeBreakpoint } from '@elastic/eui/src/global_styling/variables/_breakpoint';
	import { EuiThemeBorder } from '@elastic/eui/src/global_styling/variables/_borders';
	import { EuiThemeColors } from '@elastic/eui/src/global_styling/variables/_colors';
	import { EuiThemeBase, EuiThemeSize } from '@elastic/eui/src/global_styling/variables/_size';
	import { EuiThemeFont } from '@elastic/eui/src/global_styling/variables/_typography';
	import { _EuiThemeFocus } from '@elastic/eui/src/global_styling/variables/_states';
	export const COLOR_MODES_STANDARD: {
	    readonly light: "LIGHT";
	    readonly dark: "DARK";
	};
	export const COLOR_MODES_INVERSE: "INVERSE"; type EuiThemeColorModeInverse = typeof COLOR_MODES_INVERSE;
	export type EuiThemeColorModeStandard = ValueOf<typeof COLOR_MODES_STANDARD>;
	export type EuiThemeColorMode = string | EuiThemeColorModeStandard | EuiThemeColorModeInverse;
	export type ColorModeSwitch<T = string> = {
	    [key in EuiThemeColorModeStandard]: T;
	} | T;
	export type StrictColorModeSwitch<T = string> = {
	    [key in EuiThemeColorModeStandard]: T;
	};
	export type EuiThemeShape = {
	    colors: EuiThemeColors;
	    base: EuiThemeBase;
	    size: EuiThemeSize;
	    font: EuiThemeFont;
	    border: EuiThemeBorder;
	    focus?: _EuiThemeFocus;
	    animation: EuiThemeAnimation;
	    breakpoint: EuiThemeBreakpoint;
	};
	export type EuiThemeSystem<T = {}> = {
	    root: EuiThemeShape & T;
	    model: EuiThemeShape & T;
	    key: string;
	};
	export type EuiThemeModifications<T = {}> = RecursivePartial<EuiThemeShape & T>;
	export type ComputedThemeShape<T, P = string | number | bigint | boolean | null | undefined> = T extends P | ColorModeSwitch<infer X> ? T extends ColorModeSwitch<X> ? X extends P ? X : {
	    [K in keyof (X & Exclude<T, keyof X | keyof StrictColorModeSwitch>)]: ComputedThemeShape<(X & Exclude<T, keyof X | keyof StrictColorModeSwitch>)[K], P>;
	} : T : {
	    [K in keyof T]: ComputedThemeShape<T[K], P>;
	};
	export type EuiThemeComputed<T = {}> = ComputedThemeShape<EuiThemeShape & T> & {
	    themeName: string;
	};
	export {};

}
declare module '@elastic/eui/src/services/theme/utils' {
	import { EuiThemeColorMode, EuiThemeSystem, EuiThemeShape, EuiThemeComputed } from '@elastic/eui/src/services/theme/types';
	export const DEFAULT_COLOR_MODE: "LIGHT";
	/**
	 * Returns whether the provided color mode is `inverse`
	 * @param {string} colorMode - `light`, `dark`, or `inverse`
	 */
	export const isInverseColorMode: (colorMode?: string | undefined) => boolean;
	/**
	 * Returns the color mode configured in the current EuiThemeProvider.
	 * Returns the parent color mode if none is explicity set.
	 * @param {string} coloMode - `light`, `dark`, or `inverse`
	 * @param {string} parentColorMode - `light`, `dark`, or `inverse`; used as the fallback
	 */
	export const getColorMode: (colorMode?: string | undefined, parentColorMode?: string | undefined) => string;
	/**
	 * Returns a value at a given path on an object.
	 * If `colorMode` is provided, will scope the value to the appropriate color mode key (LIGHT\DARK)
	 * @param {object} model - Object
	 * @param {string} _path - Dot-notated string to a path on the object
	 * @param {string} colorMode - `light` or `dark`
	 */
	export const getOn: (model: {
	    [key: string]: any;
	}, _path: string, colorMode?: string | undefined) => {
	    [key: string]: any;
	} | undefined;
	/**
	 * Sets a value at a given path on an object.
	 * @param {object} model - Object
	 * @param {string} _path - Dot-notated string to a path on the object
	 * @param {any} string -  The value to set
	 */
	export const setOn: (model: {
	    [key: string]: any;
	}, _path: string, value: any) => boolean;
	/**
	 * Creates a class to store the `computer` method and its eventual parameters.
	 * Allows for on-demand computation with up-to-date parameters via `getValue` method.
	 * @constructor
	 * @param {function} computer - Function to be computed
	 * @param {string | array} dependencies - Dependencies passed to the `computer` as parameters
	 */
	export class Computed<T> {
	    computer: (...values: any[]) => T;
	    dependencies: string | string[];
	    constructor(computer: (...values: any[]) => T, dependencies?: string | string[]);
	    /**
	     * Executes the `computer` method with the current state of the theme
	     * by taking into account previously computed values and modifications.
	     * @param {Proxy | object} base - Computed or uncomputed theme
	     * @param {Proxy | object} modifications - Theme value overrides
	     * @param {object} working - Partially computed theme
	     * @param {string} colorMode - `light` or `dark`
	     */
	    getValue(base: EuiThemeSystem | EuiThemeShape, modifications: import ("@elastic/eui").RecursivePartial<EuiThemeShape> | undefined, working: EuiThemeComputed, colorMode: EuiThemeColorMode): T;
	}
	/**
	 * Returns a Class (`Computed`) that stores the arbitrary computer method
	 * and references to its optional dependecies.
	 * @param {function} computer - Arbitrary method to be called at compute time.
	 * @param {string | array} dependencies - Values that will be provided to `computer` at compute time.
	 */
	export function computed<T>(computer: (value: EuiThemeComputed) => T): T;
	export function computed<T>(computer: (value: any[]) => T, dependencies: string[]): T;
	export function computed<T>(computer: (value: any) => T, dependencies: string): T;
	/**
	 * Takes an uncomputed theme, and computes and returns all values taking
	 * into consideration value overrides and configured color mode.
	 * Overrides take precedence, and only values in the current color mode
	 * are computed and returned.
	 * @param {Proxy} base - Object to transform into Proxy
	 * @param {Proxy | object} over - Unique identifier or name
	 * @param {string} colorMode - `light` or `dark`
	 */
	export const getComputed: <T = EuiThemeShape>(base: EuiThemeSystem<T>, over: Partial<EuiThemeSystem<T>>, colorMode: EuiThemeColorMode) => EuiThemeComputed<T>;
	/**
	 * Builds a Proxy with a custom `handler` designed to self-reference values
	 * and prevent arbitrary value overrides.
	 * @param {object} model - Object to transform into Proxy
	 * @param {string} key - Unique identifier or name
	 */
	export const buildTheme: <T extends {}>(model: T, key: string) => {
	    model: T;
	    root: T;
	    key: string;
	};
	/**
	 * Deeply merges two objects, using `source` values whenever possible.
	 * @param {object} _target - Object with fallback values
	 * @param {object} source - Object with desired values
	 */
	export const mergeDeep: (_target: {
	    [key: string]: any;
	}, source?: {
	    [key: string]: any;
	}) => {
	    [key: string]: any;
	};

}
declare module '@elastic/eui/src/services/color/contrast' {
	/**
	 * Creates a new color that meets or exceeds WCAG level AA
	 * @param foreground - Color to manipulate
	 * @param ratio - Amount to change in absolute terms. 0-10.
	 * *
	 * @param themeOrBackground - Color to use as the contrast basis or just pass EuiTheme
	 */
	export const makeHighContrastColor: (_foreground: string, ratio?: number) => (themeOrBackground: string | {
	    [key: string]: any;
	    colors: {
	        body: string;
	    };
	}) => string;
	/**
	 * Creates a new color with increased contrast
	 * Disabled content only needs a contrast of at least 2 because there is no interaction available
	 * @param foreground - Color to manipulate
	 * @param ratio - Amount to change in absolute terms. 0-10.
	 * *
	 * @param themeOrBackground - Color to use as the contrast basis
	 */
	export const makeDisabledContrastColor: (color: string, ratio?: number) => (themeOrBackground: string | {
	    [key: string]: any;
	    colors: {
	        body: string;
	    };
	}) => string;

}
declare module '@elastic/eui/src/services/color' {
	export { isColorDark } from '@elastic/eui/src/services/color/is_color_dark';
	export { isValidHex } from '@elastic/eui/src/services/color/is_valid_hex';
	export { hexToHsv } from '@elastic/eui/src/services/color/hex_to_hsv';
	export { hexToRgb } from '@elastic/eui/src/services/color/hex_to_rgb';
	export { hsvToHex } from '@elastic/eui/src/services/color/hsv_to_hex';
	export { hsvToRgb } from '@elastic/eui/src/services/color/hsv_to_rgb';
	export { rgbToHex } from '@elastic/eui/src/services/color/rgb_to_hex';
	export { rgbToHsv } from '@elastic/eui/src/services/color/rgb_to_hsv';
	export { calculateContrast, calculateLuminance, } from '@elastic/eui/src/services/color/luminance_and_contrast';
	export { VISUALIZATION_COLORS, DEFAULT_VISUALIZATION_COLOR, } from '@elastic/eui/src/services/color/visualization_colors';
	export { colorPalette } from '@elastic/eui/src/services/color/color_palette';
	export { euiPaletteForLightBackground, euiPaletteForDarkBackground, euiPaletteColorBlind, euiPaletteColorBlindBehindText, euiPaletteForStatus, euiPaletteForTemperature, euiPaletteComplimentary, euiPaletteNegative, euiPalettePositive, euiPaletteCool, euiPaletteWarm, euiPaletteGray, } from '@elastic/eui/src/services/color/eui_palettes';
	export { rgbDef, HSV, RGB } from '@elastic/eui/src/services/color/color_types';
	export { getSteppedGradient } from '@elastic/eui/src/services/color/stepped_gradient';
	export * from '@elastic/eui/src/services/color/manipulation';
	export * from '@elastic/eui/src/services/color/contrast';

}
declare module '@elastic/eui/src/services/color_picker/color_picker' {
	interface colorStopsType {
	    stop: number;
	    color: string;
	}
	export const useColorStopsState: (useRandomColor?: boolean, initialColorStops?: colorStopsType[]) => (string | colorStopsType[] | ((colorStops: colorStopsType[]) => void))[];
	export type EuiSetColorMethod = (text: string, { hex, isValid }: {
	    hex: string;
	    isValid: boolean;
	}) => void;
	export const useColorPickerState: (initialColor?: string) => [color: string, setColor: EuiSetColorMethod, errors: string[] | null];
	export {};

}
declare module '@elastic/eui/src/services/color_picker' {
	export { useColorPickerState, useColorStopsState, EuiSetColorMethod, } from '@elastic/eui/src/services/color_picker/color_picker';

}
declare module '@elastic/eui/src/services/console/warn_once' {
	export const warnOnce: (id: string, message: string) => void;

}
declare module '@elastic/eui/src/services/console' {
	export * from '@elastic/eui/src/services/console/warn_once';

}
declare module '@elastic/eui/src/services/copy_to_clipboard' {
	export function copyToClipboard(text: string): boolean;

}
declare module '@elastic/eui/src/services/format/format_boolean' {
	export const formatBoolean: (value: boolean, { yes, no, nil }?: {
	    yes?: string | undefined;
	    no?: string | undefined;
	    nil?: string | undefined;
	}) => string;

}
declare module '@elastic/eui/src/services/format/format_date' {
	import moment from 'moment'; type CalendarOptions = moment.CalendarSpec & {
	    refTime?: moment.MomentInput;
	};
	export const dateFormatAliases: {
	    date: string;
	    longDate: string;
	    shortDate: string;
	    dateTime: string;
	    longDateTime: string;
	    shortDateTime: string;
	    dobShort: string;
	    dobLong: string;
	    iso8601: string;
	    calendar: (value: moment.MomentInput, options?: CalendarOptions) => string;
	    calendarDateTime: (value: moment.MomentInput, options: moment.CalendarSpec) => string;
	    calendarDate: (value: moment.MomentInput, options: moment.CalendarSpec) => string;
	}; type DateFormat = keyof typeof dateFormatAliases;
	interface FormatDateConfig {
	    format: DateFormat;
	    nil: string;
	    options: any;
	}
	export const formatDate: (value?: moment.MomentInput, dateFormatKeyOrConfig?: DateFormat | string | Partial<FormatDateConfig>) => string;
	export {};

}
declare module '@elastic/eui/src/services/format/format_number' {
	interface FormatNumberConfig {
	    format: string;
	    nil: string;
	    round: boolean;
	}
	export const formatNumber: (value?: number | null | undefined, numberFormatOrConfig?: string | Partial<FormatNumberConfig>) => string;
	export {};

}
declare module '@elastic/eui/src/services/format/format_text' {
	interface FormatTextOptions {
	    nil: string;
	}
	export const formatText: (value?: any, options?: Partial<FormatTextOptions>) => any;
	export {};

}
declare module '@elastic/eui/src/services/format/format_auto' {
	export const formatAuto: (value: any) => string;

}
declare module '@elastic/eui/src/services/format' {
	export { formatAuto } from '@elastic/eui/src/services/format/format_auto';
	export { formatBoolean } from '@elastic/eui/src/services/format/format_boolean';
	export { formatDate, dateFormatAliases } from '@elastic/eui/src/services/format/format_date';
	export { formatNumber } from '@elastic/eui/src/services/format/format_number';
	export { formatText } from '@elastic/eui/src/services/format/format_text';

}
declare module '@elastic/eui/src/services/paging/pager' {
	export class Pager {
	    currentPageIndex: number;
	    firstItemIndex: number;
	    itemsPerPage: number;
	    lastItemIndex: number;
	    totalItems: number;
	    totalPages: number;
	    constructor(totalItems: number, itemsPerPage: number, initialPageIndex?: number);
	    setTotalItems: (totalItems: number) => void;
	    setItemsPerPage: (itemsPerPage: number) => void;
	    isPageable: () => boolean;
	    getTotalPages: () => number;
	    getCurrentPageIndex: () => number;
	    getFirstItemIndex: () => number;
	    getLastItemIndex: () => number;
	    hasNextPage: () => boolean;
	    hasPreviousPage: () => boolean;
	    goToNextPage: () => void;
	    goToPreviousPage: () => void;
	    goToPageIndex: (pageIndex: number) => void;
	    update: () => void;
	}

}
declare module '@elastic/eui/src/services/paging' {
	export { Pager } from '@elastic/eui/src/services/paging/pager';

}
declare module '@elastic/eui/src/services/utils' {
	export function times(count: number): number[];
	export function times<T>(count: number, iteratee: (index: number) => T): T[];
	export function memoize<T extends (...args: any[]) => any>(func: T, resolver?: (...args: any[]) => any): (...args: Parameters<T>) => ReturnType<T>;
	export const browserTick: (callback: FrameRequestCallback) => void;

}
declare module '@elastic/eui/src/services/random' {
	import moment from 'moment';
	export class Random {
	    private readonly rand;
	    constructor(rand?: () => number);
	    boolean: () => boolean;
	    number: (options?: {
	        min?: number;
	        max?: number;
	    }) => number;
	    integer: (options?: {
	        min?: number;
	        max?: number;
	    }) => number;
	    oneOf: <T>(values: T[]) => T;
	    oneToOne: <T>(values: T[], index: number) => T;
	    setOf: <T>(values: T[], options?: {
	        min?: number;
	        max?: number;
	    }) => T[];
	    date: (options?: {
	        min?: Date;
	        max?: Date;
	    }) => Date;
	    moment: (options?: {
	        min?: moment.Moment;
	        max?: moment.Moment;
	    }) => moment.Moment;
	}

}
declare module '@elastic/eui/src/services/url' {
	export const isDomainSecure: (url?: string) => boolean;

}
declare module '@elastic/eui/src/services/security/get_secure_rel_for_target' {
	export const getSecureRelForTarget: ({ href, target, rel, }: {
	    href?: string | undefined;
	    target?: string | undefined;
	    rel?: string | undefined;
	}) => string;

}
declare module '@elastic/eui/src/services/security' {
	export { getSecureRelForTarget } from '@elastic/eui/src/services/security/get_secure_rel_for_target';

}
declare module '@elastic/eui/src/services/string/to_initials' {
	/**
	 * This function calculates the initials/acronym for a given name.
	 * It defaults to only 2 characters and will take the first character (of each word).
	 * If only one word is supplied for the name, it will only pass back the first letter of the word,
	 * unless forced to 2 letters by setting `initialsLength` to `2`.
	 * It will pass back the characters with the same casing as the original string
	 * unless otherwise specified.
	 *
	 * @param {string} name The full name of the item to turn into initials
	 * @param {number} initialsLength (Optional) How many characters to show (max 2 allowed)
	 * @param {string} initials (Optional) Custom initials (max 2 characters)
	 * @returns {string} True if the color is dark, false otherwise.
	 */
	export const MAX_INITIALS = 2;
	export function toInitials(name: string, initialsLength?: 1 | 2, initials?: string): string | null;

}
declare module '@elastic/eui/src/services/string/to_case' {
	/**
	 * This function returns the same string with the first letter of the first word capitalized.
	 *
	 * @param {string} string The input string
	 */
	export function toSentenceCase(string: string): string;

}
declare module '@elastic/eui/src/services/string/slugify' {
	/**
	 * Lowercases input and replaces spaces with hyphens:
	 * e.g. 'GridView Example' -> 'gridview-example'
	 *
	 * @param {string} string The starting string
	 * @returns {string} Lowercase, dashed version of the starting staring
	 */
	export function slugify(str: string): string;

}
declare module '@elastic/eui/src/services/string' {
	export { toInitials } from '@elastic/eui/src/services/string/to_initials';
	export { toSentenceCase } from '@elastic/eui/src/services/string/to_case';
	export { slugify } from '@elastic/eui/src/services/string/slugify';

}
declare module '@elastic/eui/src/services/sort/sort_direction' {
	import PropTypes from 'prop-types'; const ASC: "asc"; const DESC: "desc";
	export type Direction = typeof ASC | typeof DESC;
	export const SortDirection: Readonly<{
	    ASC: "asc";
	    DESC: "desc";
	    isAsc(direction: Direction): boolean;
	    reverse(direction: Direction): Direction;
	}>;
	export const SortDirectionType: PropTypes.Requireable<Direction>;
	export {};

}
declare module '@elastic/eui/src/services/sort/comparators' {
	export type Primitive = string | boolean | number | null | undefined; type Comparator<T = Primitive> = (a: T, b: T) => number;
	export const Comparators: Readonly<{
	    default: (direction?: 'asc' | 'desc') => (v1: Primitive, v2: Primitive) => number;
	    reverse: <T>(comparator: Comparator<T>) => Comparator<T>;
	    value<T_1>(valueCallback: (value: T_1) => Primitive, comparator?: Comparator<Primitive> | undefined): Comparator<T_1>;
	    property<T_2>(prop: string, comparator?: Comparator<Primitive> | undefined): Comparator<T_2>;
	}>;
	export {};

}
declare module '@elastic/eui/src/services/sort/sortable_properties' {
	import { Primitive } from '@elastic/eui/src/services/sort/comparators';
	export interface SortableProperty<T> {
	    name: string;
	    getValue: (obj: T) => Primitive;
	    isAscending: boolean;
	}
	/**
	 * @typedef {Object} SortableProperty
	 * @property {string} sortableProperty.name - Name of the property.
	 * @property {function} sortableProperty.getValue - A function that takes in an object and returns a value to sort
	 * by.
	 * @property {boolean} sortableProperty.isAscending - The direction of the last sort by this property. Used to preserve
	 * past sort orders.
	 */
	/**
	 * Stores sort information for a set of SortableProperties, including which property is currently being sorted on, as
	 * well as the last sort order for each property.
	 */
	export class SortableProperties<T> {
	    sortableProperties: Array<SortableProperty<T>>;
	    currentSortedProperty: SortableProperty<T>;
	    /**
	     * @param {Array<SortableProperty>} sortableProperties - a set of sortable properties.
	     * @param {string} initialSortablePropertyName - Which sort property should be sorted on by default.
	     */
	    constructor(sortableProperties: Array<SortableProperty<T>>, initialSortablePropertyName: string);
	    /**
	     * @returns {SortableProperty} The current property that is being sorted on. Undefined if no sort order is applied.
	     */
	    getSortedProperty(): SortableProperty<T>;
	    /**
	     * Sorts the items passed in and returns a newly sorted array.
	     * @param items {Array.<Object>}
	     * @returns {Array.<Object>} sorted array of items, based off the sort properties.
	     */
	    sortItems(items: T[]): T[];
	    /**
	     * Returns the SortProperty with the given name, if found.
	     * @param {String} propertyName
	     * @returns {SortableProperty|undefined}
	     */
	    getSortablePropertyByName(propertyName: string): SortableProperty<T> | undefined;
	    /**
	     * Updates the sort property, potentially flipping the sort order based on whether the same
	     * property was already being sorted.
	     * @param propertyName {String}
	     */
	    sortOn(propertyName: string): void;
	    /**
	     * @returns {boolean} True if the current sortable property is sorted in ascending order.
	     */
	    isCurrentSortAscending(): boolean;
	    /**
	     * @param {string} propertyName
	     * @returns {boolean} True if the given sort property is sorted in ascending order.
	     */
	    isAscendingByName(propertyName: string): boolean;
	    /**
	     * Flips the current sorted property sort order.
	     */
	    flipCurrentSortOrder(): void;
	}

}
declare module '@elastic/eui/src/services/sort/property_sort' {
	import PropTypes from 'prop-types';
	import { Direction } from '@elastic/eui/src/services/sort/sort_direction';
	export const PropertySortType: PropTypes.Requireable<PropTypes.InferProps<{
	    field: PropTypes.Validator<string>;
	    direction: PropTypes.Validator<Direction>;
	}>>;
	export interface PropertySort {
	    field: string;
	    direction: Direction;
	}

}
declare module '@elastic/eui/src/services/sort' {
	export { SortableProperties } from '@elastic/eui/src/services/sort/sortable_properties';
	export { SortDirectionType, SortDirection, Direction } from '@elastic/eui/src/services/sort/sort_direction';
	export { PropertySortType, PropertySort } from '@elastic/eui/src/services/sort/property_sort';
	export { Comparators } from '@elastic/eui/src/services/sort/comparators';

}
declare module '@elastic/eui/src/services/transition/transition' {
	export const getTransitionTimings: (element: Element) => {
	    durationMatch: number;
	    delayMatch: number;
	};
	export const getWaitDuration: (records: MutationRecord[]) => number;
	export const performOnFrame: (waitDuration: number, toPerform: () => void) => void;
	export const getDurationAndPerformOnFrame: (records: MutationRecord[], toPerform: () => void) => void;

}
declare module '@elastic/eui/src/services/transition' {
	export { getDurationAndPerformOnFrame, getTransitionTimings, getWaitDuration, performOnFrame, } from '@elastic/eui/src/services/transition/transition';

}
declare module '@elastic/eui/src/services/window_event/window_event' {
	import { Component } from 'react'; type EventNames = keyof WindowEventMap;
	interface Props<Ev extends EventNames> {
	    event: Ev;
	    handler: (this: Window, ev: WindowEventMap[Ev]) => any;
	}
	export class EuiWindowEvent<E extends EventNames> extends Component<Props<E>> {
	    componentDidMount(): void;
	    componentDidUpdate(prevProps: Props<E>): void;
	    componentWillUnmount(): void;
	    addEvent<Ev extends EventNames>({ event, handler }: Props<Ev>): void;
	    removeEvent<Ev extends EventNames>({ event, handler }: Props<Ev>): void;
	    render(): null;
	}
	export {};

}
declare module '@elastic/eui/src/services/window_event' {
	export { EuiWindowEvent } from '@elastic/eui/src/services/window_event/window_event';

}
declare module '@elastic/eui/src/themes/amsterdam/global_styling/variables/_colors' {
	import { _EuiThemeColors, EuiThemeColors } from '@elastic/eui/src/global_styling/variables/_colors';
	export const light_colors_ams: _EuiThemeColors;
	export const dark_colors_ams: _EuiThemeColors;
	export const colors_ams: EuiThemeColors;

}
declare module '@elastic/eui/src/themes/amsterdam/global_styling/variables/_typography' {
	import { EuiThemeFont } from '@elastic/eui/src/global_styling/variables/_typography';
	/**
	 * Amsterdam theme just changes the main font from the beta Inter UI to Inter
	 */
	export const font_ams: EuiThemeFont;

}
declare module '@elastic/eui/src/themes/amsterdam/global_styling/variables/_borders' {
	import { EuiThemeBorder } from '@elastic/eui/src/global_styling/variables/_borders';
	export const border_ams: EuiThemeBorder;

}
declare module '@elastic/eui/src/themes/amsterdam/theme' {
	import { EuiThemeShape } from '@elastic/eui/src/services/theme/types';
	export const AMSTERDAM_NAME_KEY = "EUI_THEME_AMSTERDAM";
	export const euiThemeAmsterdam: EuiThemeShape;
	export const EuiThemeAmsterdam: {
	    model: EuiThemeShape;
	    root: EuiThemeShape;
	    key: string;
	};

}
declare module '@elastic/eui/src/services/theme/context' {
	
	import { EuiThemeSystem, EuiThemeComputed } from '@elastic/eui/src/services/theme/types';
	export const EuiSystemContext: import("react").Context<EuiThemeSystem<{}>>;
	export const EuiModificationsContext: import("react").Context<import ("@elastic/eui").RecursivePartial<import ("@elastic/eui/src/services/theme/types").EuiThemeShape>>;
	export const EuiColorModeContext: import("react").Context<string>;
	export const EuiThemeContext: import("react").Context<EuiThemeComputed<{}>>;

}
declare module '@elastic/eui/src/services/theme/hooks' {
	import React from 'react';
	import { EuiThemeColorMode, EuiThemeModifications, EuiThemeComputed } from '@elastic/eui/src/services/theme/types';
	export interface UseEuiTheme<T extends {} = {}> {
	    euiTheme: EuiThemeComputed<T>;
	    colorMode: EuiThemeColorMode;
	    modifications: EuiThemeModifications<T>;
	}
	export const useEuiTheme: <T extends {} = {}>() => UseEuiTheme<T>;
	export interface WithEuiThemeProps<P = {}> {
	    theme: UseEuiTheme<P>;
	}
	export const withEuiTheme: <T extends {} = {}, U extends {} = {}>(Component: React.ComponentType<T & WithEuiThemeProps<U>>) => React.ForwardRefExoticComponent<React.PropsWithoutRef<Pick<T, Exclude<keyof T, "theme">>> & React.RefAttributes<Pick<T, Exclude<keyof T, "theme">>>>;

}
declare module '@elastic/eui/src/services/theme/provider' {
	import React, { PropsWithChildren } from 'react';
	import { EuiThemeColorMode, EuiThemeSystem, EuiThemeModifications } from '@elastic/eui/src/services/theme/types';
	export interface EuiThemeProviderProps<T> {
	    theme?: EuiThemeSystem<T>;
	    colorMode?: EuiThemeColorMode;
	    modify?: EuiThemeModifications<T>;
	    children: any;
	}
	export const EuiThemeProvider: <T extends {} = {}>({ theme: _system, colorMode: _colorMode, modify: _modifications, children, }: React.PropsWithChildren<EuiThemeProviderProps<T>>) => JSX.Element;

}
declare module '@elastic/eui/src/services/theme/typography' {
	import { _EuiThemeFontBase } from '@elastic/eui/src/global_styling/variables/_typography';
	/**
	 * Calculates the line-height to the closest multiple of the baseline
	 * EX: A proper line-height for text is 1.5 times the font-size.
	 *     If our base font size (euiFontSize) is 16, and our baseline is 4. To ensure the
	 *     text stays on the baseline, we pass a multiplier to calculate a line-height.
	 * @param base - Theme base unit
	 * @param font - Requires numbers for the `lineHeightMultiplier` and `baseline` values
	 * @param scale - The font scale multiplier
	 * *
	 * @returns string - Rem unit aligned to baseline
	 */
	export function lineHeightFromBaseline(base: number, font: {
	    baseline: _EuiThemeFontBase['baseline'];
	    lineHeightMultiplier: _EuiThemeFontBase['lineHeightMultiplier'];
	}, scale: number): string;

}
declare module '@elastic/eui/src/services/theme' {
	export { EuiSystemContext, EuiThemeContext, EuiModificationsContext, EuiColorModeContext, } from '@elastic/eui/src/services/theme/context';
	export { useEuiTheme, UseEuiTheme, withEuiTheme, WithEuiThemeProps, } from '@elastic/eui/src/services/theme/hooks';
	export { EuiThemeProvider, EuiThemeProviderProps } from '@elastic/eui/src/services/theme/provider';
	export { buildTheme, computed, isInverseColorMode, getColorMode, getComputed, getOn, mergeDeep, setOn, Computed, } from '@elastic/eui/src/services/theme/utils';
	export { ComputedThemeShape, EuiThemeColorMode, EuiThemeColorModeStandard, EuiThemeComputed, EuiThemeModifications, EuiThemeShape, EuiThemeSystem, COLOR_MODES_STANDARD, } from '@elastic/eui/src/services/theme/types';
	export { lineHeightFromBaseline } from '@elastic/eui/src/services/theme/typography';
	export { sizeToPixel } from '@elastic/eui/src/services/theme/size';

}
declare module '@elastic/eui/src/services' {
	import * as keys from '@elastic/eui/src/services/keys';
	export { keys };
	export { accessibleClickKeys, cascadingMenuKeys, comboBoxKeys, htmlIdGenerator, useGeneratedHtmlId, } from '@elastic/eui/src/services/accessibility';
	export { HorizontalAlignment, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, CENTER_ALIGNMENT, } from '@elastic/eui/src/services/alignment';
	export { BREAKPOINTS, BREAKPOINT_KEYS, getBreakpoint, isWithinBreakpoints, isWithinMaxBreakpoint, isWithinMinBreakpoint, EuiBreakpointSize, } from '@elastic/eui/src/services/breakpoint';
	export { isColorDark, isValidHex, calculateContrast, calculateLuminance, hexToHsv, hexToRgb, hsvToHex, hsvToRgb, rgbToHex, rgbToHsv, VISUALIZATION_COLORS, DEFAULT_VISUALIZATION_COLOR, colorPalette, euiPaletteForLightBackground, euiPaletteForDarkBackground, euiPaletteColorBlind, euiPaletteColorBlindBehindText, euiPaletteForStatus, euiPaletteForTemperature, euiPaletteComplimentary, euiPaletteNegative, euiPalettePositive, euiPaletteCool, euiPaletteWarm, euiPaletteGray, HSV, getSteppedGradient, transparentize, tint, shade, saturate, desaturate, lightness, makeHighContrastColor, makeDisabledContrastColor, } from '@elastic/eui/src/services/color';
	export { useColorPickerState, useColorStopsState, EuiSetColorMethod, } from '@elastic/eui/src/services/color_picker';
	export * from '@elastic/eui/src/services/console';
	export { copyToClipboard } from '@elastic/eui/src/services/copy_to_clipboard';
	export { formatAuto, formatBoolean, formatDate, formatNumber, formatText, dateFormatAliases, } from '@elastic/eui/src/services/format';
	export { isEvenlyDivisibleBy, isWithinRange } from '@elastic/eui/src/services/number';
	export { Pager } from '@elastic/eui/src/services/paging';
	export { Random } from '@elastic/eui/src/services/random';
	export { getSecureRelForTarget } from '@elastic/eui/src/services/security';
	export { toSentenceCase, toInitials, slugify } from '@elastic/eui/src/services/string';
	export { PropertySortType, PropertySort, SortDirectionType, SortDirection, Direction, SortableProperties, Comparators, } from '@elastic/eui/src/services/sort';
	export { calculatePopoverPosition, findPopoverPosition } from '@elastic/eui/src/services/popover';
	export { getDurationAndPerformOnFrame, getTransitionTimings, getWaitDuration, performOnFrame, } from '@elastic/eui/src/services/transition';
	export { EuiWindowEvent } from '@elastic/eui/src/services/window_event';
	export { useCombinedRefs, useForceRender, useUpdateEffect, useDependentState, useIsWithinBreakpoints, useMouseMove, isMouseEvent, } from '@elastic/eui/src/services/hooks';
	export { throttle } from '@elastic/eui/src/services/throttle';
	export * from '@elastic/eui/src/services/theme';

}
declare module '@elastic/eui/src/components/button/button' {
	import React, { FunctionComponent, Ref, CSSProperties, HTMLAttributes, ReactNode } from 'react';
	import { CommonProps, ExclusiveUnion, PropsForAnchor, PropsForButton } from '@elastic/eui/src/components/common';
	import { EuiButtonContentProps, EuiButtonContentType } from '@elastic/eui/src/components/button/button_content';
	export type ButtonColor = 'primary' | 'accent' | 'success' | 'warning' | 'danger' | 'ghost' | 'text';
	export type ButtonSize = 's' | 'm';
	export const colorToClassNameMap: {
	    [color in ButtonColor]: string;
	};
	export const COLORS: ButtonColor[];
	export const sizeToClassNameMap: {
	    [size in ButtonSize]: string | null;
	};
	export const SIZES: ("s" | "m")[];
	/**
	 * Extends EuiButtonContentProps which provides
	 * `iconType`, `iconSide`, and `textProps`
	 */
	export interface EuiButtonProps extends EuiButtonContentProps, CommonProps {
	    children?: ReactNode;
	    /**
	     * Make button a solid color for prominence
	     */
	    fill?: boolean;
	    /**
	     * Any of our named colors.
	     */
	    color?: ButtonColor;
	    /**
	     * Use size `s` in confined spaces
	     */
	    size?: ButtonSize;
	    /**
	     * `disabled` is also allowed
	     */
	    isDisabled?: boolean;
	    /**
	     * Applies the boolean state as the `aria-pressed` property to create a toggle button.
	     * *Only use when the readable text does not change between states.*
	     */
	    isSelected?: boolean;
	    /**
	     * Extends the button to 100% width
	     */
	    fullWidth?: boolean;
	    /**
	     * Override the default minimum width
	     */
	    minWidth?: CSSProperties['minWidth'];
	    /**
	     * Force disables the button and changes the icon to a loading spinner
	     */
	    isLoading?: boolean;
	    /**
	     * Object of props passed to the <span/> wrapping the button's content
	     */
	    contentProps?: EuiButtonContentType;
	    style?: CSSProperties;
	}
	export type EuiButtonDisplayProps = EuiButtonProps & HTMLAttributes<HTMLElement> & {
	    /**
	     * Provide a valid element to render the element as
	     */
	    element: 'a' | 'button' | 'span' | 'label';
	    /**
	     * Provide the component's base class name to build the class list on
	     */
	    baseClassName: string;
	}; const EuiButtonDisplay: React.ForwardRefExoticComponent<EuiButtonProps & React.HTMLAttributes<HTMLElement> & {
	    /**
	     * Provide a valid element to render the element as
	     */
	    element: 'a' | 'button' | 'span' | 'label';
	    /**
	     * Provide the component's base class name to build the class list on
	     */
	    baseClassName: string;
	} & React.RefAttributes<HTMLElement>>;
	export { EuiButtonDisplay };
	export type EuiButtonPropsForAnchor = PropsForAnchor<EuiButtonProps, {
	    buttonRef?: Ref<HTMLAnchorElement>;
	}>;
	export type EuiButtonPropsForButton = PropsForButton<EuiButtonProps, {
	    buttonRef?: Ref<HTMLButtonElement>;
	}>;
	export type Props = ExclusiveUnion<EuiButtonPropsForAnchor, EuiButtonPropsForButton>;
	export const EuiButton: FunctionComponent<Props>;

}
declare module '@elastic/eui/src/components/accessibility/skip_link' {
	import { FunctionComponent, Ref } from 'react';
	import { EuiButtonProps } from '@elastic/eui/src/components/button/button';
	import { PropsForAnchor, PropsForButton, ExclusiveUnion } from '@elastic/eui/src/components/common'; type Positions = 'static' | 'fixed' | 'absolute';
	export const POSITIONS: ("fixed" | "absolute" | "static")[];
	interface EuiSkipLinkInterface extends EuiButtonProps {
	    /**
	     * Change the display position of the element when focused.
	     * If 'fixed', the link will be fixed to the top left of the viewport
	     */
	    position?: Positions;
	    /**
	     * Typically an anchor id (e.g. `a11yMainContent`), the value provided
	     * will be prepended with a hash `#` and used as the link `href`
	     */
	    destinationId: string;
	    /**
	     * When position is fixed, this is forced to `0`
	     */
	    tabIndex?: number;
	} type propsForAnchor = PropsForAnchor<EuiSkipLinkInterface, {
	    buttonRef?: Ref<HTMLAnchorElement>;
	}>; type propsForButton = PropsForButton<EuiSkipLinkInterface, {
	    buttonRef?: Ref<HTMLButtonElement>;
	}>;
	export type EuiSkipLinkProps = ExclusiveUnion<propsForAnchor, propsForButton>;
	export const EuiSkipLink: FunctionComponent<EuiSkipLinkProps>;
	export {};

}
declare module '@elastic/eui/src/components/accessibility' {
	export { EuiScreenReaderOnly } from '@elastic/eui/src/components/accessibility/screen_reader';
	export { EuiSkipLink, EuiSkipLinkProps } from '@elastic/eui/src/components/accessibility/skip_link';

}
declare module '@elastic/eui/src/components/accordion/accordion' {
	import { Component, HTMLAttributes, ReactNode } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiButtonIconProps } from '@elastic/eui/src/components/button'; const paddingSizeToClassNameMap: {
	    none: string;
	    xs: string;
	    s: string;
	    m: string;
	    l: string;
	    xl: string;
	};
	export const PADDING_SIZES: ("s" | "xs" | "m" | "l" | "xl" | "none")[];
	export type EuiAccordionSize = keyof typeof paddingSizeToClassNameMap;
	export type EuiAccordionProps = CommonProps & Omit<HTMLAttributes<HTMLElement>, 'id'> & {
	    id: string;
	    /**
	     * Applied to the entire .euiAccordion wrapper.
	     * When using `fieldset`, it will enforce `buttonElement = legend` as well.
	     */
	    element?: 'div' | 'fieldset';
	    /**
	     * Class that will apply to the trigger for the accordion.
	     */
	    buttonClassName?: string;
	    /**
	     * Apply more props to the triggering button
	     */
	    buttonProps?: CommonProps & HTMLAttributes<HTMLElement>;
	    /**
	     * Class that will apply to the trigger content for the accordion.
	     */
	    buttonContentClassName?: string;
	    /**
	     * The content of the clickable trigger
	     */
	    buttonContent?: ReactNode;
	    /**
	     * Applied to the main button receiving the `onToggle` event.
	     * Anything other than the default `button` does not support removing the arrow display (for accessibility of focus).
	     */
	    buttonElement?: 'div' | 'legend' | 'button';
	    /**
	     * Extra props to pass to the EuiButtonIcon containing the arrow.
	     */
	    arrowProps?: Partial<Omit<EuiButtonIconProps, 'iconType' | 'onClick' | 'aria-labelledby'>>;
	    /**
	     * Will appear right aligned against the button. Useful for separate actions like deletions.
	     */
	    extraAction?: ReactNode;
	    /**
	     * The accordion will start in the open state.
	     */
	    initialIsOpen: boolean;
	    /**
	     * Optional callback method called on open and close with a single `isOpen` parameter
	     */
	    onToggle?: (isOpen: boolean) => void;
	    /**
	     * The padding around the exposed accordion content.
	     */
	    paddingSize?: EuiAccordionSize;
	    /**
	     * Placement of the arrow indicator, or 'none' to hide it.
	     */
	    arrowDisplay?: 'left' | 'right' | 'none';
	    /**
	     * Control the opening of accordion via prop
	     */
	    forceState?: 'closed' | 'open';
	    /**
	     * Change `extraAction` and children into a loading spinner
	     */
	    isLoading?: boolean;
	    /**
	     * Choose whether the loading message replaces the content. Customize the message by passing a node
	     */
	    isLoadingMessage?: boolean | ReactNode;
	};
	export class EuiAccordion extends Component<EuiAccordionProps, {
	    isOpen: boolean;
	}> {
	    static defaultProps: {
	        initialIsOpen: boolean;
	        paddingSize: string;
	        arrowDisplay: string;
	        isLoading: boolean;
	        isLoadingMessage: boolean;
	        element: string;
	        buttonElement: string;
	    };
	    childContent: HTMLDivElement | null;
	    childWrapper: HTMLDivElement | null;
	    state: {
	        isOpen: boolean;
	    };
	    setChildContentHeight: () => void;
	    componentDidMount(): void;
	    componentDidUpdate(): void;
	    onToggle: () => void;
	    setChildContentRef: (node: HTMLDivElement | null) => void;
	    generatedId: string;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/accordion' {
	export { EuiAccordion, EuiAccordionProps } from '@elastic/eui/src/components/accordion/accordion';

}
declare module '@elastic/eui/src/components/aspect_ratio/aspect_ratio' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiAspectRatioProps = HTMLAttributes<HTMLDivElement> & CommonProps & {
	    /**
	     * Aspect ratio height. For example 9 would be widescreen video.
	     */
	    height: number;
	    /**
	     * Aspect ratio width. For example 16 would be widescreen video.
	     */
	    width: number;
	    /**
	     * The maximum width you want the child to stretch to.
	     */
	    maxWidth?: number;
	};
	export const EuiAspectRatio: FunctionComponent<EuiAspectRatioProps>;

}
declare module '@elastic/eui/src/components/aspect_ratio' {
	export { EuiAspectRatio, EuiAspectRatioProps } from '@elastic/eui/src/components/aspect_ratio/aspect_ratio';

}
declare module '@elastic/eui/src/components/auto_sizer/auto_sizer' {
	import AutoSizer, { AutoSizerProps } from 'react-virtualized-auto-sizer';
	export interface EuiAutoSizerProps extends AutoSizerProps {
	}
	export class EuiAutoSizer extends AutoSizer {
	}

}
declare module '@elastic/eui/src/components/auto_sizer' {
	export { EuiAutoSizer, EuiAutoSizerProps } from '@elastic/eui/src/components/auto_sizer/auto_sizer';

}
declare module '@elastic/eui/src/components/avatar/avatar' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common';
	import { IconType, IconSize, IconColor } from '@elastic/eui/src/components/icon'; const sizeToClassNameMap: {
	    s: string;
	    m: string;
	    l: string;
	    xl: string;
	};
	export const SIZES: ("s" | "m" | "l" | "xl")[];
	export type EuiAvatarSize = keyof typeof sizeToClassNameMap; const typeToClassNameMap: {
	    space: string;
	    user: string;
	};
	export const TYPES: ("space" | "user")[];
	export type EuiAvatarType = keyof typeof typeToClassNameMap; type _EuiAvatarContent = ExclusiveUnion<ExclusiveUnion<{
	    /**
	     * Custom initials (max 2 characters).
	     * By default will take the first character (of each word).
	     */
	    initials?: string;
	    /**
	     * Specify how many characters to show (1 or 2).
	     * By default, will show based on number of words (max first 2).
	     */
	    initialsLength?: 1 | 2;
	}, {
	    /**
	     * Path to an image to display instead of initials
	     */
	    imageUrl: string;
	}>, {
	    /**
	     * Any EUI glyph, logo or custom icon to display instead of initials
	     */
	    iconType: IconType;
	    /**
	     * Manually change icon size
	     */
	    iconSize?: IconSize;
	    /**
	     * Manually change icon color
	     */
	    iconColor?: IconColor | null;
	}>;
	export type EuiAvatarProps = Omit<HTMLAttributes<HTMLDivElement>, 'color'> & CommonProps & _EuiAvatarContent & {
	    /**
	     * Full name of avatar for title attribute and calculating initial if not provided
	     */
	    name: string;
	    /**
	     * Accepts hex values like `#FFFFFF`, `#000` otherwise a viz palette color will be assigned.
	     * Or pass `'plain'` for an empty shade or `null` to remove entirely and the text/icon color will `inherit`
	     */
	    color?: string | 'plain' | null;
	    /**
	     * The type of avatar mainly controlling the shape.
	     * `user` = circle
	     * `space` = rounded square
	     */
	    type?: EuiAvatarType;
	    size?: EuiAvatarSize;
	    /**
	     * Grays out the avatar to simulate being disabled
	     */
	    isDisabled?: boolean;
	};
	export const EuiAvatar: FunctionComponent<EuiAvatarProps>;
	export const checkValidColor: (color: EuiAvatarProps['color']) => void;
	export {};

}
declare module '@elastic/eui/src/components/avatar' {
	export { EuiAvatar, EuiAvatarProps, checkValidColor } from '@elastic/eui/src/components/avatar/avatar';

}
declare module '@elastic/eui/src/components/badge/badge' {
	import { AriaAttributes, FunctionComponent, HTMLAttributes, MouseEventHandler } from 'react';
	import { CommonProps, ExclusiveUnion, PropsOf } from '@elastic/eui/src/components/common';
	import { EuiIcon, IconColor, IconType } from '@elastic/eui/src/components/icon'; type IconSide = 'left' | 'right'; type WithButtonProps = {
	    /**
	     * Will apply an onclick to the badge itself
	     */
	    onClick: MouseEventHandler<HTMLButtonElement>;
	    /**
	     * Aria label applied to the onClick button
	     */
	    onClickAriaLabel: AriaAttributes['aria-label'];
	} & Omit<HTMLAttributes<HTMLButtonElement>, 'onClick' | 'color'>; type WithAnchorProps = {
	    href: string;
	    target?: string;
	    rel?: string;
	} & Omit<HTMLAttributes<HTMLAnchorElement>, 'href' | 'color' | 'onClick'>; type WithSpanProps = Omit<HTMLAttributes<HTMLSpanElement>, 'onClick' | 'color'>;
	interface WithIconOnClick {
	    /**
	     * Will apply an onclick to icon within the badge
	     */
	    iconOnClick: MouseEventHandler<HTMLButtonElement>;
	    /**
	     * Aria label applied to the iconOnClick button
	     */
	    iconOnClickAriaLabel: AriaAttributes['aria-label'];
	}
	export type EuiBadgeProps = {
	    /**
	     * Accepts any string from our icon library
	     */
	    iconType?: IconType;
	    /**
	     * The side of the badge the icon should sit
	     */
	    iconSide?: IconSide;
	    /**
	     * Accepts either our palette colors (primary, success ..etc) or a hex value `#FFFFFF`, `#000`.
	     */
	    color?: IconColor;
	    /**
	     * Will override any color passed through the `color` prop.
	     */
	    isDisabled?: boolean;
	    /**
	     * Props passed to the close button.
	     */
	    closeButtonProps?: Partial<PropsOf<EuiIcon>>;
	} & CommonProps & ExclusiveUnion<WithIconOnClick, {}> & ExclusiveUnion<ExclusiveUnion<WithButtonProps, WithAnchorProps>, WithSpanProps>;
	export const COLORS: string[];
	export const ICON_SIDES: import ("@elastic/eui/src/components/button/button_content").ButtonContentIconSide[];
	export const EuiBadge: FunctionComponent<EuiBadgeProps>;
	export {};

}
declare module '@elastic/eui/src/components/badge/beta_badge/beta_badge' {
	import { AriaAttributes, FunctionComponent, HTMLAttributes, MouseEventHandler, ReactNode } from 'react';
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common';
	import { ToolTipPositions } from '@elastic/eui/src/components/tool_tip';
	import { IconType } from '@elastic/eui/src/components/icon'; const colorToClassMap: {
	    accent: string;
	    subdued: string;
	    hollow: string;
	};
	export const COLORS: BetaBadgeColor[];
	export type BetaBadgeColor = keyof typeof colorToClassMap;
	export type BetaBadgeSize = 's' | 'm';
	export const sizeToClassMap: {
	    [size in BetaBadgeSize]: string | null;
	};
	export const SIZES: ("s" | "m")[]; type WithButtonProps = {
	    /**
	     * Will apply an onclick to the badge itself
	     */
	    onClick?: MouseEventHandler<HTMLButtonElement>;
	    /**
	     * Aria label applied to the onClick button
	     */
	    onClickAriaLabel?: AriaAttributes['aria-label'];
	} & Omit<HTMLAttributes<HTMLButtonElement>, 'onClick' | 'color'>; type WithAnchorProps = {
	    href: string;
	    target?: string;
	    rel?: string;
	} & Omit<HTMLAttributes<HTMLAnchorElement>, 'href' | 'color' | 'onClick'>; type WithSpanProps = Omit<HTMLAttributes<HTMLSpanElement>, 'onClick' | 'color' | 'title'>; type LabelAsNode = ExclusiveUnion<{
	    title: string;
	    tooltipContent?: ReactNode;
	}, {
	    tooltipContent: ReactNode;
	    title?: string;
	}> & {
	    label: ReactNode;
	};
	interface LabelAsString {
	    /**
	     * One word label like "Beta" or "Lab"
	     */
	    label: string;
	} type BadgeProps = {
	    /**
	     * Supply an icon type if the badge should just be an icon
	     */
	    iconType?: IconType;
	    /**
	     * One word label like "Beta" or "Lab"
	     */
	    label: ReactNode;
	    /**
	     * Content for the tooltip
	     */
	    tooltipContent?: ReactNode;
	    /**
	     * Custom position of the tooltip
	     */
	    tooltipPosition?: ToolTipPositions;
	    /**
	     * Optional title will be supplied as tooltip title or title attribute
	     * otherwise the label will be used
	     */
	    title?: string;
	    /**
	     * Accepts accent, subdued and hollow.
	     */
	    color?: BetaBadgeColor;
	    size?: BetaBadgeSize;
	} & ExclusiveUnion<LabelAsNode, LabelAsString>;
	export type EuiBetaBadgeProps = CommonProps & ExclusiveUnion<ExclusiveUnion<WithButtonProps, WithAnchorProps>, WithSpanProps> & BadgeProps;
	export const EuiBetaBadge: FunctionComponent<EuiBetaBadgeProps>;
	export {};

}
declare module '@elastic/eui/src/components/badge/beta_badge' {
	export { EuiBetaBadge, EuiBetaBadgeProps } from '@elastic/eui/src/components/badge/beta_badge/beta_badge';

}
declare module '@elastic/eui/src/components/badge/notification_badge/badge_notification' {
	import { HTMLAttributes, ReactNode, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; const colorToClassMap: {
	    accent: null;
	    subdued: string;
	};
	export const COLORS: BadgeNotificationColor[];
	export type BadgeNotificationColor = keyof typeof colorToClassMap; const sizeToClassNameMap: {
	    s: null;
	    m: string;
	};
	export const SIZES: BadgeNotificationSize[];
	export type BadgeNotificationSize = keyof typeof sizeToClassNameMap;
	export interface EuiNotificationBadgeProps extends CommonProps, Omit<HTMLAttributes<HTMLSpanElement>, 'color'> {
	    /**
	     * ReactNode to render as this component's content
	     */
	    children: ReactNode;
	    size?: BadgeNotificationSize;
	    color?: BadgeNotificationColor;
	}
	export const EuiNotificationBadge: FunctionComponent<EuiNotificationBadgeProps>;
	export {};

}
declare module '@elastic/eui/src/components/badge/notification_badge' {
	export { EuiNotificationBadge, EuiNotificationBadgeProps, } from '@elastic/eui/src/components/badge/notification_badge/badge_notification';

}
declare module '@elastic/eui/src/components/badge/badge_group/badge_group' {
	import React, { ReactNode } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; const gutterSizeToClassNameMap: {
	    none: null;
	    xs: string;
	    s: string;
	};
	export const GUTTER_SIZES: ("s" | "xs" | "none")[]; type BadgeGroupGutterSize = keyof typeof gutterSizeToClassNameMap;
	export interface EuiBadgeGroupProps {
	    /**
	     * Space between badges
	     */
	    gutterSize?: BadgeGroupGutterSize;
	    /**
	     * Should be a list of EuiBadge's but can also be any other element
	     * Will apply an extra class to add spacing
	     */
	    children?: ReactNode;
	}
	export const EuiBadgeGroup: React.ForwardRefExoticComponent<CommonProps & React.HTMLAttributes<HTMLDivElement> & EuiBadgeGroupProps & React.RefAttributes<HTMLDivElement>>;
	export {};

}
declare module '@elastic/eui/src/components/badge/badge_group' {
	export { EuiBadgeGroup, EuiBadgeGroupProps } from '@elastic/eui/src/components/badge/badge_group/badge_group';

}
declare module '@elastic/eui/src/components/badge' {
	export { EuiBadge, EuiBadgeProps } from '@elastic/eui/src/components/badge/badge';
	export { EuiBetaBadge, EuiBetaBadgeProps } from '@elastic/eui/src/components/badge/beta_badge';
	export { EuiNotificationBadge } from '@elastic/eui/src/components/badge/notification_badge';
	export { EuiBadgeGroup, EuiBadgeGroupProps } from '@elastic/eui/src/components/badge/badge_group';

}
declare module '@elastic/eui/src/components/beacon/beacon' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiBeaconProps = Omit<HTMLAttributes<HTMLDivElement>, 'children'> & CommonProps & {
	    /**
	     * Height and width of the center circle. Value is passed directly to the `style` attribute
	     */
	    size?: number | string;
	};
	export const EuiBeacon: FunctionComponent<EuiBeaconProps>;

}
declare module '@elastic/eui/src/components/beacon' {
	export { EuiBeacon, EuiBeaconProps } from '@elastic/eui/src/components/beacon/beacon';

}
declare module '@elastic/eui/src/components/bottom_bar/bottom_bar' {
	import React, { CSSProperties, HTMLAttributes } from 'react';
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common'; type BottomBarPaddingSize = 'none' | 's' | 'm' | 'l';
	export const paddingSizeToClassNameMap: {
	    [value in BottomBarPaddingSize]: string | null;
	};
	export const POSITIONS: readonly ["static", "fixed", "sticky"];
	export type _BottomBarPosition = typeof POSITIONS[number]; type _BottomBarExclusivePositions = ExclusiveUnion<{
	    position?: 'fixed';
	    /**
	     * Whether to wrap in an EuiPortal which appends the component to the body element.
	     * Only works if `position` is `fixed`.
	     */
	    usePortal?: boolean;
	    /**
	     * Whether the component should apply padding on the document body element to afford for its own displacement height.
	     * Only works if `usePortal` is true and `position` is `fixed`.
	     */
	    affordForDisplacement?: boolean;
	}, {
	    /**
	     * How to position the bottom bar against its parent.
	     */
	    position: 'static' | 'sticky';
	}>;
	export type EuiBottomBarProps = CommonProps & HTMLAttributes<HTMLElement> & _BottomBarExclusivePositions & {
	    /**
	     * Padding applied to the bar. Default is 'm'.
	     */
	    paddingSize?: BottomBarPaddingSize;
	    /**
	     * Optional class applied to the body element on mount.
	     */
	    bodyClassName?: string;
	    /**
	     * Customize the screen reader heading that helps users find this control. Default is 'Page level controls'.
	     */
	    landmarkHeading?: string;
	    /**
	     * Starting vertical position when `fixed` position.
	     * Offset from the top of the window when `sticky` position.
	     * Has no affect on `static` positions.
	     */
	    top?: CSSProperties['top'];
	    /**
	     * Ending horizontal position when `fixed` position.
	     * Has no affect on `static` or `sticky` positions.
	     */
	    right?: CSSProperties['right'];
	    /**
	     * Starting vertical position when `fixed` position.
	     * Offset from the bottom of the window when `sticky` position.
	     * Has no affect on `static` positions.
	     */
	    bottom?: CSSProperties['bottom'];
	    /**
	     * Starting horizontal position when `fixed` position.
	     * Has no affect on `static` or `sticky` positions.
	     */
	    left?: CSSProperties['left'];
	};
	export const EuiBottomBar: React.ForwardRefExoticComponent<(CommonProps & React.HTMLAttributes<HTMLElement> & import ("@elastic/eui/src/components/common").DisambiguateSet<{
	    position?: "fixed" | undefined;
	    /**
	     * Whether to wrap in an EuiPortal which appends the component to the body element.
	     * Only works if `position` is `fixed`.
	     */
	    usePortal?: boolean | undefined;
	    /**
	     * Whether the component should apply padding on the document body element to afford for its own displacement height.
	     * Only works if `usePortal` is true and `position` is `fixed`.
	     */
	    affordForDisplacement?: boolean | undefined;
	}, {
	    /**
	     * How to position the bottom bar against its parent.
	     */
	    position: 'static' | 'sticky';
	}> & {
	    /**
	     * How to position the bottom bar against its parent.
	     */
	    position: 'static' | 'sticky';
	} & {
	    /**
	     * Padding applied to the bar. Default is 'm'.
	     */
	    paddingSize?: "s" | "m" | "l" | "none" | undefined;
	    /**
	     * Optional class applied to the body element on mount.
	     */
	    bodyClassName?: string | undefined;
	    /**
	     * Customize the screen reader heading that helps users find this control. Default is 'Page level controls'.
	     */
	    landmarkHeading?: string | undefined;
	    /**
	     * Starting vertical position when `fixed` position.
	     * Offset from the top of the window when `sticky` position.
	     * Has no affect on `static` positions.
	     */
	    top?: CSSProperties['top'];
	    /**
	     * Ending horizontal position when `fixed` position.
	     * Has no affect on `static` or `sticky` positions.
	     */
	    right?: CSSProperties['right'];
	    /**
	     * Starting vertical position when `fixed` position.
	     * Offset from the bottom of the window when `sticky` position.
	     * Has no affect on `static` positions.
	     */
	    bottom?: CSSProperties['bottom'];
	    /**
	     * Starting horizontal position when `fixed` position.
	     * Has no affect on `static` or `sticky` positions.
	     */
	    left?: CSSProperties['left'];
	} & React.RefAttributes<HTMLElement>) | (CommonProps & React.HTMLAttributes<HTMLElement> & import ("@elastic/eui/src/components/common").DisambiguateSet<{
	    /**
	     * How to position the bottom bar against its parent.
	     */
	    position: 'static' | 'sticky';
	}, {
	    position?: "fixed" | undefined;
	    /**
	     * Whether to wrap in an EuiPortal which appends the component to the body element.
	     * Only works if `position` is `fixed`.
	     */
	    usePortal?: boolean | undefined;
	    /**
	     * Whether the component should apply padding on the document body element to afford for its own displacement height.
	     * Only works if `usePortal` is true and `position` is `fixed`.
	     */
	    affordForDisplacement?: boolean | undefined;
	}> & {
	    position?: "fixed" | undefined;
	    /**
	     * Whether to wrap in an EuiPortal which appends the component to the body element.
	     * Only works if `position` is `fixed`.
	     */
	    usePortal?: boolean | undefined;
	    /**
	     * Whether the component should apply padding on the document body element to afford for its own displacement height.
	     * Only works if `usePortal` is true and `position` is `fixed`.
	     */
	    affordForDisplacement?: boolean | undefined;
	} & {
	    /**
	     * Padding applied to the bar. Default is 'm'.
	     */
	    paddingSize?: "s" | "m" | "l" | "none" | undefined;
	    /**
	     * Optional class applied to the body element on mount.
	     */
	    bodyClassName?: string | undefined;
	    /**
	     * Customize the screen reader heading that helps users find this control. Default is 'Page level controls'.
	     */
	    landmarkHeading?: string | undefined;
	    /**
	     * Starting vertical position when `fixed` position.
	     * Offset from the top of the window when `sticky` position.
	     * Has no affect on `static` positions.
	     */
	    top?: CSSProperties['top'];
	    /**
	     * Ending horizontal position when `fixed` position.
	     * Has no affect on `static` or `sticky` positions.
	     */
	    right?: CSSProperties['right'];
	    /**
	     * Starting vertical position when `fixed` position.
	     * Offset from the bottom of the window when `sticky` position.
	     * Has no affect on `static` positions.
	     */
	    bottom?: CSSProperties['bottom'];
	    /**
	     * Starting horizontal position when `fixed` position.
	     * Has no affect on `static` or `sticky` positions.
	     */
	    left?: CSSProperties['left'];
	} & React.RefAttributes<HTMLElement>)>;
	export {};

}
declare module '@elastic/eui/src/components/bottom_bar' {
	export { EuiBottomBar, EuiBottomBarProps } from '@elastic/eui/src/components/bottom_bar/bottom_bar';

}
declare module '@elastic/eui/src/components/link/link' {
	import React, { AnchorHTMLAttributes, ButtonHTMLAttributes, MouseEventHandler } from 'react';
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common';
	export type EuiLinkType = 'button' | 'reset' | 'submit';
	export type EuiLinkColor = 'primary' | 'subdued' | 'success' | 'accent' | 'danger' | 'warning' | 'text' | 'ghost';
	export const COLORS: EuiLinkColor[];
	export interface LinkButtonProps {
	    type?: EuiLinkType;
	    /**
	     * Any of our named colors.
	     */
	    color?: EuiLinkColor;
	    onClick?: MouseEventHandler<HTMLButtonElement>;
	}
	export interface EuiLinkButtonProps extends CommonProps, Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'type' | 'color' | 'onClick'>, LinkButtonProps {
	}
	export interface LinkAnchorProps {
	    type?: EuiLinkType;
	    /**
	     * Any of our named colors.
	     */
	    color?: EuiLinkColor;
	    /**
	     * Set to true to show an icon indicating that it is an external link;
	     * Defaults to true if `target="_blank"`
	     */
	    external?: boolean;
	}
	export interface EuiLinkAnchorProps extends CommonProps, Omit<AnchorHTMLAttributes<HTMLAnchorElement>, 'type' | 'color' | 'onClick'>, LinkAnchorProps {
	    onClick?: MouseEventHandler<HTMLAnchorElement>;
	}
	export type EuiLinkProps = ExclusiveUnion<EuiLinkButtonProps, EuiLinkAnchorProps>; const EuiLink: React.ForwardRefExoticComponent<(import ("@elastic/eui/src/components/common").DisambiguateSet<EuiLinkButtonProps, EuiLinkAnchorProps> & EuiLinkAnchorProps & React.RefAttributes<HTMLAnchorElement | HTMLButtonElement>) | (import ("@elastic/eui/src/components/common").DisambiguateSet<EuiLinkAnchorProps, EuiLinkButtonProps> & EuiLinkButtonProps & React.RefAttributes<HTMLAnchorElement | HTMLButtonElement>)>;
	export { EuiLink };

}
declare module '@elastic/eui/src/components/link' {
	export { EuiLink, EuiLinkColor, EuiLinkProps, EuiLinkType, EuiLinkAnchorProps, EuiLinkButtonProps, } from '@elastic/eui/src/components/link/link';

}
declare module '@elastic/eui/src/components/breadcrumbs/breadcrumbs' {
	import { AriaAttributes, FunctionComponent, MouseEventHandler, ReactNode } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiBreakpointSize } from '@elastic/eui/src/services/breakpoint';
	export type EuiBreadcrumbResponsiveMaxCount = {
	    [key in EuiBreakpointSize]?: number;
	};
	export type EuiBreadcrumb = CommonProps & {
	    /**
	     * Visible label of the breadcrumb
	     */
	    text: ReactNode;
	    href?: string;
	    onClick?: MouseEventHandler<HTMLAnchorElement>;
	    /**
	     * Force a max-width on the breadcrumb text
	     */
	    truncate?: boolean;
	    /**
	     * Override the existing `aria-current` which defaults to `page` for the last breadcrumb
	     */
	    'aria-current'?: AriaAttributes['aria-current'];
	};
	export type EuiBreadcrumbsProps = CommonProps & {
	    /**
	     * Hides extra (above the max) breadcrumbs under a collapsed item as the window gets smaller.
	     * Pass a custom #EuiBreadcrumbResponsiveMaxCount object to change the number of breadcrumbs to show at the particular breakpoints.
	     *
	     * Pass `false` to turn this behavior off.
	     *
	     * Default: `{ xs: 1, s: 2, m: 4 }`
	     */
	    responsive?: boolean | EuiBreadcrumbResponsiveMaxCount;
	    /**
	     * Forces all breadcrumbs to single line and
	     * truncates each breadcrumb to a particular width,
	     * except for the last item
	     */
	    truncate?: boolean;
	    /**
	     * Collapses the inner items past the maximum set here
	     * into a single ellipses item.
	     * Omitting or passing a `0` value will show all breadcrumbs.
	     */
	    max?: number | null;
	    /**
	     * The array of individual #EuiBreadcrumb items
	     */
	    breadcrumbs: EuiBreadcrumb[];
	};
	export const EuiBreadcrumbs: FunctionComponent<EuiBreadcrumbsProps>;

}
declare module '@elastic/eui/src/components/breadcrumbs' {
	export { EuiBreadcrumb, EuiBreadcrumbs, EuiBreadcrumbsProps, EuiBreadcrumbResponsiveMaxCount, } from '@elastic/eui/src/components/breadcrumbs/breadcrumbs';

}
declare module '@elastic/eui/src/components/card/card_select' {
	import { FunctionComponent } from 'react';
	import { EuiButtonEmptyColor, EuiButtonEmptyProps } from '@elastic/eui/src/components/button/button_empty';
	export type EuiCardSelectProps = EuiButtonEmptyProps & {
	    /**
	     * Is in the selected state
	     */
	    isSelected?: boolean;
	    isDisabled?: boolean;
	};
	export const EuiCardSelect: FunctionComponent<EuiCardSelectProps>;
	export function euiCardSelectableColor(color: EuiButtonEmptyColor | undefined, isSelected: boolean | undefined): string;

}
declare module '@elastic/eui/src/components/card/card' {
	import React, { FunctionComponent, ReactElement, ReactNode, HTMLAttributes } from 'react';
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common';
	import { EuiBetaBadgeProps } from '@elastic/eui/src/components/badge/beta_badge';
	import { EuiIconProps } from '@elastic/eui/src/components/icon';
	import { EuiCardSelectProps } from '@elastic/eui/src/components/card/card_select';
	import { EuiPanelProps } from '@elastic/eui/src/components/panel'; type CardAlignment = 'left' | 'center' | 'right';
	export const ALIGNMENTS: import ("@elastic/eui/src/services").HorizontalAlignment[];
	export const LAYOUT_ALIGNMENTS: ("horizontal" | "vertical")[]; type EuiCardPropsLayout = ExclusiveUnion<{
	    layout?: 'vertical';
	    /**
	     * Changes alignment of the title and description
	     */
	    textAlign?: CardAlignment;
	    /**
	     * Accepts any combination of elements
	     */
	    footer?: ReactNode;
	    /**
	     * Accepts a url in string form or ReactElement for a custom image component
	     */
	    image?: string | ReactElement;
	}, {
	    /**
	     * Change to "horizontal" if you need the icon to be left of the content.
	     * Horizontal layouts cannot be used in conjunction with `image`, `footer`, or `textAlign`.
	     */
	    layout: 'horizontal';
	}>;
	export type EuiCardProps = Omit<CommonProps, 'aria-label'> & Omit<HTMLAttributes<HTMLDivElement>, 'color' | 'title' | 'onClick'> & EuiCardPropsLayout & {
	    /**
	     * Cards are required to have at least a title and a description and/or children
	     */
	    title: NonNullable<ReactNode>;
	    /**
	     * Determines the title's heading element
	     */
	    titleElement?: 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'span';
	    /**
	     * Determines the title's size, matching that of EuiTitle.
	     * Though, card titles can't be too large or small relative to the description text.
	     */
	    titleSize?: 's' | 'xs';
	    /**
	     * Placed within a small EuiText `<p>` tag
	     */
	    description?: NonNullable<ReactNode>;
	    /**
	     * Accepts an `<EuiIcon>` node or `null`
	     */
	    icon?: ReactElement<EuiIconProps> | null;
	    /**
	     * Custom children
	     */
	    children?: ReactNode;
	    /**
	     * Use only if you want to forego a button in the footer and make the whole card clickable
	     */
	    onClick?: React.MouseEventHandler<HTMLButtonElement> | React.MouseEventHandler<HTMLAnchorElement>;
	    isDisabled?: boolean;
	    href?: string;
	    target?: string;
	    rel?: string;
	    /**
	     * Adds a badge to top of the card to label it as "Beta" or other non-GA state.
	     * Accepts all the props of [EuiBetaBadge](#/display/badge#beta-badge-type), where `label` is required.
	     */
	    betaBadgeProps?: Partial<EuiBetaBadgeProps>;
	    /**
	     * Matches to the color property of EuiPanel. If defined, removes any border & shadow.
	     * Leave as `undefined` to display as a default panel.
	     * Selectable cards will always display as a default panel.
	     */
	    display?: EuiPanelProps['color'];
	    /**
	     * Padding applied around the content of the card
	     */
	    paddingSize?: EuiPanelProps['paddingSize'];
	    /**
	     * Adds a button to the bottom of the card to allow for in-place selection
	     */
	    selectable?: EuiCardSelectProps;
	    /**
	     * Use a border style of card instead of shadow
	     */
	    hasBorder?: EuiPanelProps['hasBorder'];
	} & ({
	    description?: NonNullable<ReactNode>;
	    children: ReactNode;
	} | {
	    description: NonNullable<ReactNode>;
	});
	export const EuiCard: FunctionComponent<EuiCardProps>;
	export {};

}
declare module '@elastic/eui/src/components/card/checkable_card/checkable_card' {
	import { FunctionComponent, ReactNode } from 'react';
	import { EuiRadioProps, EuiCheckboxProps } from '@elastic/eui/src/components/form';
	import { _EuiSplitPanelOuterProps } from '@elastic/eui/src/components/panel/split_panel';
	interface EuiCheckableCardBaseProps {
	    id: string;
	    label: ReactNode;
	    hasShadow?: _EuiSplitPanelOuterProps['hasShadow'];
	    hasBorder?: _EuiSplitPanelOuterProps['hasBorder'];
	}
	interface EuiCheckableCardAsRadioProps extends Omit<EuiRadioProps, 'compressed'> {
	    /**
	     * Whether the control is a radio button or checkbox
	     */
	    checkableType?: 'radio';
	}
	interface EuiCheckableCardAsCheckboxProps extends Omit<EuiCheckboxProps, 'compressed'> {
	    checkableType: 'checkbox';
	}
	export type EuiCheckableCardProps = Omit<EuiCheckableCardAsCheckboxProps | EuiCheckableCardAsRadioProps, 'label' | 'id'> & EuiCheckableCardBaseProps;
	export const EuiCheckableCard: FunctionComponent<EuiCheckableCardProps>;
	export {};

}
declare module '@elastic/eui/src/components/card/checkable_card' {
	export { EuiCheckableCard, EuiCheckableCardProps } from '@elastic/eui/src/components/card/checkable_card/checkable_card';

}
declare module '@elastic/eui/src/components/card' {
	export { EuiCard, EuiCardProps } from '@elastic/eui/src/components/card/card';
	export { EuiCheckableCard, EuiCheckableCardProps } from '@elastic/eui/src/components/card/checkable_card';

}
declare module '@elastic/eui/src/components/code/utils' {
	import { ReactElement, ReactNode, HTMLAttributes } from 'react';
	import { AST, RefractorNode } from 'refractor';
	import { CommonProps } from '@elastic/eui/src/components/common';
	/**
	 * Utils shared between EuiCode and EuiCodeBlock
	 */
	export type EuiCodeSharedProps = CommonProps & HTMLAttributes<HTMLElement> & {
	    /**
	     * Sets the syntax highlighting for a specific language
	     * @see [https://prismjs.com/#supported-languages](https://prismjs.com/#supported-languages) for options
	     */
	    language?: string;
	    transparentBackground?: boolean;
	};
	export const SUPPORTED_LANGUAGES: string[];
	export const DEFAULT_LANGUAGE = "text";
	export const checkSupportedLanguage: (language: string) => string;
	export const getHtmlContent: (data: RefractorNode[], children: ReactNode) => ReactElement[] | ReactNode;
	export const isAstElement: (node: RefractorNode) => node is AST.Element;
	export const nodeToHtml: (node: RefractorNode, idx: number, nodes: RefractorNode[], depth?: number) => ReactElement;
	interface LineNumbersConfig {
	    start: number;
	    show: boolean;
	    highlight?: string;
	}
	export const parseLineRanges: (ranges: string) => number[];
	export const highlightByLine: (children: string, language: string, data: LineNumbersConfig) => RefractorNode[];
	export {};

}
declare module '@elastic/eui/src/components/code/code' {
	import { FunctionComponent } from 'react';
	import { EuiCodeSharedProps } from '@elastic/eui/src/components/code/utils';
	export type EuiCodeProps = EuiCodeSharedProps;
	export const EuiCode: FunctionComponent<EuiCodeProps>;

}
declare module '@elastic/eui/src/components/copy/copy' {
	import { Component, ReactElement, ReactNode } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiToolTipProps } from '@elastic/eui/src/components/tool_tip';
	export interface EuiCopyProps extends CommonProps, Partial<Omit<EuiToolTipProps, 'children'>> {
	    /**
	     * Text that will be copied to clipboard when copy function is executed.
	     */
	    textToCopy: string;
	    /**
	     * Tooltip message displayed before copy function is called.
	     */
	    beforeMessage?: ReactNode;
	    /**
	     * Tooltip message displayed after copy function is called that lets the user know that
	     * 'textToCopy' has been copied to the clipboard.
	     */
	    afterMessage?: ReactNode;
	    /**
	     * Function that must return a component. First argument is 'copy' function.
	     * Use your own logic to create the component that users interact with when triggering copy.
	     */
	    children(copy: () => void): ReactElement;
	}
	interface EuiCopyState {
	    tooltipText: ReactNode;
	}
	export class EuiCopy extends Component<EuiCopyProps, EuiCopyState> {
	    static defaultProps: {
	        afterMessage: string;
	    };
	    constructor(props: EuiCopyProps);
	    copy: () => void;
	    resetTooltipText: () => void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/copy' {
	export { EuiCopy, EuiCopyProps } from '@elastic/eui/src/components/copy/copy';

}
declare module '@elastic/eui/src/components/overlay_mask/overlay_mask' {
	/**
	 * NOTE: We can't test this component because Enzyme doesn't support rendering
	 * into portals.
	 */
	import { FunctionComponent, HTMLAttributes, ReactNode } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export interface EuiOverlayMaskInterface {
	    /**
	     * Function that applies to clicking the mask itself and not the children
	     */
	    onClick?: () => void;
	    /**
	     * ReactNode to render as this component's content
	     */
	    children?: ReactNode;
	    /**
	     * Should the mask visually sit above or below the EuiHeader (controlled by z-index)
	     */
	    headerZindexLocation?: 'above' | 'below';
	}
	export type EuiOverlayMaskProps = CommonProps & Omit<Partial<Record<keyof HTMLAttributes<HTMLDivElement>, string>>, keyof EuiOverlayMaskInterface> & EuiOverlayMaskInterface;
	export const EuiOverlayMask: FunctionComponent<EuiOverlayMaskProps>;

}
declare module '@elastic/eui/src/components/overlay_mask' {
	export { EuiOverlayMask, EuiOverlayMaskProps } from '@elastic/eui/src/components/overlay_mask/overlay_mask';

}
declare module '@elastic/eui/src/components/code/code_block' {
	import { FunctionComponent } from 'react';
	import { ExclusiveUnion } from '@elastic/eui/src/components/common';
	import { EuiCodeSharedProps } from '@elastic/eui/src/components/code/utils'; type PaddingSize = 'none' | 's' | 'm' | 'l'; type FontSize = 's' | 'm' | 'l';
	export const FONT_SIZES: FontSize[];
	export const PADDING_SIZES: ("s" | "m" | "l" | "none")[]; type VirtualizedOptionProps = ExclusiveUnion<{
	    isVirtualized: true;
	    overflowHeight: number | string;
	    whiteSpace?: 'pre';
	}, {
	    isVirtualized?: false;
	    overflowHeight?: number | string;
	    whiteSpace?: 'pre' | 'pre-wrap';
	}>;
	interface LineNumbersConfig {
	    start?: number;
	    highlight?: string;
	}
	export type EuiCodeBlockProps = EuiCodeSharedProps & {
	    paddingSize?: PaddingSize;
	    fontSize?: FontSize;
	    /**
	     * Specify how `white-space` inside the element is handled.
	     * `pre` respects line breaks/white space but doesn't force them to wrap the line
	     * `pre-wrap` respects line breaks/white space but does force them to wrap the line when necessary.
	     */
	    whiteSpace?: 'pre' | 'pre-wrap';
	    /**
	     * Displays an icon button to copy the code snippet to the clipboard.
	     */
	    isCopyable?: boolean;
	    /**
	     * Displays line numbers.
	     * Optionally accepts a configuration object for setting the starting number and visual highlighting ranges:
	     * `{ start: 100, highlight: '1, 5-10, 20-30, 40' }`
	     */
	    lineNumbers?: boolean | LineNumbersConfig;
	    /**
	     * Sets the maximum container height.
	     * Accepts a pixel value (`300`) or a percentage (`'100%'`)
	     * Ensure the container has calcuable height when using a percentage
	     */
	    overflowHeight?: number | string;
	    /**
	     * Renders code block lines virtually.
	     * Useful for improving load times of large code blocks.
	     *
	     * When using this configuration, `overflowHeight` is required and
	     * `whiteSpace` can only be `pre`.
	     */
	    isVirtualized?: boolean;
	} & VirtualizedOptionProps;
	export const EuiCodeBlock: FunctionComponent<EuiCodeBlockProps>;
	export {};

}
declare module '@elastic/eui/src/components/code' {
	export { EuiCode, EuiCodeProps } from '@elastic/eui/src/components/code/code';
	export { EuiCodeBlock, EuiCodeBlockProps } from '@elastic/eui/src/components/code/code_block';

}
declare module '@elastic/eui/src/components/collapsible_nav/collapsible_nav_group/collapsible_nav_group' {
	import { FunctionComponent, ReactNode, HTMLAttributes } from 'react';
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common';
	import { EuiAccordionProps } from '@elastic/eui/src/components/accordion';
	import { IconType, IconSize, EuiIconProps } from '@elastic/eui/src/components/icon';
	import { EuiTitleProps } from '@elastic/eui/src/components/title'; type Background = 'none' | 'light' | 'dark';
	export const BACKGROUNDS: Background[];
	export interface EuiCollapsibleNavGroupInterface extends CommonProps {
	    /**
	     * ReactNode to render as this component's content
	     */
	    children?: ReactNode;
	    /**
	     * Sits left of the `title` and only when `title` is present
	     */
	    iconType?: IconType;
	    /**
	     * Change the size of the icon in the `title`
	     */
	    iconSize?: IconSize;
	    /**
	     * Further extend the props applied to EuiIcon
	     */
	    iconProps?: Omit<EuiIconProps, 'type' | 'size'>;
	    /**
	     * Optionally provide an id, otherwise one will be created
	     */
	    id?: string;
	    /**
	     * Adds a background color to the entire group,
	     * applying the correct text color to the `title` only
	     */
	    background?: Background;
	    /**
	     * Determines the title's heading element
	     */
	    titleElement?: 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'span';
	    /**
	     * Title sizing equivalent to EuiTitle, but only `s` and smaller
	     */
	    titleSize?: Exclude<EuiTitleProps['size'], 'l' | 'm'>;
	} type GroupAsAccordion = EuiCollapsibleNavGroupInterface & Omit<EuiAccordionProps, 'id' | 'title'> & {
	    /**
	     * If `true`, wraps children in the body of an accordion,
	     * requiring the prop `title` to be used as the button.
	     * When `false`, simply renders a div without any accordion functionality.
	     */
	    isCollapsible: true;
	    /**
	     * The title gets wrapped in the appropriate heading level
	     * with the option to add an iconType
	     */
	    title: ReactNode;
	}; type GroupAsDiv = EuiCollapsibleNavGroupInterface & {
	    /**
	     * If `true`, wraps children in the body of an accordion,
	     * requiring the prop `title` to be used as the button.
	     * When `false`, simply renders a div without any accordion functionality.
	     */
	    isCollapsible?: false;
	    /**
	     * The title gets wrapped in the appropriate heading level
	     * with the option to add an iconType
	     */
	    title?: ReactNode;
	} & HTMLAttributes<HTMLDivElement>;
	export type EuiCollapsibleNavGroupProps = ExclusiveUnion<GroupAsAccordion, GroupAsDiv>;
	export const EuiCollapsibleNavGroup: FunctionComponent<EuiCollapsibleNavGroupProps>;
	export {};

}
declare module '@elastic/eui/src/components/collapsible_nav/collapsible_nav_group' {
	export { EuiCollapsibleNavGroup, EuiCollapsibleNavGroupProps, } from '@elastic/eui/src/components/collapsible_nav/collapsible_nav_group/collapsible_nav_group';

}
declare module '@elastic/eui/src/components/flyout/flyout' {
	import React, { ComponentPropsWithRef, CSSProperties, ElementType } from 'react';
	import { EuiBreakpointSize } from '@elastic/eui/src/services';
	import { CommonProps, PropsOfElement } from '@elastic/eui/src/components/common';
	import { EuiOverlayMaskProps } from '@elastic/eui/src/components/overlay_mask';
	import { EuiButtonIconPropsForButton } from '@elastic/eui/src/components/button';
	export const TYPES: ("push" | "overlay")[]; type _EuiFlyoutType = typeof TYPES[number];
	export const SIDES: import ("@elastic/eui/src/components/button/button_content").ButtonContentIconSide[]; type _EuiFlyoutSide = typeof SIDES[number];
	export const SIZES: ("s" | "m" | "l")[];
	export type EuiFlyoutSize = typeof SIZES[number];
	export const PADDING_SIZES: ("s" | "m" | "l" | "none")[]; type _EuiFlyoutPaddingSize = typeof PADDING_SIZES[number];
	interface _EuiFlyoutProps {
	    onClose: () => void;
	    /**
	     * Defines the width of the panel.
	     * Pass a predefined size of `s | m | l`, or pass any number/string compatible with the CSS `width` attribute
	     */
	    size?: EuiFlyoutSize | CSSProperties['width'];
	    /**
	     * Sets the max-width of the panel,
	     * set to `true` to use the default size,
	     * set to `false` to not restrict the width,
	     * set to a number for a custom width in px,
	     * set to a string for a custom width in custom measurement.
	     */
	    maxWidth?: boolean | number | string;
	    /**
	     * Customize the padding around the content of the flyout header, body and footer
	     */
	    paddingSize?: _EuiFlyoutPaddingSize;
	    /**
	     * Adds an EuiOverlayMask and wraps in an EuiPortal
	     */
	    ownFocus?: boolean;
	    /**
	     * Hides the default close button. You must provide another close button somewhere within the flyout.
	     */
	    hideCloseButton?: boolean;
	    /**
	     * Specify an aria-label for the close button of the flyout.
	     * Default is `'Close this dialog'`.
	     */
	    closeButtonAriaLabel?: string;
	    /**
	     * Extends EuiButtonIconProps onto the close button
	     */
	    closeButtonProps?: Partial<EuiButtonIconPropsForButton>;
	    /**
	     * Position of close button.
	     * `inside`: Floating to just inside the flyout, always top right;
	     * `outside`: Floating just outside the flyout near the top (side dependent on `side`). Helpful when the close button may cover other interactable content.
	     */
	    closeButtonPosition?: 'inside' | 'outside';
	    /**
	     * Adjustments to the EuiOverlayMask that is added when `ownFocus = true`
	     */
	    maskProps?: EuiOverlayMaskProps;
	    /**
	     * How to display the the flyout in relation to the body content;
	     * `push` keeps it visible, pushing the `<body>` content via padding
	     */
	    type?: _EuiFlyoutType;
	    /**
	     * Forces this interaction on the mask overlay or body content.
	     * Defaults depend on `ownFocus` and `type` values
	     */
	    outsideClickCloses?: boolean;
	    /**
	     * Which side of the window to attach to.
	     * The `left` option should only be used for navigation.
	     */
	    side?: _EuiFlyoutSide;
	    /**
	     * Defaults to `dialog` which is best for most cases of the flyout.
	     * Otherwise pass in your own, aria-role, or `null` to remove it and use the semantic `as` element instead
	     */
	    role?: null | string;
	    /**
	     * Named breakpoint or pixel value for customizing the minimum window width to enable the `push` type
	     */
	    pushMinBreakpoint?: EuiBreakpointSize | number;
	    style?: CSSProperties;
	} const defaultElement = "div"; type Props<T extends ElementType> = CommonProps & {
	    /**
	     * Sets the HTML element for `EuiFlyout`
	     */
	    as?: T;
	} & _EuiFlyoutProps & Omit<PropsOfElement<T>, keyof _EuiFlyoutProps>;
	export type EuiFlyoutProps<T extends ElementType = typeof defaultElement> = Props<T> & Omit<ComponentPropsWithRef<T>, keyof Props<T>>;
	export const EuiFlyout: <T extends React.ElementType<any> = "div">(props: EuiFlyoutProps<T>) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/flyout/flyout_body' {
	import { FunctionComponent, HTMLAttributes, ReactNode } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiFlyoutBodyProps = FunctionComponent<HTMLAttributes<HTMLDivElement> & CommonProps & {
	    /**
	     * Use to display a banner at the top of the body. It is suggested to use `EuiCallOut` for it.
	     */
	    banner?: ReactNode;
	}>;
	export const EuiFlyoutBody: EuiFlyoutBodyProps;

}
declare module '@elastic/eui/src/components/flyout/flyout_footer' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiFlyoutFooterProps = FunctionComponent<HTMLAttributes<HTMLDivElement> & CommonProps>;
	export const EuiFlyoutFooter: EuiFlyoutFooterProps;

}
declare module '@elastic/eui/src/components/flyout/flyout_header' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiFlyoutHeaderProps = FunctionComponent<HTMLAttributes<HTMLDivElement> & CommonProps & {
	    hasBorder?: boolean;
	}>;
	export const EuiFlyoutHeader: EuiFlyoutHeaderProps;

}
declare module '@elastic/eui/src/components/flyout' {
	export { EuiFlyout, EuiFlyoutProps, EuiFlyoutSize } from '@elastic/eui/src/components/flyout/flyout';
	export { EuiFlyoutBody, EuiFlyoutBodyProps } from '@elastic/eui/src/components/flyout/flyout_body';
	export { EuiFlyoutFooter, EuiFlyoutFooterProps } from '@elastic/eui/src/components/flyout/flyout_footer';
	export { EuiFlyoutHeader, EuiFlyoutHeaderProps } from '@elastic/eui/src/components/flyout/flyout_header';

}
declare module '@elastic/eui/src/components/collapsible_nav/collapsible_nav' {
	import { FunctionComponent, ReactElement, ReactNode } from 'react';
	import { EuiFlyoutProps } from '@elastic/eui/src/components/flyout';
	export type EuiCollapsibleNavProps = Omit<EuiFlyoutProps, 'closeButtonAriaLabel' | 'type' | 'pushBreakpoint'> & {
	    /**
	     * ReactNode to render as this component's content
	     */
	    children?: ReactNode;
	    /**
	     * Shows the navigation flyout
	     */
	    isOpen?: boolean;
	    /**
	     * Keeps navigation flyout visible and push `<body>` content via padding
	     */
	    isDocked?: boolean;
	    /**
	     * Named breakpoint or pixel value for customizing the minimum window width to enable docking
	     */
	    dockedBreakpoint?: EuiFlyoutProps['pushMinBreakpoint'];
	    /**
	     * Button for controlling visible state of the nav
	     */
	    button?: ReactElement;
	    /**
	     * Keeps the display of toggle button when in docked state
	     */
	    showButtonIfDocked?: boolean;
	};
	export const EuiCollapsibleNav: FunctionComponent<EuiCollapsibleNavProps>;

}
declare module '@elastic/eui/src/components/collapsible_nav' {
	export { EuiCollapsibleNavGroup, EuiCollapsibleNavGroupProps, } from '@elastic/eui/src/components/collapsible_nav/collapsible_nav_group';
	export { EuiCollapsibleNav, EuiCollapsibleNavProps } from '@elastic/eui/src/components/collapsible_nav/collapsible_nav';

}
declare module '@elastic/eui/src/components/color_picker/color_palette_display/color_palette_display_fixed' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiColorPaletteDisplayShared } from '@elastic/eui/src/components/color_picker/color_palette_display/color_palette_display';
	export interface EuiColorPaletteDisplayFixedProps extends HTMLAttributes<HTMLSpanElement>, CommonProps, EuiColorPaletteDisplayShared {
	}
	export const EuiColorPaletteDisplayFixed: FunctionComponent<EuiColorPaletteDisplayFixedProps>;

}
declare module '@elastic/eui/src/components/color_picker/color_palette_display/color_palette_display_gradient' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiColorPaletteDisplayShared } from '@elastic/eui/src/components/color_picker/color_palette_display/color_palette_display';
	export interface EuiColorPaletteDisplayGradientProps extends HTMLAttributes<HTMLSpanElement>, CommonProps, EuiColorPaletteDisplayShared {
	}
	export const EuiColorPaletteDisplayGradient: FunctionComponent<EuiColorPaletteDisplayGradientProps>;

}
declare module '@elastic/eui/src/components/color_picker/color_palette_display/color_palette_display' {
	import { FunctionComponent } from 'react';
	import { ExclusiveUnion } from '@elastic/eui/src/components/common';
	import { ColorStop } from '@elastic/eui/src/components/color_picker/color_stops';
	import { EuiColorPaletteDisplayFixedProps } from '@elastic/eui/src/components/color_picker/color_palette_display/color_palette_display_fixed';
	import { EuiColorPaletteDisplayGradientProps } from '@elastic/eui/src/components/color_picker/color_palette_display/color_palette_display_gradient'; const sizeToClassNameMap: {
	    xs: string;
	    s: string;
	    m: string;
	};
	export const SIZES: ("s" | "xs" | "m")[];
	export type EuiColorPaletteDisplaySize = keyof typeof sizeToClassNameMap;
	export interface EuiColorPaletteDisplayShared {
	    /**
	     * Array of color `strings` or an array of #ColorStop. The stops must be numbers in an ordered range.
	     */
	    palette: string[] | ColorStop[];
	}
	interface DisplayGradient extends EuiColorPaletteDisplayGradientProps {
	    /**
	     *   Specify the type of palette.
	     *  `gradient`: each color fades into the next.
	     */
	    type: 'gradient';
	}
	interface DisplayFixed extends EuiColorPaletteDisplayFixedProps {
	    /**
	     *  `fixed`: individual color blocks.
	     */
	    type?: 'fixed';
	}
	export type EuiColorPaletteDisplayProps = {
	    /**
	     * Height of the palette display
	     */
	    size?: EuiColorPaletteDisplaySize;
	} & ExclusiveUnion<DisplayFixed, DisplayGradient>;
	export const EuiColorPaletteDisplay: FunctionComponent<EuiColorPaletteDisplayProps>;
	export {};

}
declare module '@elastic/eui/src/components/color_picker/color_palette_display' {
	export { EuiColorPaletteDisplay, EuiColorPaletteDisplayProps, } from '@elastic/eui/src/components/color_picker/color_palette_display/color_palette_display';
	export { EuiColorPaletteDisplayFixed, EuiColorPaletteDisplayFixedProps, } from '@elastic/eui/src/components/color_picker/color_palette_display/color_palette_display_fixed';
	export { EuiColorPaletteDisplayGradient, EuiColorPaletteDisplayGradientProps, } from '@elastic/eui/src/components/color_picker/color_palette_display/color_palette_display_gradient';

}
declare module '@elastic/eui/src/components/color_picker/color_palette_picker/color_palette_picker' {
	import { FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { ColorStop } from '@elastic/eui/src/components/color_picker/color_stops';
	import { EuiSuperSelectProps } from '@elastic/eui/src/components/form/super_select';
	export interface EuiColorPalettePickerPaletteTextProps extends CommonProps {
	    /**
	     *  For storing unique value of item
	     */
	    value: string;
	    /**
	     *  The name of your palette
	     */
	    title: string;
	    /**
	     * `text`: a text only option (a title is required).
	     */
	    type: 'text';
	    /**
	     * Array of color `strings` or an array of #ColorStop. The stops must be numbers in an ordered range.
	     */
	    palette?: string[] | ColorStop[];
	}
	export interface EuiColorPalettePickerPaletteFixedProps extends CommonProps {
	    /**
	     *  For storing unique value of item
	     */
	    value: string;
	    /**
	     *  The name of your palette
	     */
	    title?: string;
	    /**
	     * `fixed`: individual color blocks
	     */
	    type: 'fixed';
	    /**
	     * Array of color `strings` or an array of #ColorStop. The stops must be numbers in an ordered range.
	     */
	    palette: string[] | ColorStop[];
	}
	export interface EuiColorPalettePickerPaletteGradientProps extends CommonProps {
	    /**
	     *  For storing unique value of item
	     */
	    value: string;
	    /**
	     *  The name of your palette
	     */
	    title?: string;
	    /**
	     * `gradient`: each color fades into the next
	     */
	    type: 'gradient';
	    /**
	     * Array of color `strings` or an array of #ColorStop. The stops must be numbers in an ordered range.
	     */
	    palette: string[] | ColorStop[];
	}
	export type EuiColorPalettePickerPaletteProps = EuiColorPalettePickerPaletteTextProps | EuiColorPalettePickerPaletteFixedProps | EuiColorPalettePickerPaletteGradientProps;
	export type EuiColorPalettePickerProps<T extends string> = CommonProps & Omit<EuiSuperSelectProps<T>, 'options' | 'itemLayoutAlign' | 'hasDividers'> & {
	    /**
	     *  Specify what should be displayed after a selection: a `palette` or `title`
	     */
	    selectionDisplay?: 'palette' | 'title';
	    /**
	     * An array of one of the following objects: #EuiColorPalettePickerPaletteText, #EuiColorPalettePickerPaletteFixed, #EuiColorPalettePickerPaletteGradient
	     */
	    palettes: EuiColorPalettePickerPaletteProps[];
	};
	export const EuiColorPalettePicker: FunctionComponent<EuiColorPalettePickerProps<string>>;

}
declare module '@elastic/eui/src/components/color_picker/color_palette_picker' {
	export { EuiColorPalettePicker, EuiColorPalettePickerProps, EuiColorPalettePickerPaletteTextProps, EuiColorPalettePickerPaletteFixedProps, EuiColorPalettePickerPaletteGradientProps, EuiColorPalettePickerPaletteProps, } from '@elastic/eui/src/components/color_picker/color_palette_picker/color_palette_picker';

}
declare module '@elastic/eui/src/components/color_picker' {
	export { EuiColorPicker, EuiColorPickerProps } from '@elastic/eui/src/components/color_picker/color_picker';
	export { EuiColorPickerSwatch, EuiColorPickerSwatchProps, } from '@elastic/eui/src/components/color_picker/color_picker_swatch';
	export { EuiHue, EuiHueProps } from '@elastic/eui/src/components/color_picker/hue';
	export { EuiSaturation, EuiSaturationProps } from '@elastic/eui/src/components/color_picker/saturation';
	export { EuiColorStops } from '@elastic/eui/src/components/color_picker/color_stops';
	export { EuiColorStopsProps } from '@elastic/eui/src/components/color_picker/color_stops/color_stops';
	export { EuiColorPalettePicker, EuiColorPalettePickerProps, EuiColorPalettePickerPaletteProps, } from '@elastic/eui/src/components/color_picker/color_palette_picker';
	export { EuiColorPaletteDisplay, EuiColorPaletteDisplayProps, } from '@elastic/eui/src/components/color_picker/color_palette_display';

}
declare module '@elastic/eui/src/components/mark/mark' {
	import { HTMLAttributes, FunctionComponent, ReactNode } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiMarkProps = HTMLAttributes<HTMLElement> & CommonProps & {
	    /**
	     * ReactNode to render as this component's content
	     */
	    children: ReactNode;
	};
	export const EuiMark: FunctionComponent<EuiMarkProps>;

}
declare module '@elastic/eui/src/components/mark' {
	export { EuiMark } from '@elastic/eui/src/components/mark/mark';

}
declare module '@elastic/eui/src/components/highlight/highlight' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiHighlightProps = HTMLAttributes<HTMLSpanElement> & CommonProps & {
	    /**
	     * string to highlight as this component's content
	     */
	    children: string;
	    /**
	     * What to search for
	     */
	    search: string;
	    /**
	     * Should the search be strict or not
	     */
	    strict?: boolean;
	    /**
	     * Should highlight all matches
	     */
	    highlightAll?: boolean;
	};
	export const EuiHighlight: FunctionComponent<EuiHighlightProps>;

}
declare module '@elastic/eui/src/components/highlight' {
	export { EuiHighlight, EuiHighlightProps } from '@elastic/eui/src/components/highlight/highlight';

}
declare module '@elastic/eui/src/components/combo_box/combo_box_options_list/combo_box_title' {
	import { FunctionComponent } from 'react';
	export const EuiComboBoxTitle: FunctionComponent<{}>;

}
declare module '@elastic/eui/src/components/filter_group/filter_select_item' {
	import { ButtonHTMLAttributes, Component } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type FilterChecked = 'on' | 'off';
	export interface EuiFilterSelectItemProps extends CommonProps, ButtonHTMLAttributes<HTMLButtonElement> {
	    checked?: FilterChecked;
	    showIcons?: boolean;
	    isFocused?: boolean;
	}
	export class EuiFilterSelectItem extends Component<EuiFilterSelectItemProps> {
	    static defaultProps: {
	        showIcons: boolean;
	    };
	    buttonRef: HTMLButtonElement | null;
	    state: {
	        hasFocus: boolean;
	    };
	    focus: () => void;
	    hasFocus: () => boolean;
	    render(): JSX.Element;
	}

}
declare module '@elastic/eui/src/components/combo_box/types' {
	import { ButtonHTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export interface EuiComboBoxOptionOption<T = string | number | string[] | undefined> extends CommonProps, Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'value'> {
	    isGroupLabelOption?: boolean;
	    label: string;
	    key?: string;
	    options?: Array<EuiComboBoxOptionOption<T>>;
	    value?: T;
	}
	export type UpdatePositionHandler = (listElement?: RefInstance<HTMLDivElement>) => void;
	export type OptionHandler<T> = (option: EuiComboBoxOptionOption<T>) => void;
	export type RefInstance<T> = T | null;
	export type EuiComboBoxOptionsListPosition = 'top' | 'bottom';
	export interface EuiComboBoxSingleSelectionShape {
	    asPlainText?: boolean;
	}

}
declare module '@elastic/eui/src/components/combo_box/combo_box_options_list/combo_box_options_list' {
	import { Component, ComponentProps, ReactNode, RefCallback } from 'react';
	import { FixedSizeList, ListProps, ListChildComponentProps } from 'react-window';
	import { EuiPanel } from '@elastic/eui/src/components/panel';
	import { EuiFilterSelectItem } from '@elastic/eui/src/components/filter_group/filter_select_item';
	import { htmlIdGenerator } from '@elastic/eui/src/services';
	import { EuiComboBoxOptionOption, EuiComboBoxOptionsListPosition, EuiComboBoxSingleSelectionShape, OptionHandler, RefInstance, UpdatePositionHandler } from '@elastic/eui/src/components/combo_box/types';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiComboBoxOptionsListProps<T> = CommonProps & ComponentProps<typeof EuiPanel> & {
	    'data-test-subj': string;
	    activeOptionIndex?: number;
	    areAllOptionsSelected?: boolean;
	    /**
	     * Creates a custom text option. You can use `{searchValue}` inside your string to better customize your text.
	     * It won't show if there's no onCreateOption.
	     */
	    customOptionText?: string;
	    fullWidth?: boolean;
	    getSelectedOptionForSearchValue?: (searchValue: string, selectedOptions: any[]) => EuiComboBoxOptionOption<T> | undefined;
	    isLoading?: boolean;
	    listRef: RefCallback<HTMLDivElement>;
	    matchingOptions: Array<EuiComboBoxOptionOption<T>>;
	    onCloseList: (event: Event) => void;
	    onCreateOption?: (searchValue: string, options: Array<EuiComboBoxOptionOption<T>>) => boolean | void;
	    onOptionClick?: OptionHandler<T>;
	    onOptionEnterKey?: OptionHandler<T>;
	    onScroll?: ListProps['onScroll'];
	    optionRef: (index: number, node: RefInstance<EuiFilterSelectItem>) => void;
	    /**
	     * Array of EuiComboBoxOptionOption objects. See #EuiComboBoxOptionOption
	     */
	    options: Array<EuiComboBoxOptionOption<T>>;
	    position?: EuiComboBoxOptionsListPosition;
	    renderOption?: (option: EuiComboBoxOptionOption<T>, searchValue: string, OPTION_CONTENT_CLASSNAME: string) => ReactNode;
	    rootId: ReturnType<typeof htmlIdGenerator>;
	    rowHeight: number;
	    scrollToIndex?: number;
	    searchValue: string;
	    selectedOptions: Array<EuiComboBoxOptionOption<T>>;
	    updatePosition: UpdatePositionHandler;
	    width: number;
	    singleSelection?: boolean | EuiComboBoxSingleSelectionShape;
	    delimiter?: string;
	    zIndex?: number;
	};
	export class EuiComboBoxOptionsList<T> extends Component<EuiComboBoxOptionsListProps<T>> {
	    listRefInstance: RefInstance<HTMLDivElement>;
	    listRef: FixedSizeList | null;
	    listBoxRef: HTMLUListElement | null;
	    static defaultProps: {
	        'data-test-subj': string;
	        rowHeight: number;
	    };
	    updatePosition: () => void;
	    componentDidMount(): void;
	    componentDidUpdate(prevProps: EuiComboBoxOptionsListProps<T>): void;
	    componentWillUnmount(): void;
	    closeListOnScroll: (event: Event) => void;
	    listRefCallback: RefCallback<HTMLDivElement>;
	    setListRef: (ref: FixedSizeList | null) => void;
	    setListBoxRef: (ref: HTMLUListElement | null) => void;
	    ListRow: ({ data, index, style }: ListChildComponentProps) => JSX.Element;
	    render(): JSX.Element;
	}

}
declare module '@elastic/eui/src/components/combo_box/combo_box_options_list/combo_box_option' {
	import { Component, HTMLAttributes, KeyboardEventHandler, ReactNode, RefCallback } from 'react';
	import { EuiComboBoxOptionOption, OptionHandler } from '@elastic/eui/src/components/combo_box/types';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export interface EuiComboBoxOptionProps<T> extends CommonProps, Omit<HTMLAttributes<HTMLButtonElement>, 'onClick'> {
	    children?: ReactNode;
	    className?: string;
	    disabled?: boolean;
	    isFocused: boolean;
	    onClick: OptionHandler<T>;
	    onEnterKey: OptionHandler<T>;
	    option: EuiComboBoxOptionOption<T>;
	    optionRef?: RefCallback<HTMLButtonElement>;
	}
	export class EuiComboBoxOption<T> extends Component<EuiComboBoxOptionProps<T>> {
	    onClick: () => void;
	    onKeyDown: KeyboardEventHandler<HTMLButtonElement>;
	    render(): JSX.Element;
	}

}
declare module '@elastic/eui/src/components/combo_box/combo_box_options_list' {
	export { EuiComboBoxOptionsList, EuiComboBoxOptionsListProps, } from '@elastic/eui/src/components/combo_box/combo_box_options_list/combo_box_options_list';
	export { EuiComboBoxOption, EuiComboBoxOptionProps } from '@elastic/eui/src/components/combo_box/combo_box_options_list/combo_box_option';
	export { EuiComboBoxTitle } from '@elastic/eui/src/components/combo_box/combo_box_options_list/combo_box_title';

}
declare module '@elastic/eui/src/components/combo_box/matching_options' {
	import { EuiComboBoxOptionOption } from '@elastic/eui/src/components/combo_box/types';
	export const flattenOptionGroups: <T>(optionsOrGroups: EuiComboBoxOptionOption<T>[]) => EuiComboBoxOptionOption<T>[];
	export const getSelectedOptionForSearchValue: <T>(searchValue: string, selectedOptions: EuiComboBoxOptionOption<T>[], optionKey?: string | undefined) => EuiComboBoxOptionOption<T> | undefined;
	export const getMatchingOptions: <T>(options: EuiComboBoxOptionOption<T>[], selectedOptions: EuiComboBoxOptionOption<T>[], searchValue: string, isPreFiltered: boolean, showPrevSelected: boolean, sortMatchesBy: string) => EuiComboBoxOptionOption<T>[];

}
declare module '@elastic/eui/src/components/combo_box/combo_box_input/combo_box_pill' {
	import { AriaAttributes, Component, MouseEventHandler } from 'react';
	import { EuiComboBoxOptionOption, OptionHandler } from '@elastic/eui/src/components/combo_box/types';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export interface EuiComboBoxPillProps<T> extends CommonProps {
	    asPlainText?: boolean;
	    children?: string;
	    className?: string;
	    color?: string;
	    onClick?: MouseEventHandler<HTMLButtonElement>;
	    onClickAriaLabel?: AriaAttributes['aria-label'];
	    onClose?: OptionHandler<T>;
	    option: EuiComboBoxOptionOption<T>;
	}
	export class EuiComboBoxPill<T> extends Component<EuiComboBoxPillProps<T>> {
	    static defaultProps: {
	        color: string;
	    };
	    onCloseButtonClick: () => void;
	    render(): JSX.Element;
	}

}
declare module '@elastic/eui/src/components/combo_box/combo_box_input/combo_box_input' {
	import { ChangeEventHandler, Component, FocusEventHandler, RefCallback } from 'react';
	import AutosizeInput from 'react-input-autosize';
	import { EuiFormControlLayoutProps } from '@elastic/eui/src/components/form/form_control_layout';
	import { htmlIdGenerator } from '@elastic/eui/src/services';
	import { EuiComboBoxOptionOption, EuiComboBoxSingleSelectionShape, OptionHandler, UpdatePositionHandler } from '@elastic/eui/src/components/combo_box/types';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export interface EuiComboBoxInputProps<T> extends CommonProps {
	    autoSizeInputRef?: RefCallback<AutosizeInput & HTMLInputElement>;
	    compressed: boolean;
	    focusedOptionId?: string;
	    fullWidth?: boolean;
	    hasSelectedOptions: boolean;
	    id?: string;
	    inputRef?: RefCallback<HTMLInputElement>;
	    isDisabled?: boolean;
	    isListOpen: boolean;
	    noIcon: boolean;
	    onBlur?: FocusEventHandler<HTMLInputElement>;
	    onChange?: (searchValue: string) => void;
	    onClear?: () => void;
	    onClick?: () => void;
	    onCloseListClick: () => void;
	    onFocus: FocusEventHandler<HTMLInputElement>;
	    onOpenListClick: () => void;
	    onRemoveOption?: OptionHandler<T>;
	    placeholder?: string;
	    rootId: ReturnType<typeof htmlIdGenerator>;
	    searchValue: string;
	    selectedOptions?: Array<EuiComboBoxOptionOption<T>>;
	    singleSelection?: boolean | EuiComboBoxSingleSelectionShape;
	    toggleButtonRef?: RefCallback<HTMLButtonElement | HTMLSpanElement>;
	    updatePosition: UpdatePositionHandler;
	    value?: string;
	    prepend?: EuiFormControlLayoutProps['prepend'];
	    append?: EuiFormControlLayoutProps['append'];
	    isLoading?: boolean;
	    autoFocus?: boolean;
	    'aria-label'?: string;
	    'aria-labelledby'?: string;
	}
	interface EuiComboBoxInputState {
	    hasFocus: boolean;
	}
	export class EuiComboBoxInput<T> extends Component<EuiComboBoxInputProps<T>, EuiComboBoxInputState> {
	    state: EuiComboBoxInputState;
	    updatePosition: () => void;
	    onFocus: FocusEventHandler<HTMLInputElement>;
	    onBlur: FocusEventHandler<HTMLInputElement>;
	    componentDidUpdate(prevProps: EuiComboBoxInputProps<T>): void;
	    inputOnChange: ChangeEventHandler<HTMLInputElement>;
	    inputRefCallback: (ref: HTMLInputElement & AutosizeInput) => void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/filter_group/filter_group' {
	import { HTMLAttributes, ReactNode, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiFilterGroupProps = HTMLAttributes<HTMLDivElement> & CommonProps & {
	    children?: ReactNode;
	    /**
	     * Expand the whole bar to fill its parent's width
	     */
	    fullWidth?: boolean;
	};
	export const EuiFilterGroup: FunctionComponent<EuiFilterGroupProps>;

}
declare module '@elastic/eui/src/components/filter_group/filter_button' {
	import { FunctionComponent } from 'react';
	import { EuiButtonEmptyProps } from '@elastic/eui/src/components/button/button_empty';
	export type EuiFilterButtonProps = EuiButtonEmptyProps & {
	    /**
	     * Bolds the button if true
	     */
	    hasActiveFilters?: boolean;
	    /**
	     * Pass the total number of filters available and it will
	     * add a subdued notification badge showing the number
	     */
	    numFilters?: number;
	    /**
	     * Pass the number of selected filters and it will
	     * add a bright notification badge showing the number
	     */
	    numActiveFilters?: number;
	    /**
	     * Applies a visual state to the button useful when using with a popover.
	     */
	    isSelected?: boolean;
	    /**
	     * Should the button grow to fill its container, best used for dropdown buttons
	     */
	    grow?: boolean;
	    /**
	     * Remove border after button, good for opposite filters
	     */
	    withNext?: boolean;
	    /**
	     * _DEPRECATED: use `withNext`_
	     * Remove border after button, good for opposite filters
	     */
	    noDivider?: boolean;
	};
	export const EuiFilterButton: FunctionComponent<EuiFilterButtonProps>;

}
declare module '@elastic/eui/src/components/filter_group' {
	export { EuiFilterGroup, EuiFilterGroupProps } from '@elastic/eui/src/components/filter_group/filter_group';
	export { EuiFilterButton, EuiFilterButtonProps } from '@elastic/eui/src/components/filter_group/filter_button';
	export { EuiFilterSelectItem, EuiFilterSelectItemProps, FilterChecked, } from '@elastic/eui/src/components/filter_group/filter_select_item';

}
declare module '@elastic/eui/src/components/combo_box/combo_box' {
	/**
	 * Elements within EuiComboBox which would normally be tabbable (inputs, buttons) have been removed
	 * from the tab order with tabindex={-1} so that we can control the keyboard navigation interface.
	 */
	import { Component, FocusEventHandler, HTMLAttributes, KeyboardEventHandler, RefCallback } from 'react';
	import { EuiComboBoxInputProps } from '@elastic/eui/src/components/combo_box/combo_box_input/combo_box_input';
	import { EuiComboBoxOptionsListProps } from '@elastic/eui/src/components/combo_box/combo_box_options_list/combo_box_options_list';
	import { UpdatePositionHandler, OptionHandler, RefInstance, EuiComboBoxOptionOption, EuiComboBoxOptionsListPosition, EuiComboBoxSingleSelectionShape } from '@elastic/eui/src/components/combo_box/types';
	import { EuiFilterSelectItem } from '@elastic/eui/src/components/filter_group';
	import AutosizeInput from 'react-input-autosize';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiFormControlLayoutProps } from '@elastic/eui/src/components/form'; type DrillProps<T> = Pick<EuiComboBoxOptionsListProps<T>, 'customOptionText' | 'onCreateOption' | 'options' | 'renderOption' | 'selectedOptions'>;
	export interface _EuiComboBoxProps<T> extends CommonProps, Omit<HTMLAttributes<HTMLDivElement>, 'onChange'>, DrillProps<T> {
	    'data-test-subj'?: string;
	    /**
	     * Updates the list of options asynchronously
	     */
	    async: boolean;
	    className?: string;
	    /**
	     * When `true` creates a shorter height input
	     */
	    compressed: boolean;
	    /**
	     * When `true` expands to the entire width available
	     */
	    fullWidth: boolean;
	    id?: string;
	    inputRef?: RefCallback<HTMLInputElement>;
	    /**
	     * Shows a button that quickly clears any input
	     */
	    isClearable: boolean;
	    /**
	     * Disables the input
	     */
	    isDisabled?: boolean;
	    isInvalid?: boolean;
	    /**
	     * Swaps the dropdown options for a loading spinner
	     */
	    isLoading?: boolean;
	    /**
	     * Doesn't show the suggestions list/dropdown
	     */
	    noSuggestions?: boolean;
	    onBlur?: FocusEventHandler<HTMLDivElement>;
	    /**
	     * Called every time the query in the combo box is parsed
	     */
	    onChange?: (options: Array<EuiComboBoxOptionOption<T>>) => void;
	    onFocus?: FocusEventHandler<HTMLDivElement>;
	    onKeyDown?: KeyboardEventHandler<HTMLDivElement>;
	    /**
	     * Called every time the text query in the search box is parsed
	     */
	    onSearchChange?: (searchValue: string, hasMatchingOptions?: boolean) => void;
	    /**
	     * Sets the placeholder of the input
	     */
	    placeholder?: string;
	    /**
	     * Every option must be the same height and must be explicitly set if using a custom render
	     */
	    rowHeight?: number;
	    /**
	     * When `true` only allows the user to select a single option. Set to `{ asPlainText: true }` to not render input selection as pills
	     */
	    singleSelection: boolean | EuiComboBoxSingleSelectionShape;
	    /**
	     * Display matching options by:
	     * `startsWith`: moves items that start with search value to top of the list;
	     * `none`: don't change the sort order of initial object
	     */
	    sortMatchesBy: 'none' | 'startsWith';
	    /**
	     * Creates an input group with element(s) coming before input. It won't show if `singleSelection` is set to `false`.
	     * `string` | `ReactElement` or an array of these
	     */
	    prepend?: EuiFormControlLayoutProps['prepend'];
	    /**
	     * Creates an input group with element(s) coming after input. It won't show if `singleSelection` is set to `false`.
	     * `string` | `ReactElement` or an array of these
	     */
	    append?: EuiFormControlLayoutProps['append'];
	    /**
	     * A special character to use as a value separator. Typically a comma `,`
	     */
	    delimiter?: string;
	    /**
	     * Specifies that the input should have focus when the component loads
	     */
	    autoFocus?: boolean;
	    /**
	     * Required when rendering without a visible label from [EuiFormRow](/#/forms/form-layouts).
	     */
	    'aria-label'?: string;
	    /**
	     * Reference ID of a text element containing the visible label for the combo box when not
	     * supplied by `aria-label` or from [EuiFormRow](/#/forms/form-layouts).
	     */
	    'aria-labelledby'?: string;
	} type DefaultProps<T> = Omit<typeof EuiComboBox['defaultProps'], 'options' | 'selectedOptions'> & {
	    options: Array<EuiComboBoxOptionOption<T>>;
	    selectedOptions: Array<EuiComboBoxOptionOption<T>>;
	};
	export type EuiComboBoxProps<T> = Omit<_EuiComboBoxProps<T>, keyof DefaultProps<T>> & Partial<DefaultProps<T>>;
	interface EuiComboBoxState<T> {
	    activeOptionIndex: number;
	    hasFocus: boolean;
	    isListOpen: boolean;
	    listElement?: RefInstance<HTMLDivElement>;
	    listPosition: EuiComboBoxOptionsListPosition;
	    listZIndex: number | undefined;
	    matchingOptions: Array<EuiComboBoxOptionOption<T>>;
	    searchValue: string;
	    width: number;
	}
	export class EuiComboBox<T> extends Component<_EuiComboBoxProps<T>, EuiComboBoxState<T>> {
	    static defaultProps: {
	        async: boolean;
	        compressed: boolean;
	        fullWidth: boolean;
	        isClearable: boolean;
	        options: never[];
	        selectedOptions: never[];
	        singleSelection: boolean;
	        prepend: undefined;
	        append: undefined;
	        sortMatchesBy: "none";
	    };
	    state: EuiComboBoxState<T>;
	    _isMounted: boolean;
	    rootId: (idSuffix?: string) => string;
	    comboBoxRefInstance: RefInstance<HTMLDivElement>;
	    comboBoxRefCallback: RefCallback<HTMLDivElement>;
	    autoSizeInputRefInstance: RefInstance<AutosizeInput & HTMLDivElement>;
	    autoSizeInputRefCallback: RefCallback<AutosizeInput & HTMLDivElement>;
	    searchInputRefInstance: RefInstance<HTMLInputElement>;
	    searchInputRefCallback: RefCallback<HTMLInputElement>;
	    listRefInstance: RefInstance<HTMLDivElement>;
	    listRefCallback: RefCallback<HTMLDivElement>;
	    toggleButtonRefInstance: RefInstance<HTMLButtonElement | HTMLSpanElement>;
	    toggleButtonRefCallback: RefCallback<HTMLButtonElement | HTMLSpanElement>;
	    optionsRefInstances: Array<RefInstance<EuiFilterSelectItem>>;
	    optionRefCallback: EuiComboBoxOptionsListProps<T>['optionRef'];
	    openList: () => void;
	    closeList: (event?: Event | undefined) => void;
	    updatePosition: UpdatePositionHandler;
	    incrementActiveOptionIndex: (amount: number) => void;
	    hasActiveOption: () => boolean;
	    clearActiveOption: () => void;
	    clearSearchValue: () => void;
	    removeLastOption: () => void;
	    addCustomOption: (isContainerBlur: boolean, searchValue: string) => void;
	    doesSearchMatchOnlyOption: () => boolean;
	    areAllOptionsSelected: () => boolean;
	    onComboBoxFocus: FocusEventHandler<HTMLInputElement>;
	    setCustomOptions: (isContainerBlur: boolean) => void;
	    onContainerBlur: EventListener;
	    onKeyDown: KeyboardEventHandler<HTMLDivElement>;
	    onOptionEnterKey: OptionHandler<T>;
	    onOptionClick: OptionHandler<T>;
	    onAddOption: (addedOption: EuiComboBoxOptionOption<T>, isContainerBlur?: boolean | undefined) => void;
	    onRemoveOption: OptionHandler<T>;
	    clearSelectedOptions: () => void;
	    onComboBoxClick: () => void;
	    onOpenListClick: () => void;
	    onOptionListScroll: () => void;
	    onCloseListClick: () => void;
	    onSearchChange: NonNullable<EuiComboBoxInputProps<T>['onChange']>;
	    componentDidMount(): void;
	    static getDerivedStateFromProps<T>(nextProps: _EuiComboBoxProps<T>, prevState: EuiComboBoxState<T>): Partial<EuiComboBoxState<T>>;
	    updateMatchingOptionsIfDifferent: (newMatchingOptions: Array<EuiComboBoxOptionOption<T>>) => void;
	    componentDidUpdate(): void;
	    componentWillUnmount(): void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/combo_box/combo_box_input' {
	export { EuiComboBoxInput, EuiComboBoxInputProps } from '@elastic/eui/src/components/combo_box/combo_box_input/combo_box_input';
	export { EuiComboBoxPill, EuiComboBoxPillProps } from '@elastic/eui/src/components/combo_box/combo_box_input/combo_box_pill';

}
declare module '@elastic/eui/src/components/combo_box' {
	export { EuiComboBox, EuiComboBoxProps } from '@elastic/eui/src/components/combo_box/combo_box';
	export * from '@elastic/eui/src/components/combo_box/combo_box_input';
	export * from '@elastic/eui/src/components/combo_box/combo_box_options_list';
	export { EuiComboBoxOptionOption, EuiComboBoxOptionsListPosition, EuiComboBoxSingleSelectionShape, } from '@elastic/eui/src/components/combo_box/types';

}
declare module '@elastic/eui/src/components/comment_list/comment_event' {
	import { FunctionComponent, ReactNode } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export interface EuiCommentEventProps extends CommonProps {
	    /**
	     * Author of the comment. Display a small icon or avatar with it if needed.
	     */
	    username: ReactNode;
	    /**
	     * Time of occurrence of the event. Its format is set on the consumer's side
	     */
	    timestamp?: ReactNode;
	    /**
	     * Describes the event that took place
	     */
	    event?: ReactNode;
	    /**
	     * Custom actions that the user can perform from the comment's header
	     */
	    actions?: ReactNode;
	    /**
	     * Use "update" when the comment is primarily showing info about actions that the user or the system has performed (e.g. "user1 edited a case").
	     */
	    type?: EuiCommentType;
	} const typeToClassNameMap: {
	    regular: string;
	    update: string;
	};
	export const TYPES: ("regular" | "update")[];
	export type EuiCommentType = keyof typeof typeToClassNameMap;
	export const EuiCommentEvent: FunctionComponent<EuiCommentEventProps>;
	export {};

}
declare module '@elastic/eui/src/components/comment_list/comment_timeline' {
	import { FunctionComponent, ReactNode } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { IconType } from '@elastic/eui/src/components/icon';
	export interface EuiCommentTimelineProps extends CommonProps {
	    /**
	     * Main icon that accompanies the comment. The default is `user` for regular comments and `dot` for update comments. To customize, pass a `string` as an `EuiIcon['type']` or any `ReactNode`.
	     */
	    timelineIcon?: ReactNode | IconType;
	    type?: EuiCommentType;
	} const typeToClassNameMap: {
	    regular: string;
	    update: string;
	};
	export const TYPES: ("regular" | "update")[];
	export type EuiCommentType = keyof typeof typeToClassNameMap;
	export const EuiCommentTimeline: FunctionComponent<EuiCommentTimelineProps>;
	export {};

}
declare module '@elastic/eui/src/components/comment_list/comment' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { EuiCommentEventProps } from '@elastic/eui/src/components/comment_list/comment_event';
	import { EuiCommentTimelineProps } from '@elastic/eui/src/components/comment_list/comment_timeline';
	export interface EuiCommentProps extends HTMLAttributes<HTMLDivElement>, EuiCommentEventProps, EuiCommentTimelineProps {
	}
	export const EuiComment: FunctionComponent<EuiCommentProps>;

}
declare module '@elastic/eui/src/components/comment_list/comment_list' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiCommentProps } from '@elastic/eui/src/components/comment_list/comment';
	export type EuiCommentListProps = HTMLAttributes<HTMLDivElement> & CommonProps & {
	    /**
	     * List of comments to render. See #EuiComment
	     */
	    comments?: EuiCommentProps[];
	};
	export const EuiCommentList: FunctionComponent<EuiCommentListProps>;

}
declare module '@elastic/eui/src/components/comment_list' {
	export { EuiComment, EuiCommentProps } from '@elastic/eui/src/components/comment_list/comment';
	export { EuiCommentEvent, EuiCommentType } from '@elastic/eui/src/components/comment_list/comment_event';
	export { EuiCommentTimeline } from '@elastic/eui/src/components/comment_list/comment_timeline';
	export { EuiCommentList, EuiCommentListProps } from '@elastic/eui/src/components/comment_list/comment_list';

}
declare module '@elastic/eui/src/components/control_bar/control_bar' {
	import { ButtonHTMLAttributes, Component, HTMLAttributes, MouseEventHandler, Ref, ReactNode } from 'react';
	import { EuiBreadcrumbsProps } from '@elastic/eui/src/components/breadcrumbs';
	import { EuiButtonIconProps, EuiButtonProps } from '@elastic/eui/src/components/button';
	import { CommonProps, ExclusiveUnion, PropsForAnchor, PropsForButton } from '@elastic/eui/src/components/common';
	import { EuiIconProps } from '@elastic/eui/src/components/icon/icon';
	/**
	 * Extends EuiButton excluding `size`. Requires `label` as the `children`.
	 */
	export interface ButtonControl extends Omit<EuiButtonProps, 'size'> {
	    id: string;
	    label: ReactNode;
	} type ButtonPropsForAnchor = PropsForAnchor<ButtonControl, {
	    buttonRef?: Ref<HTMLAnchorElement>;
	}>; type ButtonPropsForButton = PropsForButton<ButtonControl, {
	    buttonRef?: Ref<HTMLButtonElement>;
	}>; type ButtonControlProps = ExclusiveUnion<ButtonPropsForAnchor, ButtonPropsForButton> & {
	    controlType: 'button';
	};
	/**
	 * Creates a `button` visually styles as a tab.
	 * Requires `label` as the `children`.
	 * `onClick` must be provided to handle the content swapping.
	 */
	export interface TabControl extends Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'id' | 'onClick'> {
	    controlType: 'tab';
	    id: string;
	    label: ReactNode;
	    onClick: MouseEventHandler<HTMLButtonElement>;
	}
	/**
	 * Extends EuiBreadcrumbs
	 */
	export interface BreadcrumbControl extends EuiBreadcrumbsProps {
	    controlType: 'breadcrumbs';
	    id: string;
	}
	/**
	 * Simple div controlling color and size text output.
	 * Requires `label` as the `children`.
	 */
	export interface TextControl extends CommonProps, HTMLAttributes<HTMLDivElement> {
	    controlType: 'text';
	    id: string;
	    text: ReactNode;
	}
	export interface SpacerControl {
	    controlType: 'spacer';
	}
	export interface DividerControl {
	    controlType: 'divider';
	}
	/**
	 * Custom props specific to the icon control type
	 */
	export interface IconControlProps {
	    controlType: 'icon';
	    id: string;
	    iconType: string;
	    onClick?: MouseEventHandler;
	}
	/**
	 * Icon can extend EuiIcon
	 * Had to omit `onClick` as it's a valid prop of SVGElement
	 * Also omits `type` and `id` as these are also specific to icon control
	 */
	export interface IconControlType extends Omit<EuiIconProps, 'type' | 'id' | 'onClick'>, IconControlProps {
	}
	/**
	 * Icon can extend EuiButtonIcon
	 * Also omits `iconType` and `id` as these are also specific to icon control
	 */
	export interface IconButtonControlType extends Omit<EuiButtonIconProps, 'iconType' | 'id'>, IconControlProps {
	}
	export type IconControl = ExclusiveUnion<IconControlType, Omit<IconButtonControlType, 'size' | 'display'>>;
	export type Control = ExclusiveUnion<ExclusiveUnion<ExclusiveUnion<ExclusiveUnion<ExclusiveUnion<ButtonControlProps, ExclusiveUnion<BreadcrumbControl, TabControl>>, TextControl>, IconControl>, DividerControl>, SpacerControl>;
	export type EuiControlBarProps = HTMLAttributes<HTMLDivElement> & CommonProps & {
	    /**
	     * Show or hide the content area containing the `children`
	     */
	    showContent?: boolean;
	    /**
	     * An array of controls, actions, and layout spacers to display.
	     * Accepts `'button' | 'tab' | 'breadcrumbs' | 'text' | 'icon' | 'spacer' | 'divider'`
	     */
	    controls: Control[];
	    /**
	     * The default height of the content area.
	     */
	    size?: 's' | 'm' | 'l';
	    /**
	     * Customize the max height.
	     * Best when used with `size=l` as this will ensure the actual height equals the max height set.
	     */
	    maxHeight?: number | string;
	    /**
	     * Set the offset from the left side of the screen.
	     */
	    leftOffset?: number | string;
	    /**
	     * Set the offset from the left side of the screen.
	     */
	    rightOffset?: number | string;
	    /**
	     * The control bar is hidden on mobile by default. Use the `showOnMobile` prop to force it's display on mobile screens.
	     * You'll need to ensure that the content you place into the bar renders as expected on mobile.
	     */
	    showOnMobile?: boolean;
	    /**
	     * By default EuiControlBar will live in a portal, fixed position to the browser window.
	     * Change the position of the bar to live inside a container and be positioned against its parent.
	     */
	    position?: 'fixed' | 'relative' | 'absolute';
	    /**
	     * Optional class applied to the body used when `position = fixed`
	     */
	    bodyClassName?: string;
	    /**
	     * Customize the screen reader heading that helps users find this control. Default is "Page level controls".
	     */
	    landmarkHeading?: string;
	};
	interface EuiControlBarState {
	    selectedTab: string;
	}
	export class EuiControlBar extends Component<EuiControlBarProps, EuiControlBarState> {
	    static defaultProps: {
	        leftOffset: number;
	        rightOffset: number;
	        position: string;
	        size: string;
	        showContent: boolean;
	        showOnMobile: boolean;
	    };
	    private bar;
	    componentDidMount(): void;
	    componentWillUnmount(): void;
	    state: {
	        selectedTab: string;
	    };
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/control_bar' {
	export { EuiControlBar, EuiControlBarProps } from '@elastic/eui/src/components/control_bar/control_bar';

}
declare module '@elastic/eui/src/components/list_group/list_group_item' {
	import React, { HTMLAttributes, AnchorHTMLAttributes, ButtonHTMLAttributes, ReactNode, ReactElement, MouseEventHandler, FunctionComponent } from 'react';
	import { EuiButtonIconPropsForButton } from '@elastic/eui/src/components/button';
	import { IconType, EuiIconProps } from '@elastic/eui/src/components/icon';
	import { ExclusiveUnion, CommonProps } from '@elastic/eui/src/components/common'; type ItemSize = 'xs' | 's' | 'm' | 'l';
	export const SIZES: ("s" | "xs" | "m" | "l")[]; type Color = 'inherit' | 'primary' | 'text' | 'subdued' | 'ghost';
	export const COLORS: Color[];
	export type EuiListGroupItemProps = CommonProps & Omit<ExclusiveUnion<ExclusiveUnion<ButtonHTMLAttributes<HTMLButtonElement>, Omit<AnchorHTMLAttributes<HTMLAnchorElement>, 'href'>>, HTMLAttributes<HTMLSpanElement>>, 'onClick' | 'color' | 'target' | 'rel'> & {
	    /**
	     * Size of the label text
	     */
	    size?: ItemSize;
	    /**
	     * By default the item will inherit the color of its wrapper (button/link/span),
	     * otherwise pass one of the acceptable options
	     */
	    color?: Color;
	    /**
	     * Content to be displayed in the list item
	     */
	    label: ReactNode;
	    /**
	     * Apply styles indicating an item is active
	     */
	    isActive?: boolean;
	    /**
	     * Apply styles indicating an item is disabled
	     */
	    isDisabled?: boolean;
	    /**
	     * Make the list item label a link.
	     * While permitted, `href` and `onClick` should not be used together in most cases and may create problems.
	     */
	    href?: string;
	    target?: string;
	    rel?: string;
	    /**
	     * Adds `EuiIcon` of `EuiIcon.type`
	     */
	    iconType?: IconType;
	    /**
	     * Further extend the props applied to EuiIcon
	     */
	    iconProps?: Omit<EuiIconProps, 'type'>;
	    /**
	     * Custom node to pass as the icon. Cannot be used in conjunction
	     * with `iconType` and `iconProps`.
	     */
	    icon?: ReactElement;
	    /**
	     * Display tooltip on list item
	     */
	    showToolTip?: boolean;
	    /**
	     * Adds an `EuiButtonIcon` to the right side of the item; `iconType` is required;
	     * pass `alwaysShow` if you don't want the default behavior of only showing on hover
	     */
	    extraAction?: EuiButtonIconPropsForButton & {
	        alwaysShow?: boolean;
	    };
	    /**
	     * Make the list item label a button.
	     * While permitted, `href` and `onClick` should not be used together in most cases and may create problems.
	     */
	    onClick?: MouseEventHandler<HTMLButtonElement>;
	    /**
	     * Allow link text to wrap
	     */
	    wrapText?: boolean;
	    /**
	     * Pass-through ref reference specifically for targeting
	     * instances where the item content is rendered as a `button`
	     */
	    buttonRef?: React.Ref<HTMLButtonElement>;
	};
	export const EuiListGroupItem: FunctionComponent<EuiListGroupItemProps>;
	export {};

}
declare module '@elastic/eui/src/components/list_group/list_group' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { EuiListGroupItemProps } from '@elastic/eui/src/components/list_group/list_group_item';
	import { CommonProps } from '@elastic/eui/src/components/common'; type GutterSize = 'none' | 's' | 'm';
	export const GUTTER_SIZES: GutterSize[];
	export type EuiListGroupProps = CommonProps & Omit<HTMLAttributes<HTMLUListElement>, 'color'> & {
	    /**
	     * Add a border to the list container
	     */
	    bordered?: boolean;
	    /**
	     * Remove container padding, stretching list items to the edges
	     */
	    flush?: boolean;
	    /**
	     * Spacing between list items
	     */
	    gutterSize?: GutterSize;
	    /**
	     * Items to display in this group. See #EuiListGroupItem
	     */
	    listItems?: EuiListGroupItemProps[];
	    /**
	     * Change the colors of all `listItems` at once
	     */
	    color?: EuiListGroupItemProps['color'];
	    /**
	     * Change the size of all `listItems` at once
	     */
	    size?: EuiListGroupItemProps['size'];
	    /**
	     * Sets the max-width of the page,
	     * set to `true` to use the default size,
	     * set to `false` to not restrict the width,
	     * set to a number for a custom width in px,
	     * set to a string for a custom width in custom measurement.
	     */
	    maxWidth?: boolean | number | string;
	    /**
	     * Display tooltips on all list items
	     */
	    showToolTips?: boolean;
	    /**
	     * Allow link text to wrap vs truncated
	     */
	    wrapText?: boolean;
	    ariaLabelledby?: string;
	};
	export const EuiListGroup: FunctionComponent<EuiListGroupProps>;
	export {};

}
declare module '@elastic/eui/src/components/list_group/pinnable_list_group/pinnable_list_group' {
	import { FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiListGroupProps } from '@elastic/eui/src/components/list_group/list_group';
	import { EuiListGroupItemProps } from '@elastic/eui/src/components/list_group/list_group_item';
	export type EuiPinnableListGroupItemProps = EuiListGroupItemProps & {
	    /**
	     * Saves the pinned status and changes the visibility of the pin icon
	     */
	    pinned?: boolean;
	    /**
	     * Passing `onPinClick` to the full EuiPinnableListGroup, will make every item pinnable.
	     * Set this property to `false` to turn off individual item pinnability
	     */
	    pinnable?: boolean;
	};
	export interface EuiPinnableListGroupProps extends CommonProps, EuiListGroupProps {
	    /**
	     * Extends `EuiListGroupItemProps`, at the very least, expecting a `label`.
	     * See #EuiPinnableListGroupItem
	     */
	    listItems: EuiPinnableListGroupItemProps[];
	    /**
	     * Shows the pin icon and calls this function on click.
	     * Returns `item: EuiPinnableListGroupItemProps`
	     */
	    onPinClick: (item: EuiPinnableListGroupItemProps) => void;
	    /**
	     * The pin icon needs a title/aria-label for accessibility.
	     * It is a function that passes the item back and must return a string `(item) => string`.
	     * Default is `"Pin item"`
	     */
	    pinTitle?: (item: EuiPinnableListGroupItemProps) => string;
	    /**
	     * The unpin icon needs a title/aria-label for accessibility.
	     * It is a function that passes the item back and must return a string `(item) => string`.
	     * Default is `"Unpin item"`
	     */
	    unpinTitle?: (item: EuiPinnableListGroupItemProps) => string;
	}
	export const EuiPinnableListGroup: FunctionComponent<EuiPinnableListGroupProps>;

}
declare module '@elastic/eui/src/components/list_group/pinnable_list_group' {
	export { EuiPinnableListGroup, EuiPinnableListGroupProps, EuiPinnableListGroupItemProps, } from '@elastic/eui/src/components/list_group/pinnable_list_group/pinnable_list_group';

}
declare module '@elastic/eui/src/components/list_group' {
	export { EuiListGroup, EuiListGroupProps } from '@elastic/eui/src/components/list_group/list_group';
	export { EuiListGroupItem, EuiListGroupItemProps } from '@elastic/eui/src/components/list_group/list_group_item';
	export { EuiPinnableListGroup, EuiPinnableListGroupProps, EuiPinnableListGroupItemProps, } from '@elastic/eui/src/components/list_group/pinnable_list_group';

}
declare module '@elastic/eui/src/components/datagrid/utils/data_grid_schema' {
	import { EuiDataGridColumn, EuiDataGridInMemory, EuiDataGridInMemoryValues, EuiDataGridSchema, EuiDataGridSchemaDetector } from '@elastic/eui/src/components/datagrid/data_grid_types';
	export const schemaDetectors: EuiDataGridSchemaDetector[];
	export const defaultComparator: NonNullable<EuiDataGridSchemaDetector['comparator']>;
	/**
	 * Schema detection & merging used by EuiDataGrid
	 */
	interface UseSchemaProps {
	    columns: EuiDataGridColumn[];
	    inMemory: EuiDataGridInMemory | undefined;
	    inMemoryValues: EuiDataGridInMemoryValues;
	    schemaDetectors: EuiDataGridSchemaDetector[];
	    autoDetectSchema: boolean;
	}
	export const useDefinedColumnSchemas: (columns: EuiDataGridColumn[]) => {
	    [key: string]: string;
	};
	export const useDetectSchema: ({ columns, inMemory, inMemoryValues, schemaDetectors, autoDetectSchema, }: UseSchemaProps) => EuiDataGridSchema;
	export const useMergedSchema: (props: UseSchemaProps) => {
	    [x: string]: {
	        columnType: string | null;
	    };
	};
	/**
	 * Schema utils used by columns
	 */
	export const getDetailsForSchema: (detectors: EuiDataGridSchemaDetector[], providedSchema: string | null) => EuiDataGridSchemaDetector;
	export {};

}
declare module '@elastic/eui/src/components/datagrid/utils/sorting' {
	
	import { DataGridSortingContextShape, EuiDataGridSorting, EuiDataGridInMemory, EuiDataGridInMemoryValues, EuiDataGridSchema, EuiDataGridSchemaDetector } from '@elastic/eui/src/components/datagrid/data_grid_types';
	export const DataGridSortingContext: import("react").Context<DataGridSortingContextShape>;
	export const useSorting: ({ sorting, inMemory, inMemoryValues, schema, schemaDetectors, startRow, }: {
	    sorting?: EuiDataGridSorting | undefined;
	    inMemory?: EuiDataGridInMemory | undefined;
	    inMemoryValues: EuiDataGridInMemoryValues;
	    schema: EuiDataGridSchema;
	    schemaDetectors: EuiDataGridSchemaDetector[];
	    startRow: number;
	}) => {
	    sorting: EuiDataGridSorting | undefined;
	    sortedRowMap: {
	        [key: number]: number;
	    };
	    getCorrectRowIndex: (rowIndex: number) => number;
	};

}
declare module '@elastic/eui/src/components/datagrid/utils/row_heights' {
	import { CSSProperties } from 'react';
	import type { VariableSizeGrid as Grid } from 'react-window';
	import { EuiDataGridStyleCellPaddings, EuiDataGridStyle, EuiDataGridRowHeightOption, EuiDataGridRowHeightsOptions, EuiDataGridColumn } from '@elastic/eui/src/components/datagrid/data_grid_types';
	export const cellPaddingsMap: Record<EuiDataGridStyleCellPaddings, number>;
	export const AUTO_HEIGHT = "auto";
	export const DEFAULT_ROW_HEIGHT = 34;
	export class RowHeightUtils {
	    getRowHeightOption(rowIndex: number, rowHeightsOptions?: EuiDataGridRowHeightsOptions): EuiDataGridRowHeightOption | undefined;
	    isRowHeightOverride(rowIndex: number, rowHeightsOptions?: EuiDataGridRowHeightsOptions): boolean;
	    getCalculatedHeight(heightOption: EuiDataGridRowHeightOption, defaultHeight: number, rowIndex?: number, isRowHeightOverride?: boolean): number;
	    /**
	     * Styles utils
	     */
	    private styles;
	    cacheStyles(gridStyles: EuiDataGridStyle): void;
	    getStylesForCell: (rowHeightsOptions: EuiDataGridRowHeightsOptions, rowIndex: number) => CSSProperties;
	    /**
	     * Line count utils
	     */
	    getLineCount(option?: EuiDataGridRowHeightOption): number | undefined;
	    calculateHeightForLineCount(cellRef: HTMLElement, lineCount: number, excludePadding?: boolean): number;
	    /**
	     * Auto height utils
	     */
	    private heightsCache;
	    private timerId?;
	    private grid?;
	    private lastUpdatedRow;
	    private rerenderGridBody;
	    isAutoHeight(rowIndex: number, rowHeightsOptions?: EuiDataGridRowHeightsOptions): boolean;
	    getRowHeight(rowIndex: number): number;
	    setRowHeight(rowIndex: number, colId: string, height: number | undefined, visibleRowIndex: number): void;
	    pruneHiddenColumnHeights(visibleColumns: EuiDataGridColumn[]): void;
	    resetRow(visibleRowIndex: number): void;
	    resetGrid(): void;
	    setGrid(grid: Grid): void;
	    setRerenderGridBody(rerenderGridBody: Function): void;
	}
	/**
	 * Hook for instantiating RowHeightUtils, and also updating
	 * internal vars from outside props via useEffects
	 */
	export const useRowHeightUtils: ({ gridRef, gridStyles, columns, }: {
	    gridRef: Grid | null;
	    gridStyles: EuiDataGridStyle;
	    columns: EuiDataGridColumn[];
	}) => RowHeightUtils;
	export const useDefaultRowHeight: ({ rowHeightsOptions, rowHeightUtils, }: {
	    rowHeightsOptions?: EuiDataGridRowHeightsOptions | undefined;
	    rowHeightUtils: RowHeightUtils;
	}) => {
	    defaultRowHeight: number;
	    setRowHeight: import("react").Dispatch<import("react").SetStateAction<number>>;
	    getRowHeight: (rowIndex: number) => number;
	};

}
declare module '@elastic/eui/src/components/token/token_map' {
	import { TokenProps } from '@elastic/eui/src/components/token/token';
	export type EuiTokenMapType = 'tokenAnnotation' | 'tokenArray' | 'tokenBoolean' | 'tokenClass' | 'tokenConstant' | 'tokenElement' | 'tokenEnum' | 'tokenEnumMember' | 'tokenEvent' | 'tokenException' | 'tokenField' | 'tokenFile' | 'tokenFunction' | 'tokenInterface' | 'tokenKey' | 'tokenMethod' | 'tokenModule' | 'tokenNamespace' | 'tokenNull' | 'tokenNumber' | 'tokenObject' | 'tokenOperator' | 'tokenPackage' | 'tokenParameter' | 'tokenProperty' | 'tokenRepo' | 'tokenString' | 'tokenStruct' | 'tokenDate' | 'tokenIP' | 'tokenNested' | 'tokenAlias' | 'tokenShape' | 'tokenGeo' | 'tokenRange' | 'tokenSymbol' | 'tokenVariable' | 'tokenBinary' | 'tokenJoin' | 'tokenPercolator' | 'tokenFlattened' | 'tokenRankFeature' | 'tokenRankFeatures' | 'tokenKeyword' | 'tokenTag' | 'tokenCompletionSuggester' | 'tokenDenseVector' | 'tokenText' | 'tokenTokenCount' | 'tokenSearchType' | 'tokenHistogram';
	/**
	 * Most of the style combinations for tokens are semi-arbitrary. However, there was an effort
	 * to use the square shape for more common token types like string and number. Reserving the
	 * circle shape for more uncommon token types so they grab attention.
	 */
	export const TOKEN_MAP: {
	    [mapType in EuiTokenMapType]: Omit<TokenProps, 'iconType'>;
	};

}
declare module '@elastic/eui/src/components/token/token' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { IconType } from '@elastic/eui/src/components/icon'; type TokenSize = 'xs' | 's' | 'm' | 'l'; type TokenShape = 'circle' | 'square' | 'rectangle'; type TokenFill = 'dark' | 'light' | 'none'; type TokenColor = 'euiColorVis0' | 'euiColorVis1' | 'euiColorVis2' | 'euiColorVis3' | 'euiColorVis4' | 'euiColorVis5' | 'euiColorVis6' | 'euiColorVis7' | 'euiColorVis8' | 'euiColorVis9' | 'gray';
	export const SIZES: ("s" | "xs" | "m" | "l")[];
	export const SHAPES: TokenShape[];
	export const FILLS: ("none" | "dark" | "light")[];
	export const COLORS: TokenColor[];
	export interface TokenProps {
	    /**
	     * An EUI icon type
	     */
	    iconType: IconType;
	    /**
	     * For best results use one of the vis color names (or 'gray').
	     * Or supply your own color (can be used with dark or no fill only).
	     * Default: `gray`
	     */
	    color?: TokenColor | string;
	    /**
	     * Outer shape surrounding the icon
	     * Default: `circle`
	     */
	    shape?: TokenShape;
	    /**
	     * `light` for lightened color with border, `dark` for solid, or `none`
	     * Default: `light`
	     */
	    fill?: TokenFill;
	    /**
	     * Size of the token
	     */
	    size?: TokenSize;
	    /**
	     * The icon's title. Required for accessibility
	     */
	    title?: string;
	    'aria-label'?: string;
	    'aria-labelledby'?: string;
	    'aria-describedby'?: string;
	}
	export type EuiTokenProps = CommonProps & TokenProps & Omit<HTMLAttributes<HTMLSpanElement>, 'title'>;
	export const EuiToken: FunctionComponent<EuiTokenProps>;
	export {};

}
declare module '@elastic/eui/src/components/token' {
	export { EuiToken, EuiTokenProps, SIZES as TOKEN_SIZES, SHAPES as TOKEN_SHAPES, COLORS as TOKEN_COLORS, } from '@elastic/eui/src/components/token/token';

}
declare module '@elastic/eui/src/components/datagrid/data_grid_types' {
	import { ComponentType, JSXElementConstructor, ReactNode, HTMLAttributes, RefCallback, CSSProperties, ReactElement, AriaAttributes, Dispatch, SetStateAction, MutableRefObject } from 'react';
	import { VariableSizeGridProps, VariableSizeGrid as Grid, GridOnItemsRenderedProps } from 'react-window';
	import { EuiListGroupItemProps } from '@elastic/eui/src/components/list_group';
	import { EuiButtonEmpty, EuiButtonIcon } from '@elastic/eui/src/components/button';
	import { ExclusiveUnion, CommonProps, OneOf } from '@elastic/eui/src/components/common';
	import { RowHeightUtils } from '@elastic/eui/src/components/datagrid/utils/row_heights';
	import { IconType } from '@elastic/eui/src/components/icon';
	import { EuiTokenProps } from '@elastic/eui/src/components/token';
	export interface EuiDataGridToolbarProps {
	    gridWidth: number;
	    minSizeForControls?: number;
	    toolbarVisibility: boolean | EuiDataGridToolBarVisibilityOptions;
	    displaySelector: ReactNode;
	    isFullScreen: boolean;
	    controlBtnClasses: string;
	    columnSelector: ReactNode;
	    columnSorting: ReactNode;
	    setRef: RefCallback<HTMLDivElement | null>;
	    setIsFullScreen: Dispatch<SetStateAction<boolean>>;
	}
	export interface EuiDataGridPaginationRendererProps extends EuiDataGridPaginationProps {
	    rowCount: number;
	    controls: string;
	    'aria-label'?: AriaAttributes['aria-label'];
	    'aria-labelledby'?: AriaAttributes['aria-labelledby'];
	    gridRef: EuiDataGridBodyProps['gridRef'];
	}
	export interface EuiDataGridInMemoryRendererProps {
	    inMemory: EuiDataGridInMemory;
	    columns: EuiDataGridColumn[];
	    rowCount: number;
	    renderCellValue: EuiDataGridCellProps['renderCellValue'];
	    onCellRender: (rowIndex: number, columnId: string, value: string) => void;
	}
	export interface DataGridWrapperRowsContentsShape {
	    headerRowHeight: number;
	    headerRow: ReactElement;
	    footerRow: ReactElement | null;
	}
	export interface EuiDataGridSchema {
	    [columnId: string]: {
	        columnType: string | null;
	    };
	}
	export interface SchemaTypeScore {
	    type: string;
	    score: number;
	}
	export interface EuiDataGridSchemaDetector {
	    /**
	     * The name of this data type, matches #EuiDataGridColumn / schema `schema`
	     */
	    type: string;
	    /**
	     * The function given the text value of a cell and returns a score of [0...1] of how well the value matches this data type
	     */
	    detector: (value: string) => number;
	    /**
	     * A custom comparator function when performing in-memory sorting on this data type, takes `(a: string, b: string, direction: 'asc' | 'desc) => -1 | 0 | 1`
	     */
	    comparator?: (a: string, b: string, direction: 'asc' | 'desc') => -1 | 0 | 1;
	    /**
	     * The icon used to visually represent this data type. Accepts any `EuiIcon IconType`.
	     */
	    icon: IconType;
	    /**
	     * The color associated with this data type; it's used to color the icon token
	     */
	    color?: EuiTokenProps['color'] | string;
	    /**
	     * Text for how to represent an ascending sort of this data type, e.g. 'A -> Z'
	     */
	    sortTextAsc: ReactNode;
	    /**
	     * Text for how to represent a descending sort of this data type, e.g. 'Z -> A'
	     */
	    sortTextDesc: ReactNode;
	    /**
	     * Whether columns with this schema are sortable (defaults to true). Can be overridden at the individual #EuiDataGridColumn level
	     */
	    isSortable?: boolean;
	    /**
	     * This property controls the capitalization of text
	     */
	    textTransform?: 'uppercase' | 'lowercase' | 'capitalize';
	    /**
	     * Default sort direction of columns with this schema. Can be overridden at the individual #EuiDataGridColumn level
	     */
	    defaultSortDirection?: 'asc' | 'desc';
	}
	export interface EuiDataGridHeaderRowPropsSpecificProps {
	    leadingControlColumns?: EuiDataGridControlColumn[];
	    trailingControlColumns?: EuiDataGridControlColumn[];
	    columns: EuiDataGridColumn[];
	    columnWidths: EuiDataGridColumnWidths;
	    schema: EuiDataGridSchema;
	    schemaDetectors: EuiDataGridSchemaDetector[];
	    defaultColumnWidth?: number | null;
	    setColumnWidth: (columnId: string, width: number) => void;
	    setVisibleColumns: (columnId: string[]) => void;
	    switchColumnPos: (colFromId: string, colToId: string) => void;
	    headerIsInteractive: boolean;
	}
	export type EuiDataGridHeaderRowProps = CommonProps & HTMLAttributes<HTMLDivElement> & EuiDataGridHeaderRowPropsSpecificProps;
	export interface EuiDataGridHeaderCellProps extends Omit<EuiDataGridHeaderRowPropsSpecificProps, 'leadingControlColumns'> {
	    column: EuiDataGridColumn;
	    index: number;
	}
	export interface EuiDataGridControlHeaderCellProps {
	    index: number;
	    controlColumn: EuiDataGridControlColumn;
	    headerIsInteractive: boolean;
	}
	export interface EuiDataGridHeaderCellWrapperProps {
	    id: string;
	    index: number;
	    headerIsInteractive: boolean;
	    width?: number | null;
	    className?: string;
	}
	export type EuiDataGridFooterRowProps = CommonProps & HTMLAttributes<HTMLDivElement> & {
	    rowIndex: number;
	    leadingControlColumns: EuiDataGridControlColumn[];
	    trailingControlColumns: EuiDataGridControlColumn[];
	    columns: EuiDataGridColumn[];
	    schema: EuiDataGridSchema;
	    popoverContents: EuiDataGridPopoverContents;
	    columnWidths: EuiDataGridColumnWidths;
	    defaultColumnWidth?: number | null;
	    renderCellValue: EuiDataGridCellProps['renderCellValue'];
	    interactiveCellId: EuiDataGridCellProps['interactiveCellId'];
	    visibleRowIndex?: number;
	};
	export interface EuiDataGridVisibleRows {
	    startRow: number;
	    endRow: number;
	    visibleRowCount: number;
	}
	export interface DataGridSortingContextShape {
	    sorting?: EuiDataGridSorting;
	    sortedRowMap: {
	        [key: number]: number;
	    };
	    getCorrectRowIndex: (rowIndex: number) => number;
	}
	export interface DataGridFocusContextShape {
	    focusedCell?: EuiDataGridFocusedCell;
	    setFocusedCell: (cell: EuiDataGridFocusedCell) => void;
	    setIsFocusedCellInView: (isFocusedCellInView: boolean) => void;
	    onFocusUpdate: (cell: EuiDataGridFocusedCell, updateFocus: Function) => () => void;
	    focusFirstVisibleInteractiveCell: () => void;
	}
	export type CommonGridProps = CommonProps & HTMLAttributes<HTMLDivElement> & {
	    /**
	     * An array of #EuiDataGridControlColumn objects. Used to define ancillary columns on the left side of the data grid.
	     */
	    leadingControlColumns?: EuiDataGridControlColumn[];
	    /**
	     * An array of #EuiDataGridControlColumn objects. Used to define ancillary columns on the right side of the data grid.
	     */
	    trailingControlColumns?: EuiDataGridControlColumn[];
	    /**
	     * An array of #EuiDataGridColumn objects. Lists the columns available and the schema and settings tied to it.
	     */
	    columns: EuiDataGridColumn[];
	    /**
	     * An array of #EuiDataGridColumnVisibility objects. Defines which columns are visible in the grid and the order they are displayed.
	     */
	    columnVisibility: EuiDataGridColumnVisibility;
	    /**
	     * An array of custom #EuiDataGridSchemaDetector objects. You can inject custom schemas to the grid to define the classnames applied
	     */
	    schemaDetectors?: EuiDataGridSchemaDetector[];
	    /**
	     * An object mapping #EuiDataGridColumn `schema`s to a custom popover formatting component which receives #EuiDataGridPopoverContent props
	     */
	    popoverContents?: EuiDataGridPopoverContents;
	    /**
	     * The total number of rows in the dataset (used by e.g. pagination to know how many pages to list)
	     */
	    rowCount: number;
	    /**
	     * A function called to render a cell's value. Behind the scenes it is treated as a React component
	     * allowing hooks, context, and other React concepts to be used. The function receives a #CellValueElement
	     * as its only argument.
	     */
	    renderCellValue: EuiDataGridCellProps['renderCellValue'];
	    /**
	     * A function called to render a cell's value. Behind the scenes it is treated as a React component
	     * allowing hooks, context, and other React concepts to be used. The function receives a #CellValueElement
	     * as its only argument.
	     */
	    renderFooterCellValue?: EuiDataGridCellProps['renderCellValue'];
	    /**
	     * Defines the look and feel for the grid. Accepts a partial #EuiDataGridStyle object. Settings provided may be overwritten or merged with user defined preferences if toolbarVisibility density controls are available.
	     */
	    gridStyle?: EuiDataGridStyle;
	    /**
	     * Accepts either a boolean or #EuiDataGridToolBarVisibilityOptions object. When used as a boolean, defines the display of the toolbar entire. WHen passed an object allows you to turn off individual controls within the toolbar as well as add additional buttons.
	     */
	    toolbarVisibility?: boolean | EuiDataGridToolBarVisibilityOptions;
	    /**
	     * A #EuiDataGridInMemory object to definite the level of high order schema-detection and sorting logic to use on your data. *Try to set when possible*. When omitted, disables all enhancements and assumes content is flat strings.
	     */
	    inMemory?: EuiDataGridInMemory;
	    /**
	     * A #EuiDataGridPagination object. Omit to disable pagination completely.
	     */
	    pagination?: EuiDataGridPaginationProps;
	    /**
	     * A #EuiDataGridSorting object that provides the sorted columns along with their direction. Omit to disable, but you'll likely want to also turn off the user sorting controls through the `toolbarVisibility` prop.
	     */
	    sorting?: EuiDataGridSorting;
	    /**
	     * A callback for when a column's size changes. Callback receives `{ columnId: string, width: number }`.
	     */
	    onColumnResize?: EuiDataGridOnColumnResizeHandler;
	    /**
	     * Defines a minimum width for the grid to show all controls in its header.
	     */
	    minSizeForControls?: number;
	    /**
	     * Sets the grid's height, forcing it to overflow in a scrollable container with cell virtualization
	     */
	    height?: CSSProperties['height'];
	    /**
	     * Sets the grid's width, forcing it to overflow in a scrollable container with cell virtualization
	     */
	    width?: CSSProperties['width'];
	    /**
	     * Allows customizing the underlying [react-window grid](https://react-window.vercel.app/#/api/VariableSizeGrid) props.
	     */
	    virtualizationOptions?: Partial<VariableSizeGridProps>;
	    /**
	     * A #EuiDataGridRowHeightsOptions object that provides row heights options
	     */
	    rowHeightsOptions?: EuiDataGridRowHeightsOptions;
	};
	export type EuiDataGridProps = OneOf<CommonGridProps, 'aria-label' | 'aria-labelledby'>;
	export interface EuiDataGridColumnResizerProps {
	    columnId: string;
	    columnWidth: number;
	    setColumnWidth: (columnId: string, width: number) => void;
	}
	export interface EuiDataGridColumnResizerState {
	    initialX: number;
	    offset: number;
	}
	export interface EuiDataGridCellPopoverProps {
	    anchorContent: NonNullable<ReactNode>;
	    cellContentProps: EuiDataGridCellValueElementProps;
	    cellContentsRef: HTMLDivElement | null;
	    closePopover: () => void;
	    column?: EuiDataGridColumn;
	    panelRefFn: RefCallback<HTMLElement | null>;
	    popoverIsOpen: boolean;
	    popoverContent: EuiDataGridPopoverContent;
	    renderCellValue: JSXElementConstructor<EuiDataGridCellValueElementProps> | ((props: EuiDataGridCellValueElementProps) => ReactNode);
	    rowIndex: number;
	}
	export interface EuiDataGridColumnSortingDraggableProps {
	    id: string;
	    direction: string;
	    index: number;
	    sorting: EuiDataGridSorting;
	    schema: EuiDataGridSchema;
	    schemaDetectors: EuiDataGridSchemaDetector[];
	    /**
	     * Value to be shown in column sorting popover.
	     */
	    display: string;
	}
	export interface EuiDataGridBodyProps {
	    isFullScreen: boolean;
	    leadingControlColumns: EuiDataGridControlColumn[];
	    trailingControlColumns: EuiDataGridControlColumn[];
	    columns: EuiDataGridColumn[];
	    visibleColCount: number;
	    schema: EuiDataGridSchema;
	    schemaDetectors: EuiDataGridSchemaDetector[];
	    popoverContents: EuiDataGridPopoverContents;
	    rowCount: number;
	    visibleRows: EuiDataGridVisibleRows;
	    renderCellValue: EuiDataGridCellProps['renderCellValue'];
	    renderFooterCellValue?: EuiDataGridCellProps['renderCellValue'];
	    interactiveCellId: EuiDataGridCellProps['interactiveCellId'];
	    pagination?: EuiDataGridPaginationProps;
	    headerIsInteractive: boolean;
	    handleHeaderMutation: MutationCallback;
	    setVisibleColumns: EuiDataGridHeaderRowProps['setVisibleColumns'];
	    switchColumnPos: EuiDataGridHeaderRowProps['switchColumnPos'];
	    onColumnResize?: EuiDataGridOnColumnResizeHandler;
	    toolbarHeight: number;
	    virtualizationOptions?: Partial<VariableSizeGridProps>;
	    rowHeightsOptions?: EuiDataGridRowHeightsOptions;
	    gridStyles: EuiDataGridStyle;
	    gridWidth: number;
	    gridRef: MutableRefObject<Grid | null>;
	    gridItemsRendered: MutableRefObject<GridOnItemsRenderedProps | null>;
	    wrapperRef: MutableRefObject<HTMLDivElement | null>;
	}
	export interface EuiDataGridCellValueElementProps {
	    /**
	     * index of the row being rendered, 0 represents the first row. This index always includes
	     * pagination offset, meaning the first rowIndex in a grid is `pagination.pageIndex * pagination.pageSize`
	     * so take care if you need to adjust the rowIndex to fit your data
	     */
	    rowIndex: number;
	    /**
	     * id of the column being rendered, the value comes from the #EuiDataGridColumn `id`
	     */
	    columnId: string;
	    /**
	     * callback function to set custom props & attributes on the cell's wrapping `div` element;
	     * it's best to wrap calls to `setCellProps` in a `useEffect` hook
	     */
	    setCellProps: (props: CommonProps & HTMLAttributes<HTMLDivElement>) => void;
	    /**
	     * whether or not the cell is expandable, comes from the #EuiDataGridColumn `isExpandable` which defaults to `true`
	     */
	    isExpandable: boolean;
	    /**
	     * whether or not the cell is expanded
	     */
	    isExpanded: boolean;
	    /**
	     * when rendering the cell, `isDetails` is false; when the cell is expanded, `renderCellValue` is called again to render into the details popover and `isDetails` is true
	     */
	    isDetails: boolean;
	}
	export interface EuiDataGridCellProps {
	    rowIndex: number;
	    visibleRowIndex: number;
	    colIndex: number;
	    column?: EuiDataGridColumn;
	    columnId: string;
	    columnType?: string | null;
	    width?: number;
	    interactiveCellId: string;
	    isExpandable: boolean;
	    className?: string;
	    popoverContent: EuiDataGridPopoverContent;
	    renderCellValue: JSXElementConstructor<EuiDataGridCellValueElementProps> | ((props: EuiDataGridCellValueElementProps) => ReactNode);
	    setRowHeight?: (height: number) => void;
	    getRowHeight?: (rowIndex: number) => number;
	    style?: React.CSSProperties;
	    rowHeightsOptions?: EuiDataGridRowHeightsOptions;
	    rowHeightUtils?: RowHeightUtils;
	    rowManager?: EuiDataGridRowManager;
	}
	export interface EuiDataGridCellState {
	    cellProps: CommonProps & HTMLAttributes<HTMLDivElement>;
	    popoverIsOpen: boolean;
	    isFocused: boolean;
	    isEntered: boolean;
	    enableInteractions: boolean;
	    disableCellTabIndex: boolean;
	}
	export type EuiDataGridCellValueProps = Omit<EuiDataGridCellProps, 'width' | 'interactiveCellId' | 'popoverContent' | 'rowManager'>;
	export interface EuiDataGridControlColumn {
	    /**
	     * Used as the React `key` when rendering content
	     */
	    id: string;
	    /**
	     * Component to render in the column header
	     */
	    headerCellRender: ComponentType;
	    /**
	     * Component to render for each row in the column
	     */
	    rowCellRender: EuiDataGridCellProps['renderCellValue'];
	    /**
	     * Width of the column, uses are unable to change this
	     */
	    width: number;
	}
	export interface EuiDataGridColumn {
	    /**
	     * The unique identifier for this column
	     */
	    id: string;
	    /**
	     * A `ReactNode` used when rendering the column header. When providing complicated content, please make sure to utilize CSS to respect truncation as space allows. Check the docs example.
	     */
	    display?: ReactNode;
	    /**
	     * A Schema to use for the column. Built-in values are ['boolean', 'currency', 'datetime', 'numeric', 'json'] but can be expanded by defining your own #EuiDataGrid `schemaDetectors` (for in-memory detection). In general, it is advised to pass in a value here when you are sure of the schema ahead of time, so that you don't need to rely on the automatic detection.
	     */
	    schema?: string;
	    /**
	     * Defaults to true, always true if cellActions are defined. Defines whether or not the column's cells can be expanded with a popup onClick / keydown.
	     */
	    isExpandable?: boolean;
	    /**
	     * Whether this column's width can be changed by the user, defaults to true
	     */
	    isResizable?: boolean;
	    /**
	     * Initial width (in pixels) of the column
	     */
	    initialWidth?: number;
	    /**
	     * Whether this column is sortable
	     */
	    isSortable?: boolean;
	    /**
	     * Default sort direction of the column
	     */
	    defaultSortDirection?: 'asc' | 'desc';
	    /**
	     * Display name as text for column. This can be used to display column name in column selector and column sorting where `display` won't be used. If not used `id` will be shown as column name in column selector and column sorting.
	     */
	    displayAsText?: string;
	    /**
	     * Configuration of column actions. Set to false to disable or use #EuiDataGridColumnActions to configure the actions displayed in the header cell of the column.
	     */
	    actions?: false | EuiDataGridColumnActions;
	    /**
	     * Additional actions displayed as icon on hover / focus, and in the expanded view of the cell containing the value
	     */
	    cellActions?: EuiDataGridColumnCellAction[];
	}
	export type EuiDataGridColumnCellAction = JSXElementConstructor<EuiDataGridColumnCellActionProps> | ((props: EuiDataGridColumnCellActionProps) => ReactNode);
	export interface EuiDataGridColumnActions {
	    /**
	     * Show/hide/configure the action to hide a column, provided EuiListGroupItemProps are merged
	     */
	    showHide?: boolean | EuiListGroupItemProps;
	    /**
	     * Show/hide/configure the action that switches the actual column with the column to the left side, provided EuiListGroupItemProps are merged
	     */
	    showMoveLeft?: boolean | EuiListGroupItemProps;
	    /**
	     * Show/hide/configure the action that switches the actual column with the column to the right side, provided EuiListGroupItemProps are merged
	     */
	    showMoveRight?: boolean | EuiListGroupItemProps;
	    /**
	     * Show/hide/configure the action to sort ascending by the actual column, provided EuiListGroupItemProps are merged
	     */
	    showSortAsc?: boolean | EuiListGroupItemProps;
	    /**
	     * Show/hide/configure the action to sort descending by the actual column, provided EuiListGroupItemProps are merged
	     */
	    showSortDesc?: boolean | EuiListGroupItemProps;
	    /**
	     * Append additional actions
	     */
	    additional?: EuiListGroupItemProps[];
	}
	export interface EuiDataGridColumnCellActionProps {
	    /**
	     * The index of the row that contains cell's data
	     */
	    rowIndex: number;
	    /**
	     * The id of the column that contains the cell's data
	     */
	    columnId: string;
	    /**
	     * React component representing the action displayed in the cell
	     */
	    Component: typeof EuiButtonEmpty | typeof EuiButtonIcon;
	    /**
	     * Determines whether the cell's action is displayed expanded (in the Popover)
	     */
	    isExpanded: boolean;
	    /**
	     * Closes the popover if a cell is expanded.
	     * The prop is provided for an expanded cell only.
	     */
	    closePopover: () => void;
	}
	export interface EuiDataGridColumnVisibility {
	    /**
	     * An array of #EuiDataGridColumn `id`s dictating the order and visibility of columns.
	     */
	    visibleColumns: string[];
	    /**
	     * A callback for when a column's visibility or order is modified by the user.
	     */
	    setVisibleColumns: (visibleColumns: string[]) => void;
	}
	export interface EuiDataGridColumnWidths {
	    [key: string]: number;
	}
	export type EuiDataGridStyleFontSizes = 's' | 'm' | 'l';
	export type EuiDataGridStyleBorders = 'all' | 'horizontal' | 'none';
	export type EuiDataGridStyleHeader = 'shade' | 'underline';
	export type EuiDataGridStyleFooter = 'shade' | 'overline' | 'striped';
	export type EuiDataGridStyleRowHover = 'highlight' | 'none';
	export type EuiDataGridStyleCellPaddings = 's' | 'm' | 'l';
	export interface EuiDataGridStyle {
	    /**
	     * Size of fonts used within the row and column cells
	     */
	    fontSize?: EuiDataGridStyleFontSizes;
	    /**
	     * Border uses for the row and column cells
	     */
	    border?: EuiDataGridStyleBorders;
	    /**
	     * If set to true, rows will alternate zebra striping for clarity
	     */
	    stripes?: boolean;
	    /**
	     * Visual style for the column headers. Recommendation is to use the `underline` style in times when #EuiDataGrid `toolbarVisibility` is set to `false`.
	     */
	    header?: EuiDataGridStyleHeader;
	    /**
	     * Visual style for the column footers.
	     */
	    footer?: EuiDataGridStyleFooter;
	    /**
	     * Will define what visual style to show on row hover
	     */
	    rowHover?: EuiDataGridStyleRowHover;
	    /**
	     * Defines the padding with the row and column cells
	     */
	    cellPadding?: EuiDataGridStyleCellPaddings;
	    /**
	     * If set to true, the footer row will be sticky
	     */
	    stickyFooter?: boolean;
	    /**
	     * Optional callback returning the current `gridStyle` config when changes occur from user input (e.g. toolbar display controls).
	     * Can be used for, e.g. storing user `gridStyle` in a local storage object.
	     */
	    onChange?: (gridStyle: EuiDataGridStyle) => void;
	}
	export interface EuiDataGridToolBarVisibilityColumnSelectorOptions {
	    /**
	     * When `false`, removes the ability to show & hide columns through the UI
	     */
	    allowHide?: boolean;
	    /**
	     * When `false`, removes the ability to re-order columns through the UI
	     */
	    allowReorder?: boolean;
	}
	export interface EuiDataGridToolBarVisibilityDisplaySelectorOptions {
	    /**
	     * When `false`, removes the ability to change density display through the UI
	     */
	    allowDensity?: boolean;
	    /**
	     * When `false`, removes the ability to change row height display through the UI
	     */
	    allowRowHeight?: boolean;
	}
	export interface EuiDataGridToolBarVisibilityOptions {
	    /**
	     * Allows the ability for the user to hide fields and sort columns, boolean or a #EuiDataGridToolBarVisibilityColumnSelectorOptions
	     */
	    showColumnSelector?: boolean | EuiDataGridToolBarVisibilityColumnSelectorOptions;
	    /**
	     * Allows the ability for the user to customize display settings such as grid density and row heights.
	     * User changes will override what is provided in #EuiDataGridStyle and #EuiDataGridRowHeightsOptions
	     */
	    showDisplaySelector?: boolean | EuiDataGridToolBarVisibilityDisplaySelectorOptions;
	    /**
	     * Allows the ability for the user to sort rows based upon column values
	     */
	    showSortSelector?: boolean;
	    /**
	     * Allows user to be able to full screen the data grid. If set to `false` make sure your grid fits within a large enough panel to still show the other controls.
	     */
	    showFullScreenSelector?: boolean;
	    /**
	     * If passed a `ReactNode`, appends the passed custom control into the left side of the toolbar, after the column & sort controls.
	     * Or use #EuiDataGridToolBarAdditionalControlsOptions to customize the location of your control.
	     */
	    additionalControls?: ReactNode | EuiDataGridToolBarAdditionalControlsOptions;
	}
	export interface EuiDataGridToolBarAdditionalControlsOptions {
	    /**
	     * If passed a `ReactNode`, appends the passed node into the left side of the toolbar, **after** the column & sort controls.
	     * Or use #EuiDataGridToolBarAdditionalControlsLeftOptions to customize the location of your control.
	     * We recommend using `<EuiButtonEmpty size="xs" />` to match the existing controls on the left.
	     */
	    left?: ReactNode | EuiDataGridToolBarAdditionalControlsLeftOptions;
	    /**
	     * Will prepend the passed node into the right side of the toolbar, **before** the density & full screen controls.
	     * We recommend using `<EuiButtonIcon size="xs" />` to match the existing controls on the right.
	     */
	    right?: ReactNode;
	}
	export interface EuiDataGridToolBarAdditionalControlsLeftOptions {
	    /**
	     * Will prepend the passed node into the left side of the toolbar, **before** the column & sort controls.
	     */
	    prepend?: ReactNode;
	    /**
	     * Will append the passed node into the left side of the toolbar, **after** the column & sort controls.
	     */
	    append?: ReactNode;
	}
	export interface EuiDataGridPaginationProps {
	    /**
	     * The index of the current page, starts at 0 for the first page
	     */
	    pageIndex: number;
	    /**
	     * How many rows should initially be shown per page
	     */
	    pageSize: number;
	    /**
	     * An array of page sizes the user can select from.
	     * Leave this prop undefined or use an empty array to hide "Rows per page" select button
	     */
	    pageSizeOptions?: number[];
	    /**
	     * A callback for when the user changes the page size selection
	     */
	    onChangeItemsPerPage: (itemsPerPage: number) => void;
	    /**
	     * A callback for when the current page index changes
	     */
	    onChangePage: (pageIndex: number) => void;
	}
	export interface EuiDataGridSorting {
	    /**
	     * A function that receives updated column sort details in response to user interactions in the toolbar controls
	     */
	    onSort: (columns: EuiDataGridSorting['columns']) => void;
	    /**
	     * An array of the column ids currently being sorted and their sort direction. The array order determines the sort order. `{ id: 'A'; direction: 'asc' }`
	     */
	    columns: Array<{
	        id: string;
	        direction: 'asc' | 'desc';
	    }>;
	}
	export interface EuiDataGridInMemory {
	    /**
	      Given the data flow Sorting->Pagination:
	      Each step can be performed by service calls or in-memory by the grid.
	      However, we cannot allow any service calls after an in-memory operation.
	      E.g. if Pagination requires a service call the grid cannot perform
	      in-memory Sorting. This means a single value representing the
	      service / in-memory boundary can be used. Thus there are four states for in-memory's level:
	      * "enhancements" - no in-memory operations, but use the available data to enhance the grid
	      * "pagination" - only pagination is performed in-memory
	      * "sorting" - sorting & pagination is performed in-memory
	   */
	    level: 'enhancements' | 'pagination' | 'sorting';
	    /**
	     * An array of column ids for the in-memory processing to skip
	     */
	    skipColumns?: string[];
	}
	export type EuiDataGridFocusedCell = [number, number];
	export interface EuiDataGridInMemoryValues {
	    [rowIndex: string]: {
	        [columnId: string]: string;
	    };
	}
	export interface EuiDataGridPopoverContentProps {
	    /**
	     * your `cellValueRenderer` as a ReactElement; allows wrapping the rendered content: `({children}) => <div>{children}</div>`
	     */
	    children: ReactNode;
	    /**
	     * div element the cell contents have been rendered into; useful for processing the rendered text
	     */
	    cellContentsElement: HTMLDivElement;
	}
	export type EuiDataGridPopoverContent = ComponentType<EuiDataGridPopoverContentProps>;
	export interface EuiDataGridPopoverContents {
	    [key: string]: EuiDataGridPopoverContent;
	}
	export interface EuiDataGridOnColumnResizeData {
	    columnId: string;
	    width: number;
	}
	export type EuiDataGridOnColumnResizeHandler = (data: EuiDataGridOnColumnResizeData) => void;
	export type EuiDataGridRowHeightOption = number | 'auto' | ExclusiveUnion<{
	    lineCount: number;
	}, {
	    height: number;
	}>;
	export interface EuiDataGridRowHeightsOptions {
	    /**
	     * Defines the default size for all rows. It can be line count or just height.
	     */
	    defaultHeight?: EuiDataGridRowHeightOption;
	    /**
	     * Defines the height for a specific row. It can be line count or just height.
	     *
	     * When using row height overrides, we strongly setting the `showDisplaySelector: allowRowHeight`
	     * toolbar control to `false` in #EuiDataGridToolBarVisibilityOptions
	     */
	    rowHeights?: Record<number, EuiDataGridRowHeightOption>;
	    /**
	     * Defines a global lineHeight style to apply to all cells
	     */
	    lineHeight?: string;
	    /**
	     * Optional callback returning the current `rowHeightsOptions` when changes occur from user input (e.g. toolbar display controls).
	     * Can be used for, e.g. storing user `rowHeightsOptions` in a local storage object.
	     */
	    onChange?: (rowHeightsOptions: EuiDataGridRowHeightsOptions) => void;
	}
	export interface EuiDataGridRowManager {
	    getRow(rowIndex: number): HTMLDivElement;
	}

}
declare module '@elastic/eui/src/components/datagrid/utils/focus' {
	import { HTMLAttributes, KeyboardEvent, MutableRefObject } from 'react';
	import { GridOnItemsRenderedProps } from 'react-window';
	import { DataGridFocusContextShape, EuiDataGridFocusedCell, EuiDataGridProps } from '@elastic/eui/src/components/datagrid/data_grid_types';
	export const DataGridFocusContext: import("react").Context<DataGridFocusContextShape>; type FocusProps = Pick<HTMLAttributes<HTMLDivElement>, 'tabIndex' | 'onFocus'>;
	/**
	 * Main focus context and overarching focus state management
	 */
	export const useFocus: ({ headerIsInteractive, gridItemsRendered, }: {
	    headerIsInteractive: boolean;
	    gridItemsRendered: MutableRefObject<GridOnItemsRenderedProps | null>;
	}) => DataGridFocusContextShape & {
	    focusProps: FocusProps;
	};
	export const notifyCellOfFocusState: (cellsUpdateFocus: Map<string, Function>, cell: EuiDataGridFocusedCell, isFocused: boolean) => void;
	/**
	 * Keydown handler for connecting focus state with keyboard navigation
	 */
	export const createKeyDownHandler: ({ gridElement, visibleColCount, visibleRowCount, visibleRowStartIndex, rowCount, pagination, hasFooter, headerIsInteractive, focusContext, }: {
	    gridElement: HTMLDivElement | null;
	    visibleColCount: number;
	    visibleRowCount: number;
	    visibleRowStartIndex: number;
	    rowCount: EuiDataGridProps['rowCount'];
	    pagination: EuiDataGridProps['pagination'];
	    hasFooter: boolean;
	    headerIsInteractive: boolean;
	    focusContext: DataGridFocusContextShape;
	}) => (event: KeyboardEvent<HTMLDivElement>) => void;
	/**
	 * Mutation observer for the grid body, which exists to pick up DOM changes
	 * in cells and remove interactive elements from the page's tab index, as
	 * we want to move between cells via arrow keys instead of tabbing.
	 */
	export const preventTabbing: (records: MutationRecord[]) => void;
	export const getParentCellContent: (_element: Node | HTMLElement) => HTMLElement | null;
	/**
	 * Focus fixes & workarounds
	 */
	export const useHeaderFocusWorkaround: (headerIsInteractive: boolean) => void;
	export {};

}
declare module '@elastic/eui/src/components/datagrid/body/data_grid_cell_buttons' {
	
	import { EuiDataGridColumn } from '@elastic/eui/src/components/datagrid/data_grid_types';
	export const EuiDataGridCellButtons: ({ popoverIsOpen, closePopover, onExpandClick, column, rowIndex, }: {
	    popoverIsOpen: boolean;
	    closePopover: () => void;
	    onExpandClick: () => void;
	    column?: EuiDataGridColumn | undefined;
	    rowIndex: number;
	}) => JSX.Element;

}
declare module '@elastic/eui/src/components/datagrid/body/data_grid_cell_popover' {
	
	import { EuiDataGridCellPopoverProps } from '@elastic/eui/src/components/datagrid/data_grid_types';
	export function EuiDataGridCellPopover({ anchorContent, cellContentProps, cellContentsRef, closePopover, column, panelRefFn, popoverContent: PopoverContent, popoverIsOpen, renderCellValue, rowIndex, }: EuiDataGridCellPopoverProps): JSX.Element;

}
declare module '@elastic/eui/src/components/datagrid/body/data_grid_cell' {
	import React, { Component, FocusEvent, HTMLAttributes, MutableRefObject } from 'react';
	import { EuiDataGridCellProps, EuiDataGridCellState } from '@elastic/eui/src/components/datagrid/data_grid_types';
	export class EuiDataGridCell extends Component<EuiDataGridCellProps, EuiDataGridCellState> {
	    static activeFocusTimeoutId: number | undefined;
	    cellRef: React.MutableRefObject<HTMLDivElement | null>;
	    contentObserver: any;
	    popoverPanelRef: MutableRefObject<HTMLElement | null>;
	    cellContentsRef: HTMLDivElement | null;
	    state: EuiDataGridCellState;
	    unsubscribeCell?: Function;
	    focusTimeout: number | undefined;
	    style: null;
	    static contextType: React.Context<import ("@elastic/eui/src/components/datagrid/data_grid_types").DataGridFocusContextShape>;
	    getInteractables: () => never[] | NodeListOf<HTMLElement>;
	    takeFocus: (preventScroll: boolean) => void;
	    recalculateAutoHeight: () => void;
	    recalculateLineHeight: () => void;
	    componentDidMount(): void;
	    isFocusedCell: () => boolean;
	    onFocusUpdate: (isFocused: boolean, preventScroll?: boolean) => void;
	    componentWillUnmount(): void;
	    componentDidUpdate(prevProps: EuiDataGridCellProps): void;
	    shouldComponentUpdate(nextProps: EuiDataGridCellProps, nextState: EuiDataGridCellState): boolean;
	    setCellProps: (cellProps: HTMLAttributes<HTMLDivElement>) => void;
	    setCellContentsRef: (ref: HTMLDivElement | null) => void;
	    onFocus: (e: FocusEvent<HTMLDivElement>) => void;
	    onBlur: () => void;
	    preventTabbing: () => void;
	    enableTabbing: () => void;
	    closePopover: () => void;
	    render(): JSX.Element;
	}

}
declare module '@elastic/eui/src/components/datagrid/body/popover_utils' {
	import { EuiDataGridPopoverContents, EuiDataGridPopoverContent } from '@elastic/eui/src/components/datagrid/data_grid_types';
	export const DefaultColumnFormatter: EuiDataGridPopoverContent;
	export const providedPopoverContents: EuiDataGridPopoverContents;

}
declare module '@elastic/eui/src/components/datagrid/body/data_grid_footer_row' {
	import React from 'react'; const EuiDataGridFooterRow: React.MemoExoticComponent<React.ForwardRefExoticComponent<import ("@elastic/eui/src/components").CommonProps & React.HTMLAttributes<HTMLDivElement> & {
	    rowIndex: number;
	    leadingControlColumns: import ("@elastic/eui/src/components/datagrid/data_grid_types").EuiDataGridControlColumn[];
	    trailingControlColumns: import ("@elastic/eui/src/components/datagrid/data_grid_types").EuiDataGridControlColumn[];
	    columns: import ("@elastic/eui/src/components/datagrid/data_grid_types").EuiDataGridColumn[];
	    schema: import ("@elastic/eui/src/components/datagrid/data_grid_types").EuiDataGridSchema;
	    popoverContents: import ("@elastic/eui/src/components/datagrid/data_grid_types").EuiDataGridPopoverContents;
	    columnWidths: import ("@elastic/eui/src/components/datagrid/data_grid_types").EuiDataGridColumnWidths;
	    defaultColumnWidth?: number | null | undefined;
	    renderCellValue: ((props: import ("@elastic/eui/src/components/datagrid/data_grid_types").EuiDataGridCellValueElementProps) => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: import ("@elastic/eui/src/components/datagrid/data_grid_types").EuiDataGridCellValueElementProps) => React.Component<import ("@elastic/eui/src/components/datagrid/data_grid_types").EuiDataGridCellValueElementProps, any, any>) | ((props: import ("@elastic/eui/src/components/datagrid/data_grid_types").EuiDataGridCellValueElementProps) => React.ReactNode);
	    interactiveCellId: string;
	    visibleRowIndex?: number | undefined;
	} & React.RefAttributes<HTMLDivElement>>>;
	export { EuiDataGridFooterRow };

}
declare module '@elastic/eui/src/components/datagrid/body/header/data_grid_header_cell_wrapper' {
	import { FunctionComponent } from 'react';
	import { EuiDataGridHeaderCellWrapperProps } from '@elastic/eui/src/components/datagrid/data_grid_types';
	/**
	 * This is a wrapper that handles repeated concerns between control &
	 * standard header cells. Most of its shared logic is around focus state/UX,
	 * but it also DRY's out certain class/data-test-subj/style attributes
	 */
	export const EuiDataGridHeaderCellWrapper: FunctionComponent<EuiDataGridHeaderCellWrapperProps>;

}
declare module '@elastic/eui/src/components/datagrid/body/header/data_grid_control_header_cell' {
	import { FunctionComponent } from 'react';
	import { EuiDataGridControlHeaderCellProps } from '@elastic/eui/src/components/datagrid/data_grid_types';
	export const EuiDataGridControlHeaderCell: FunctionComponent<EuiDataGridControlHeaderCellProps>;

}
declare module '@elastic/eui/src/components/drag_and_drop/drag_drop_context' {
	import React, { FunctionComponent } from 'react';
	import { DragDropContextProps } from 'react-beautiful-dnd'; type EuiDraggingType = string | null;
	export interface EuiDragDropContextProps {
	    isDraggingType: EuiDraggingType;
	}
	export const EuiDragDropContextContext: React.Context<EuiDragDropContextProps>;
	export const EuiDragDropContext: FunctionComponent<DragDropContextProps>;
	export {};

}
declare module '@elastic/eui/src/components/drag_and_drop/droppable' {
	import React, { CSSProperties, FunctionComponent, ReactElement } from 'react';
	import { DroppableProps } from 'react-beautiful-dnd';
	import { CommonProps } from '@elastic/eui/src/components/common'; const spacingToClassNameMap: {
	    none: null;
	    s: string;
	    m: string;
	    l: string;
	};
	export type EuiDroppableSpacing = keyof typeof spacingToClassNameMap;
	export interface EuiDroppableProps extends CommonProps, Omit<DroppableProps, 'children'> {
	    /**
	     * ReactNode to render as this component's content
	     */
	    children: ReactElement | ReactElement[] | DroppableProps['children'];
	    className?: string;
	    /**
	     * Makes its items immutable. Dragging creates cloned items that can be dropped elsewhere.
	     */
	    cloneDraggables?: boolean;
	    style?: CSSProperties;
	    /**
	     * Adds padding to the droppable area
	     */
	    spacing?: EuiDroppableSpacing;
	    /**
	     * Adds an EuiPanel style to the droppable area
	     */
	    withPanel?: boolean;
	    /**
	     * Allow the panel to flex-grow?
	     */
	    grow?: boolean;
	}
	export const EuiDroppableContext: React.Context<{
	    cloneItems: boolean;
	}>;
	export const EuiDroppable: FunctionComponent<EuiDroppableProps>;
	export {};

}
declare module '@elastic/eui/src/components/drag_and_drop/draggable' {
	import { CSSProperties, FunctionComponent, ReactElement } from 'react';
	import { DraggableProps } from 'react-beautiful-dnd';
	import { CommonProps } from '@elastic/eui/src/components/common'; const spacingToClassNameMap: {
	    none: null;
	    s: string;
	    m: string;
	    l: string;
	};
	export type EuiDraggableSpacing = keyof typeof spacingToClassNameMap;
	export interface EuiDraggableProps extends CommonProps, Omit<DraggableProps, 'children'> {
	    /**
	     * ReactNode to render as this component's content
	     */
	    children: ReactElement | DraggableProps['children'];
	    className?: string;
	    /**
	     * Whether the `children` will provide and set up its own drag handle
	     */
	    customDragHandle?: boolean;
	    /**
	     * Whether the item is currently in a position to be removed
	     */
	    isRemovable?: boolean;
	    /**
	     * Adds padding to the draggable item
	     */
	    spacing?: EuiDraggableSpacing;
	    style?: CSSProperties;
	}
	export const EuiDraggable: FunctionComponent<EuiDraggableProps>;
	export {};

}
declare module '@elastic/eui/src/components/drag_and_drop/services' {
	import { DraggableLocation } from 'react-beautiful-dnd';
	interface DropResult {
	    [droppableId: string]: any[];
	}
	export const euiDragDropReorder: <T extends any[]>(list: T, startIndex: number, endIndex: number) => T;
	export const euiDragDropMove: (sourceList: any[], destinationList: any[], dropResultSource: DraggableLocation, dropResultDestination: DraggableLocation) => DropResult;
	export const euiDragDropCopy: (sourceList: any[], destinationList: any[], dropResultSource: DraggableLocation, dropResultDestination: DraggableLocation, idModification: {
	    property: string | number;
	    modifier: () => string | number;
	}) => DropResult;
	export {};

}
declare module '@elastic/eui/src/components/drag_and_drop' {
	export { EuiDragDropContext, EuiDragDropContextProps, } from '@elastic/eui/src/components/drag_and_drop/drag_drop_context';
	export { EuiDraggable, EuiDraggableProps } from '@elastic/eui/src/components/drag_and_drop/draggable';
	export { EuiDroppable, EuiDroppableProps } from '@elastic/eui/src/components/drag_and_drop/droppable';
	export { euiDragDropCopy, euiDragDropMove, euiDragDropReorder, } from '@elastic/eui/src/components/drag_and_drop/services';
	export { DraggableLocation, DraggableProps, DraggableProvidedDragHandleProps, DragDropContextProps, DragStart, DroppableProps, DropResult, ResponderProvided, } from 'react-beautiful-dnd';

}
declare module '@elastic/eui/src/components/datagrid/controls/column_sorting_draggable' {
	import { FunctionComponent } from 'react';
	import { EuiDataGridColumnSortingDraggableProps } from '@elastic/eui/src/components/datagrid/data_grid_types';
	export const defaultSortAscLabel: JSX.Element;
	export const defaultSortDescLabel: JSX.Element;
	export const EuiDataGridColumnSortingDraggable: FunctionComponent<EuiDataGridColumnSortingDraggableProps>;

}
declare module '@elastic/eui/src/components/datagrid/body/header/column_actions' {
	import { EuiDataGridColumn, EuiDataGridColumnActions, EuiDataGridSchema, EuiDataGridSchemaDetector, EuiDataGridSorting, DataGridFocusContextShape } from '@elastic/eui/src/components/datagrid/data_grid_types';
	import { EuiListGroupItemProps } from '@elastic/eui/src/components/list_group';
	interface GetColumnActions {
	    column: EuiDataGridColumn;
	    columns: EuiDataGridColumn[];
	    schema: EuiDataGridSchema;
	    schemaDetectors: EuiDataGridSchemaDetector[];
	    setVisibleColumns: (columnId: string[]) => void;
	    focusFirstVisibleInteractiveCell: DataGridFocusContextShape['focusFirstVisibleInteractiveCell'];
	    setIsPopoverOpen: (value: boolean) => void;
	    sorting: EuiDataGridSorting | undefined;
	    switchColumnPos: (colFromId: string, colToId: string) => void;
	    setFocusedCell: DataGridFocusContextShape['setFocusedCell'];
	}
	export const getColumnActions: ({ column, columns, schema, schemaDetectors, setVisibleColumns, focusFirstVisibleInteractiveCell, setIsPopoverOpen, sorting, switchColumnPos, setFocusedCell, }: GetColumnActions) => EuiListGroupItemProps[]; type HideColumnAction = Pick<GetColumnActions, 'column' | 'columns' | 'setVisibleColumns' | 'focusFirstVisibleInteractiveCell'>;
	export const getHideColumnAction: ({ column, columns, setVisibleColumns, focusFirstVisibleInteractiveCell, }: HideColumnAction) => EuiListGroupItemProps[]; type SortColumnActions = Pick<GetColumnActions, 'column' | 'sorting' | 'schema' | 'schemaDetectors'>;
	export const getSortColumnActions: ({ column, sorting, schema, schemaDetectors, }: SortColumnActions) => EuiListGroupItemProps[];
	/**
	 * Column action utility helpers - mostly syntactical sugar for adding an extra
	 * actions !== false checks, which we make an early return for in the main fn,
	 * but that the individual utils don't know about and Typescript complains about
	 */
	export const isColumnActionEnabled: (actionKey: keyof EuiDataGridColumnActions, actions: EuiDataGridColumn['actions']) => boolean;
	export const getColumnActionConfig: (action: EuiListGroupItemProps, actionKey: keyof EuiDataGridColumnActions, actions: EuiDataGridColumn['actions']) => EuiListGroupItemProps;
	export {};

}
declare module '@elastic/eui/src/components/datagrid/body/header/data_grid_column_resizer' {
	import React, { Component } from 'react';
	import { EuiDataGridColumnResizerProps, EuiDataGridColumnResizerState } from '@elastic/eui/src/components/datagrid/data_grid_types';
	export class EuiDataGridColumnResizer extends Component<EuiDataGridColumnResizerProps, EuiDataGridColumnResizerState> {
	    state: {
	        initialX: number;
	        offset: number;
	    };
	    onMouseDown: (e: React.MouseEvent<HTMLDivElement>) => void;
	    onMouseUp: () => void;
	    onMouseMove: (e: {
	        pageX: number;
	    }) => void;
	    render(): JSX.Element;
	}

}
declare module '@elastic/eui/src/components/datagrid/body/header/data_grid_header_cell' {
	import { FunctionComponent } from 'react';
	import { EuiDataGridHeaderCellProps } from '@elastic/eui/src/components/datagrid/data_grid_types';
	export const EuiDataGridHeaderCell: FunctionComponent<EuiDataGridHeaderCellProps>;

}
declare module '@elastic/eui/src/components/datagrid/body/header/data_grid_header_row' {
	import React from 'react'; const EuiDataGridHeaderRow: React.ForwardRefExoticComponent<import ("@elastic/eui/src/components").CommonProps & React.HTMLAttributes<HTMLDivElement> & import ("@elastic/eui/src/components/datagrid/data_grid_types").EuiDataGridHeaderRowPropsSpecificProps & React.RefAttributes<HTMLDivElement>>;
	export { EuiDataGridHeaderRow };

}
declare module '@elastic/eui/src/components/datagrid/body/header' {
	export { EuiDataGridHeaderRow } from '@elastic/eui/src/components/datagrid/body/header/data_grid_header_row';

}
declare module '@elastic/eui/src/components/datagrid/body/data_grid_row_manager' {
	import { RefObject } from 'react';
	import { EuiDataGridRowManager } from '@elastic/eui/src/components/datagrid/data_grid_types';
	export const makeRowManager: (containerRef: RefObject<HTMLDivElement>) => EuiDataGridRowManager;

}
declare module '@elastic/eui/src/components/datagrid/utils/grid_height_width' {
	import { MutableRefObject } from 'react';
	import { EuiDataGridRowHeightsOptions } from '@elastic/eui/src/components/datagrid/data_grid_types';
	import { RowHeightUtils } from '@elastic/eui/src/components/datagrid/utils/row_heights';
	export const useFinalGridDimensions: ({ unconstrainedHeight, unconstrainedWidth, wrapperDimensions, wrapperRef, toolbarHeight, headerRowHeight, footerRowHeight, rowCount, isFullScreen, }: {
	    unconstrainedHeight: number;
	    unconstrainedWidth: number;
	    wrapperDimensions: {
	        width: number;
	        height: number;
	    };
	    wrapperRef: MutableRefObject<HTMLDivElement | null>;
	    toolbarHeight: number;
	    headerRowHeight: number;
	    footerRowHeight: number;
	    rowCount: number;
	    isFullScreen: boolean;
	}) => {
	    finalHeight: number;
	    finalWidth: number;
	};
	/**
	 * Computes the unconstrained (total possible) height of a grid
	 */
	export const useUnconstrainedHeight: ({ rowHeightUtils, startRow, endRow, rowHeightsOptions, defaultRowHeight, headerRowHeight, footerRowHeight, outerGridRef, innerGridRef, }: {
	    rowHeightUtils: RowHeightUtils;
	    startRow: number;
	    endRow: number;
	    rowHeightsOptions?: EuiDataGridRowHeightsOptions | undefined;
	    defaultRowHeight: number;
	    headerRowHeight: number;
	    footerRowHeight: number;
	    outerGridRef: React.MutableRefObject<HTMLDivElement | null>;
	    innerGridRef: React.MutableRefObject<HTMLDivElement | null>;
	}) => number;
	/**
	 * Returns the size of the cell container minus the scroll bar width.
	 * To do so, this hook is listening for size changes of the container itself,
	 * as well as pagination changes to make sure every update is caught.
	 *
	 * This is necessary because there is no callback/event fired by the browser
	 * indicating the scroll bar state has changed.
	 * @param resizeRef the wrapper element containging the data grid
	 * @param pageSize the currently applied page size
	 */
	export const useVirtualizeContainerWidth: (virtualizeContainer: HTMLDivElement | null, gridWidth: number, pageSize: number | undefined) => number;

}
declare module '@elastic/eui/src/components/datagrid/utils/col_widths' {
	import { EuiDataGridColumn, EuiDataGridColumnWidths, EuiDataGridControlColumn, EuiDataGridOnColumnResizeHandler, EuiDataGridProps } from '@elastic/eui/src/components/datagrid/data_grid_types';
	export const useDefaultColumnWidth: (gridWidth: number, leadingControlColumns: EuiDataGridControlColumn[], trailingControlColumns: EuiDataGridControlColumn[], columns: EuiDataGridProps['columns']) => number | null;
	export const doesColumnHaveAnInitialWidth: (column: EuiDataGridColumn) => column is EuiDataGridColumn & {
	    initialWidth: number;
	};
	export const useColumnWidths: ({ columns, leadingControlColumns, trailingControlColumns, defaultColumnWidth, onColumnResize, }: {
	    columns: EuiDataGridColumn[];
	    leadingControlColumns: EuiDataGridControlColumn[];
	    trailingControlColumns: EuiDataGridControlColumn[];
	    defaultColumnWidth?: number | null | undefined;
	    onColumnResize?: EuiDataGridOnColumnResizeHandler | undefined;
	}) => {
	    columnWidths: EuiDataGridColumnWidths;
	    setColumnWidth: (columnId: string, width: number) => void;
	    getColumnWidth: (index: number) => number;
	};

}
declare module '@elastic/eui/src/components/datagrid/utils/scrolling' {
	import { MutableRefObject } from 'react';
	import { VariableSizeGrid as Grid } from 'react-window';
	interface ScrollCellIntoView {
	    rowIndex: number;
	    colIndex: number;
	}
	interface Dependencies {
	    gridRef: MutableRefObject<Grid | null>;
	    outerGridRef: MutableRefObject<HTMLDivElement | null>;
	    innerGridRef: MutableRefObject<HTMLDivElement | null>;
	    headerRowHeight: number;
	    footerRowHeight: number;
	    visibleRowCount: number;
	    hasStickyFooter: boolean;
	}
	/**
	 * The primary goal of this scroll logic is to ensure keyboard navigation works accessibly,
	 * but there are other scenarios where it applies (e.g. clicking partially-visible cells)
	 * or is useful for (e.g. manually scrolling to cell that is currently out of viewport
	 * while accounting for headers/footers/scrollbars)
	 */
	export const useScroll: (args: Dependencies) => {
	    scrollCellIntoView: ({ rowIndex, colIndex }: ScrollCellIntoView) => Promise<void>;
	};
	/**
	 * Ensures that the passed cell is always fully in view by using cell position
	 * checks and scroll adjustments/workarounds.
	 */
	export const useScrollCellIntoView: ({ gridRef, outerGridRef, innerGridRef, headerRowHeight, footerRowHeight, visibleRowCount, hasStickyFooter, }: Dependencies) => {
	    scrollCellIntoView: ({ rowIndex, colIndex }: ScrollCellIntoView) => Promise<void>;
	};
	export {};

}
declare module '@elastic/eui/src/components/datagrid/body/data_grid_body' {
	import React, { FunctionComponent } from 'react';
	import { GridChildComponentProps } from 'react-window';
	import { EuiDataGridBodyProps, DataGridWrapperRowsContentsShape } from '@elastic/eui/src/components/datagrid/data_grid_types';
	export const Cell: FunctionComponent<GridChildComponentProps>;
	export const DataGridWrapperRowsContext: React.Context<DataGridWrapperRowsContentsShape>;
	export const EuiDataGridBody: FunctionComponent<EuiDataGridBodyProps>;

}
declare module '@elastic/eui/src/components/datagrid/body' {
	export { EuiDataGridBody } from '@elastic/eui/src/components/datagrid/body/data_grid_body';

}
declare module '@elastic/eui/src/components/datagrid/controls/data_grid_toolbar' {
	
	import { EuiDataGridProps, EuiDataGridToolbarProps, EuiDataGridToolBarVisibilityOptions } from '@elastic/eui/src/components/datagrid/data_grid_types';
	export const EuiDataGridToolbar: ({ gridWidth, minSizeForControls, toolbarVisibility, isFullScreen, controlBtnClasses, displaySelector, columnSelector, columnSorting, setRef, setIsFullScreen, }: EuiDataGridToolbarProps) => JSX.Element;
	export function checkOrDefaultToolBarDisplayOptions<OptionKey extends keyof EuiDataGridToolBarVisibilityOptions>(arg: EuiDataGridProps['toolbarVisibility'], option: OptionKey): Required<EuiDataGridToolBarVisibilityOptions>[OptionKey];
	export function renderAdditionalControls(toolbarVisibility: EuiDataGridProps['toolbarVisibility'], position: 'left.prepend' | 'left.append' | 'right'): {} | null;
	/**
	 * Utility helper for selectors/controls that allow nested options
	 * (e.g. column selector, display selector)
	 */
	export function getNestedObjectOptions<T>(controlOption: undefined | boolean | T, objectKey: keyof T): boolean;

}
declare module '@elastic/eui/src/components/datagrid/controls/column_selector' {
	import React, { ReactNode } from 'react';
	import { EuiDataGridColumn, EuiDataGridColumnVisibility, EuiDataGridToolBarVisibilityOptions } from '@elastic/eui/src/components/datagrid/data_grid_types';
	export const useDataGridColumnSelector: (availableColumns: EuiDataGridColumn[], columnVisibility: EuiDataGridColumnVisibility, showColumnSelector: EuiDataGridToolBarVisibilityOptions['showColumnSelector'], displayValues: {
	    [key: string]: string;
	}) => [React.ReactNode, EuiDataGridColumn[], (columns: string[]) => void, (colFrom: string, colTo: string) => void];

}
declare module '@elastic/eui/src/components/datagrid/controls/column_sorting' {
	import { ReactNode } from 'react';
	import { EuiDataGridColumn, EuiDataGridSchema, EuiDataGridSchemaDetector, EuiDataGridSorting } from '@elastic/eui/src/components/datagrid/data_grid_types';
	export const useDataGridColumnSorting: (columns: EuiDataGridColumn[], sorting: EuiDataGridSorting | undefined, schema: EuiDataGridSchema, schemaDetectors: EuiDataGridSchemaDetector[], displayValues: {
	    [key: string]: string;
	}) => ReactNode;

}
declare module '@elastic/eui/src/components/datagrid/controls/display_selector' {
	import { ReactNode } from 'react';
	import { EuiDataGridToolBarVisibilityOptions, EuiDataGridStyle, EuiDataGridRowHeightsOptions } from '@elastic/eui/src/components/datagrid/data_grid_types';
	export const startingStyles: EuiDataGridStyle;
	export const useDataGridDisplaySelector: (showDisplaySelector: EuiDataGridToolBarVisibilityOptions['showDisplaySelector'], initialStyles: EuiDataGridStyle, initialRowHeightsOptions?: EuiDataGridRowHeightsOptions | undefined) => [ReactNode, EuiDataGridStyle, EuiDataGridRowHeightsOptions];

}
declare module '@elastic/eui/src/components/datagrid/controls' {
	export { useDataGridColumnSelector } from '@elastic/eui/src/components/datagrid/controls/column_selector';
	export { useDataGridColumnSorting } from '@elastic/eui/src/components/datagrid/controls/column_sorting';
	export { useDataGridDisplaySelector, startingStyles } from '@elastic/eui/src/components/datagrid/controls/display_selector';
	export { checkOrDefaultToolBarDisplayOptions, EuiDataGridToolbar, } from '@elastic/eui/src/components/datagrid/controls/data_grid_toolbar';

}
declare module '@elastic/eui/src/components/datagrid/utils/in_memory' {
	import { FunctionComponent } from 'react';
	import { EuiDataGridInMemory, EuiDataGridInMemoryValues, EuiDataGridInMemoryRendererProps } from '@elastic/eui/src/components/datagrid/data_grid_types';
	/**
	 * inMemory values hook
	 */
	export const useInMemoryValues: (inMemory: EuiDataGridInMemory | undefined, rowCount: number) => [EuiDataGridInMemoryValues, (rowIndex: number, columnId: string, value: string) => void];
	/**
	 * InMemory renderer
	 */
	export const EuiDataGridInMemoryRenderer: FunctionComponent<EuiDataGridInMemoryRendererProps>;

}
declare module '@elastic/eui/src/components/datagrid/body/header/header_is_interactive' {
	export const useHeaderIsInteractive: (gridElement: HTMLElement | null) => {
	    headerIsInteractive: boolean;
	    handleHeaderMutation: MutationCallback;
	};

}
declare module '@elastic/eui/src/components/datagrid/utils/row_count' {
	import { EuiDataGridProps, EuiDataGridVisibleRows } from '@elastic/eui/src/components/datagrid/data_grid_types';
	export const computeVisibleRows: ({ pagination, rowCount, }: {
	    pagination: EuiDataGridProps['pagination'];
	    rowCount: EuiDataGridProps['rowCount'];
	}) => EuiDataGridVisibleRows;

}
declare module '@elastic/eui/src/components/pagination/pagination_button' {
	import { FunctionComponent } from 'react';
	import { ExclusiveUnion, PropsForAnchor, PropsForButton } from '@elastic/eui/src/components/common';
	import { EuiButtonEmptyProps } from '@elastic/eui/src/components/button';
	export type EuiPaginationButtonProps = EuiButtonEmptyProps & {
	    isActive?: boolean;
	    /**
	     * For ellipsis or other non-clickable buttons.
	     */
	    isPlaceholder?: boolean;
	    pageIndex: number;
	    totalPages?: number;
	}; type EuiPaginationButtonPropsForAnchor = PropsForAnchor<EuiPaginationButtonProps>; type EuiPaginationButtonPropsForButton = PropsForButton<EuiPaginationButtonProps>; type Props = ExclusiveUnion<EuiPaginationButtonPropsForAnchor, EuiPaginationButtonPropsForButton>;
	export const EuiPaginationButton: FunctionComponent<Props>;
	export {};

}
declare module '@elastic/eui/src/components/pagination/pagination_button_arrow' {
	import { FunctionComponent } from 'react';
	import { EuiButtonIconPropsForAnchor } from '@elastic/eui/src/components/button/button_icon';
	export const TYPES: ("first" | "last" | "next" | "previous")[];
	export type EuiPaginationButtonArrowType = typeof TYPES[number];
	export type Props = Partial<Omit<EuiButtonIconPropsForAnchor, 'type'>> & {
	    type: EuiPaginationButtonArrowType;
	    disabled?: boolean;
	    ariaControls?: string;
	};
	export const EuiPaginationButtonArrow: FunctionComponent<Props>;

}
declare module '@elastic/eui/src/components/pagination/pagination' {
	import { FunctionComponent, HTMLAttributes, MouseEvent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiBreakpointSize } from '@elastic/eui/src/services';
	export type PageClickHandler = (pageIndex: number) => void;
	export type SafeClickHandler = (e: MouseEvent, pageIndex: number) => void;
	export interface EuiPaginationProps {
	    /**
	     * The total number of pages.
	     * Pass `0` if total count in unknown.
	     */
	    pageCount?: number;
	    /**
	     * The current page using a zero based index.
	     * So if you set the activePage to 1, it will activate the second page.
	     * Pass `-1` for forcing to last page.
	     */
	    activePage?: number;
	    /**
	     * Click handler that passes back the internally calculated `activePage` index
	     */
	    onPageClick?: (pageIndex: number) => void;
	    /**
	     * If true, will only show next/prev arrows and simplified number set.
	     */
	    compressed?: boolean;
	    /**
	     * If passed in, passes value through to each button to set aria-controls.
	     */
	    'aria-controls'?: string;
	    /**
	     * Automatically reduces to the `compressed` version on smaller screens.
	     * Remove completely with `false` or provide your own list of responsive breakpoints.
	     */
	    responsive?: false | EuiBreakpointSize[];
	} type Props = CommonProps & HTMLAttributes<HTMLDivElement> & EuiPaginationProps;
	export const EuiPagination: FunctionComponent<Props>;
	export {};

}
declare module '@elastic/eui/src/components/pagination' {
	export { EuiPagination, EuiPaginationProps } from '@elastic/eui/src/components/pagination/pagination';
	export { EuiPaginationButton, EuiPaginationButtonProps, } from '@elastic/eui/src/components/pagination/pagination_button';

}
declare module '@elastic/eui/src/components/table/table_pagination/table_pagination' {
	import { Component } from 'react';
	export type PageChangeHandler = (pageIndex: number) => void;
	export type ItemsPerPageChangeHandler = (pageSize: number) => void;
	export interface EuiTablePaginationProps {
	    activePage?: number;
	    hidePerPageOptions?: boolean;
	    itemsPerPage?: number;
	    itemsPerPageOptions?: number[];
	    onChangeItemsPerPage?: ItemsPerPageChangeHandler;
	    onChangePage?: PageChangeHandler;
	    pageCount?: number;
	    /**
	     * id of the table being controlled
	     */
	    'aria-controls'?: string;
	    'aria-label'?: string;
	}
	interface State {
	    isPopoverOpen: boolean;
	}
	export class EuiTablePagination extends Component<EuiTablePaginationProps, State> {
	    state: {
	        isPopoverOpen: boolean;
	    };
	    onButtonClick: () => void;
	    closePopover: () => void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/table/table_pagination' {
	export { EuiTablePagination, EuiTablePaginationProps, } from '@elastic/eui/src/components/table/table_pagination/table_pagination';

}
declare module '@elastic/eui/src/components/datagrid/utils/data_grid_pagination' {
	
	import { EuiDataGridPaginationRendererProps } from '@elastic/eui/src/components/datagrid/data_grid_types';
	export const EuiDataGridPaginationRenderer: ({ pageIndex, pageSize, pageSizeOptions, onChangePage: _onChangePage, onChangeItemsPerPage, rowCount, controls, "aria-label": ariaLabel, gridRef, }: EuiDataGridPaginationRendererProps) => JSX.Element | null;

}
declare module '@elastic/eui/src/components/datagrid/data_grid' {
	import { FunctionComponent } from 'react';
	import { EuiDataGridProps } from '@elastic/eui/src/components/datagrid/data_grid_types';
	export const EuiDataGrid: FunctionComponent<EuiDataGridProps>;

}
declare module '@elastic/eui/src/components/datagrid' {
	export { EuiDataGrid } from '@elastic/eui/src/components/datagrid/data_grid';
	export { useDataGridColumnSelector, useDataGridColumnSorting, useDataGridDisplaySelector, } from '@elastic/eui/src/components/datagrid/controls';
	export * from '@elastic/eui/src/components/datagrid/data_grid_types';

}
declare module '@elastic/eui/src/components/date_picker/react-datepicker/src' {
	/*
	 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
	 * or more contributor license agreements. Licensed under the Elastic License
	 * 2.0 and the Server Side Public License, v 1; you may not use this file except
	 * in compliance with, at your election, the Elastic License 2.0 or the Server
	 * Side Public License, v 1.
	 */

	// Type definitions for react-datepicker 1.8
	// Project: https://github.com/Hacker0x01/react-datepicker
	// Definitions by: Rajab Shakirov <https://github.com/radziksh>,
	//                 Andrey Balokha <https://github.com/andrewBalekha>,
	//                 Greg Smith <https://github.com/smrq>,
	//                 Platon Pronko <https://github.com/Rogach>
	//                 Roy Xue <https://github.com/royxue>
	//                 Koala Human <https://github.com/KoalaHuman>
	//                 Sean Kelley <https://github.com/seansfkelley>
	//                 Justin Grant <https://github.com/justingrant>
	// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
	// TypeScript Version: 2.8

	import * as React from 'react';
	import * as moment from 'moment';

	import {PopoverAnchorPosition} from '@elastic/eui/src/components/popover';

	export interface ReactDatePickerProps {
	  /**
	   * Whether changes to Year and Month (via dropdowns) should trigger `onChange`
	   */
	  adjustDateOnChange?: boolean;
	  accessibleMode?: boolean;
	  allowSameDay?: boolean;
	  autoComplete?: string;
	  autoFocus?: boolean;

	  /**
	   * Optional class added to the calendar portion of datepicker
	   */
	  calendarClassName?: string;
	  children?: React.ReactNode;

	  /**
	   * Added to the actual input of the calendar
	   */
	  className?: string;

	  /**
	   * Replaces the input with any node, like a button
	   */
	  customInput?: React.ReactNode;
	  customInputRef?: string;

	  /**
	   * Accepts any moment format string
	   */
	  dateFormat?: string | string[];
	  dateFormatCalendar?: string;
	  dayClassName?(date: moment.Moment): string | null;
	  disabled?: boolean;
	  disabledKeyboardNavigation?: boolean;
	  dropdownMode?: 'scroll' | 'select';
	  endDate?: moment.Moment | null;
	  excludeDates?: moment.Moment[];
	  excludeTimes?: moment.Moment[];
	  filterDate?(date: moment.Moment): boolean;
	  fixedHeight?: boolean;
	  forceShowMonthNavigation?: boolean;
	  formatWeekNumber?(date: moment.Moment): string | number;
	  highlightDates?: moment.Moment[];
	  id?: string;
	  includeDates?: moment.Moment[];
	  includeTimes?: moment.Moment[];
	  inline?: boolean;

	  /**
	   * Adds additional times to the time selector other then :30 increments
	   */
	  injectTimes?: moment.Moment[];
	  isClearable?: boolean;

	  /**
	   * Switches the locale / display. "en-us", "zn-ch"...etc
	   */
	  locale?: moment.LocaleSpecifier;

	  /**
	   * The max date accepted (in moment format) as a selection
	   */
	  maxDate?: moment.Moment;

	  /**
	   * The max time accepted (in moment format) as a selection
	   */
	  maxTime?: moment.Moment;

	  /**
	   * The min date accepted (in moment format) as a selection
	   */
	  minDate?: moment.Moment;

	  /**
	   * The min time accepted (in moment format) as a selection
	   */
	  minTime?: moment.Moment;
	  monthsShown?: number;
	  name?: string;
	  onBlur?(event: React.FocusEvent<HTMLInputElement>): void;

	  /**
	   * What to do when the input changes
	   */
	  onChange?(
	    date: moment.Moment | null,
	    event?: React.SyntheticEvent<any>
	  ): void;
	  onChangeRaw?(event: React.FocusEvent<HTMLInputElement>): void;
	  onClickOutside?(event: React.MouseEvent<HTMLDivElement>): void;
	  onFocus?(event: React.FocusEvent<HTMLInputElement>): void;
	  onKeyDown?(event: React.KeyboardEvent<HTMLDivElement>): void;
	  onMonthChange?(date: moment.Moment): void;
	  onSelect?(date: moment.Moment, event?: React.SyntheticEvent<any>): void;
	  onWeekSelect?(
	    firstDayOfWeek: moment.Moment,
	    weekNumber: string | number,
	    event?: React.SyntheticEvent<any>
	  ): void;
	  onYearChange?(date: moment.Moment): void;
	  openToDate?: moment.Moment;
	  peekNextMonth?: boolean;
	  placeholderText?: string;

	  /**
	   * Class applied to the popup, when inline is false
	   */
	  popperClassName?: string;
	  popperContainer?(props: { children: React.ReactNode[] }): React.ReactNode;
	  popperPlacement?: PopoverAnchorPosition;
	  preventOpenOnFocus?: boolean;
	  readOnly?: boolean;
	  required?: boolean;
	  scrollableMonthYearDropdown?: boolean;
	  scrollableYearDropdown?: boolean;

	  /**
	   * The selected datetime (in moment format)
	   */
	  selected?: moment.Moment | null;
	  selectsEnd?: boolean;
	  selectsStart?: boolean;

	  /**
	   * Will close the popup on selection
	   */
	  shouldCloseOnSelect?: boolean;
	  showDisabledMonthNavigation?: boolean;
	  showMonthDropdown?: boolean;
	  showMonthYearDropdown?: boolean;

	  /**
	   * Show the time selection alongside the calendar
	   */
	  showTimeSelect?: boolean;

	  /**
	   * Only show the time selector, not the calendar
	   */
	  showTimeSelectOnly?: boolean;
	  showWeekNumbers?: boolean;
	  showYearDropdown?: boolean;
	  startDate?: moment.Moment | null;
	  startOpen?: boolean;

	  /**
	   * Use Moment strict mode, allowing exact format matches only
	   */
	  strictParsing?: boolean;
	  tabIndex?: number;
	  timeCaption?: string;

	  /**
	   * The format of the time within the selector, in moment notation
	   */
	  timeFormat?: string;
	  timeIntervals?: number;
	  title?: string;
	  todayButton?: string;
	  useShortMonthInDropdown?: boolean;
	  useWeekdaysShort?: boolean;
	  utcOffset?: number;
	  value?: string;
	  weekLabel?: string;
	  withPortal?: boolean;
	  yearDropdownItemNumber?: number;
	} const ReactDatePicker: React.ClassicComponentClass<ReactDatePickerProps>;
	export default ReactDatePicker;

}
declare module '@elastic/eui/src/components/date_picker/react-datepicker' {
	import ReactDatePicker from '@elastic/eui/src/components/date_picker/react-datepicker/src';
	export { ReactDatePicker };
	export type { ReactDatePickerProps } from '@elastic/eui/src/components/date_picker/react-datepicker/src';

}
declare module '@elastic/eui/src/components/date_picker/date_picker' {
	import { Component, MouseEventHandler, Ref } from 'react';
	import { Moment } from 'moment';
	import { EuiFormControlLayoutIconsProps } from '@elastic/eui/src/components/form/form_control_layout/form_control_layout_icons';
	import { ApplyClassComponentDefaults, CommonProps } from '@elastic/eui/src/components/common';
	import { PopoverAnchorPosition } from '@elastic/eui/src/components/popover';
	import { ReactDatePickerProps } from '@elastic/eui/src/components/date_picker/react-datepicker';
	export const euiDatePickerDefaultDateFormat = "MM/DD/YYYY";
	export const euiDatePickerDefaultTimeFormat = "hh:mm A"; type popperPlacement = 'bottom' | 'bottom-end' | 'bottom-start' | 'left' | 'left-end' | 'left-start' | 'right' | 'right-end' | 'right-start' | 'top' | 'top-end' | 'top-start'; const unsupportedProps: readonly ["monthsShown", "showWeekNumbers", "fixedHeight", "dropdownMode", "useShortMonthInDropdown", "todayButton", "timeCaption", "disabledKeyboardNavigation", "isClearable", "withPortal", "showMonthYearDropdown", "popperPlacement"]; type UnsupportedProps = typeof unsupportedProps[number];
	interface EuiExtendedDatePickerProps extends Omit<ReactDatePickerProps, UnsupportedProps> {
	    /**
	     * Applies classes to the numbered days provided. Check docs for example.
	     */
	    dayClassName?: (date: Moment) => string | null;
	    /**
	     * Makes the input full width
	     */
	    fullWidth?: boolean;
	    /**
	     * ref for the ReactDatePicker instance
	     */
	    inputRef: Ref<Component<ReactDatePickerProps, any, any>>;
	    /**
	     * Provides styling to the input when invalid
	     */
	    isInvalid?: boolean;
	    /**
	     * Provides styling to the input when loading
	     */
	    isLoading?: boolean;
	    /**
	     * What to do when the input is cleared by the x icon
	     */
	    onClear?: MouseEventHandler<HTMLButtonElement>;
	    /**
	     * Opens to this date (in moment format) on first press, regardless of selection
	     */
	    openToDate?: Moment;
	    /**
	     * Shows only when no date is selected
	     */
	    placeholder?: string;
	    /**
	     * Can turn the shadow off if using the inline prop
	     */
	    shadow?: boolean;
	    /**
	     * Show the icon in input
	     */
	    showIcon?: boolean;
	    /**
	     * Pass an icon type to change the default `calendar` or `clock` icon
	     */
	    iconType?: EuiFormControlLayoutIconsProps['icon'];
	    /**
	     * Sets the placement of the popover.
	     *
	     * DEPRECATED: 'bottom', 'bottom-end', 'bottom-start', 'left', 'left-end', 'left-start', right', 'right-end', 'right-start', 'top', 'top-end', 'top-start'
	     *
	     * **Use [EuiPopover](/#/layout/popover) values**: 'upCenter', 'upLeft', 'upRight', downCenter', 'downLeft', 'downRight', 'leftCenter', 'leftUp', 'leftDown', 'rightCenter', 'rightUp', 'rightDown'.
	     */
	    popoverPlacement?: PopoverAnchorPosition | popperPlacement;
	} type _EuiDatePickerProps = CommonProps & EuiExtendedDatePickerProps;
	export type EuiDatePickerProps = ApplyClassComponentDefaults<typeof EuiDatePicker>;
	export class EuiDatePicker extends Component<_EuiDatePickerProps> {
	    static defaultProps: {
	        adjustDateOnChange: boolean;
	        dateFormat: string;
	        fullWidth: boolean;
	        inputRef: () => void;
	        isLoading: boolean;
	        shadow: boolean;
	        shouldCloseOnSelect: boolean;
	        showIcon: boolean;
	        showTimeSelect: boolean;
	        timeFormat: string;
	        popoverPlacement: string;
	    };
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/tabs/tab' {
	import { MouseEventHandler, AnchorHTMLAttributes, ButtonHTMLAttributes, FunctionComponent, ReactNode } from 'react';
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common';
	export interface EuiTabProps extends CommonProps {
	    isSelected?: boolean;
	    disabled?: boolean;
	    /**
	     * Places content before the tab content/children.
	     * Will be excluded from interactive effects.
	     */
	    prepend?: ReactNode;
	    /**
	     * Places content after the tab content/children.
	     * Will be excluded from interactive effects.
	     */
	    append?: ReactNode;
	} type EuiTabPropsForAnchor = EuiTabProps & Omit<AnchorHTMLAttributes<HTMLAnchorElement>, 'onClick' | 'href'> & {
	    href?: string;
	    onClick?: MouseEventHandler<HTMLAnchorElement>;
	}; type EuiTabPropsForButton = EuiTabProps & Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'onClick'> & {
	    onClick?: MouseEventHandler<HTMLButtonElement>;
	};
	export type Props = ExclusiveUnion<EuiTabPropsForAnchor, EuiTabPropsForButton>;
	export const EuiTab: FunctionComponent<Props>;
	export {};

}
declare module '@elastic/eui/src/components/tabs/tabs' {
	import React, { HTMLAttributes, ReactNode } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; const displayToClassNameMap: {
	    condensed: string;
	    default: null;
	};
	export const DISPLAYS: ("default" | "condensed")[];
	export type EuiTabsDisplaySizes = keyof typeof displayToClassNameMap; const sizeToClassNameMap: {
	    s: string;
	    m: null;
	    l: string;
	    xl: string;
	};
	export const SIZES: ("s" | "m" | "l" | "xl")[];
	export type EuiTabsSizes = keyof typeof sizeToClassNameMap;
	export type EuiTabsProps = CommonProps & HTMLAttributes<HTMLDivElement> & {
	    /**
	     * ReactNode to render as this component's content
	     */
	    children?: ReactNode;
	    /**
	     * **DEPRECATED IN AMSTERDAM**
	     * Choose `default` or alternative `condensed` display styles.
	     */
	    display?: EuiTabsDisplaySizes;
	    /**
	     * Evenly stretches each tab to fill the
	     * horizontal space
	     */
	    expand?: boolean;
	    /**
	     * Adds a bottom border to separate it from the content after
	     */
	    bottomBorder?: boolean;
	    /**
	     * Sizes affect both font size and overall size.
	     * Only use the `xl` size when displayed as page titles.
	     */
	    size?: EuiTabsSizes;
	};
	export type EuiTabRef = HTMLDivElement;
	export const EuiTabs: React.ForwardRefExoticComponent<CommonProps & React.HTMLAttributes<HTMLDivElement> & {
	    /**
	     * ReactNode to render as this component's content
	     */
	    children?: ReactNode;
	    /**
	     * **DEPRECATED IN AMSTERDAM**
	     * Choose `default` or alternative `condensed` display styles.
	     */
	    display?: "default" | "condensed" | undefined;
	    /**
	     * Evenly stretches each tab to fill the
	     * horizontal space
	     */
	    expand?: boolean | undefined;
	    /**
	     * Adds a bottom border to separate it from the content after
	     */
	    bottomBorder?: boolean | undefined;
	    /**
	     * Sizes affect both font size and overall size.
	     * Only use the `xl` size when displayed as page titles.
	     */
	    size?: "s" | "m" | "l" | "xl" | undefined;
	} & {
	    children?: React.ReactNode;
	} & React.RefAttributes<HTMLDivElement>>;
	export {};

}
declare module '@elastic/eui/src/components/tabs/tabbed_content/tabbed_content' {
	import { Component, HTMLAttributes, ReactNode } from 'react';
	import { EuiTabsDisplaySizes, EuiTabsSizes } from '@elastic/eui/src/components/tabs/tabs';
	import { EuiTabProps } from '@elastic/eui/src/components/tabs/tab';
	import { CommonProps } from '@elastic/eui/src/components/common';
	/**
	 * Marked as const so type is `['initial', 'selected']` instead of `string[]`
	 */
	export const AUTOFOCUS: readonly ["initial", "selected"];
	export interface EuiTabbedContentTab extends EuiTabProps {
	    id: string;
	    name: ReactNode;
	    content: ReactNode;
	}
	interface EuiTabbedContentState {
	    selectedTabId: string | undefined;
	    inFocus: boolean;
	}
	export type EuiTabbedContentProps = CommonProps & HTMLAttributes<HTMLDivElement> & {
	    /**
	     * When tabbing into the tabs, set the focus on `initial` for the first tab,
	     * or `selected` for the currently selected tab. Best use case is for inside of
	     * overlay content like popovers or flyouts.
	     */
	    autoFocus?: 'initial' | 'selected';
	    /**
	     * Choose `default` or alternative `condensed` display styles
	     */
	    display?: EuiTabsDisplaySizes;
	    /**
	     * Evenly stretches each tab to fill the horizontal space
	     */
	    expand?: boolean;
	    /**
	     * Use this prop to set the initially selected tab while letting the tabbed content component
	     * control selection state internally
	     */
	    initialSelectedTab?: EuiTabbedContentTab;
	    onTabClick?: (selectedTab: EuiTabbedContentTab) => void;
	    /**
	     * Use this prop if you want to control selection state within the owner component
	     */
	    selectedTab?: EuiTabbedContentTab;
	    size?: EuiTabsSizes;
	    /**
	     * Each tab needs id and content properties, so we can associate it with its panel for accessibility.
	     * The name property (a node) is also required to display to the user.
	     */
	    tabs: EuiTabbedContentTab[];
	};
	export class EuiTabbedContent extends Component<EuiTabbedContentProps, EuiTabbedContentState> {
	    static defaultProps: {
	        autoFocus: string;
	    };
	    private readonly rootId;
	    private readonly tabsRef;
	    constructor(props: EuiTabbedContentProps);
	    componentDidMount(): void;
	    componentWillUnmount(): void;
	    focusTab: () => void;
	    initializeFocus: () => void;
	    removeFocus: (blurEvent: FocusEvent) => void;
	    onTabClick: (selectedTab: EuiTabbedContentTab) => void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/tabs/tabbed_content' {
	export { EuiTabbedContent, EuiTabbedContentTab, EuiTabbedContentProps, } from '@elastic/eui/src/components/tabs/tabbed_content/tabbed_content';

}
declare module '@elastic/eui/src/components/tabs' {
	export { EuiTab, EuiTabProps } from '@elastic/eui/src/components/tabs/tab';
	export { EuiTabs, EuiTabsProps } from '@elastic/eui/src/components/tabs/tabs';
	export { EuiTabbedContent, EuiTabbedContentTab, EuiTabbedContentProps, } from '@elastic/eui/src/components/tabs/tabbed_content';

}
declare module '@elastic/eui/src/components/date_picker/types' {
	import { ReactElement } from 'react';
	export interface DurationRange {
	    end: ShortDate;
	    label?: string;
	    start: ShortDate;
	}
	export type TimeUnitId = 's' | 'm' | 'h' | 'd' | 'w' | 'M' | 'y';
	export type TimeUnitFromNowId = 's+' | 'm+' | 'h+' | 'd+' | 'w+' | 'M+' | 'y+';
	export type TimeUnitLabel = 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'year';
	export type TimeUnitLabelPlural = 'seconds' | 'minutes' | 'hours' | 'days' | 'weeks' | 'months' | 'years';
	export type AbsoluteDateMode = 'absolute';
	export type RelativeDateMode = 'relative';
	export type NowDateMode = 'now';
	export type DateMode = AbsoluteDateMode | RelativeDateMode | NowDateMode;
	/**
	 * String as either datemath (e.g.: now, now-15m, now-15m/m) or
	 * absolute date in the format 'YYYY-MM-DDTHH:mm:ss.SSSZ'
	 */
	export type ShortDate = NowDateMode | string;
	export type Milliseconds = number;
	export interface RelativeParts {
	    count: number;
	    round: boolean;
	    roundUnit?: TimeUnitId;
	    unit: string;
	}
	export interface RelativeOption {
	    text: string;
	    value: TimeUnitId | TimeUnitFromNowId;
	}
	export type OnRefreshChangeProps = {
	    isPaused: boolean;
	    refreshInterval: number;
	};
	export type ApplyRefreshInterval = (args: OnRefreshChangeProps) => void;
	export interface QuickSelect {
	    timeTense: string;
	    timeValue: number;
	    timeUnits: TimeUnitId;
	}
	interface ApplyTimeArgs extends DurationRange {
	    keepPopoverOpen?: boolean;
	    quickSelect?: QuickSelect;
	}
	export type ApplyTime = (args: ApplyTimeArgs) => void;
	export interface QuickSelectPanel {
	    title: string;
	    content: ReactElement;
	}
	export {};

}
declare module '@elastic/eui/src/components/date_picker/super_date_picker/time_units' {
	import { TimeUnitId, TimeUnitLabel, TimeUnitLabelPlural } from '@elastic/eui/src/components/date_picker/types';
	export const timeUnits: {
	    [id in TimeUnitId]: TimeUnitLabel;
	};
	export const timeUnitsPlural: {
	    [id in TimeUnitId]: TimeUnitLabelPlural;
	};

}
declare module '@elastic/eui/src/components/date_picker/super_date_picker/relative_options' {
	import { RelativeOption, TimeUnitId } from '@elastic/eui/src/components/date_picker/types';
	export const relativeOptions: RelativeOption[];
	export const relativeUnitsFromLargestToSmallest: TimeUnitId[];

}
declare module '@elastic/eui/src/components/date_picker/super_date_picker/relative_utils' {
	import { RelativeParts } from '@elastic/eui/src/components/date_picker/types';
	export function parseRelativeParts(value: string): RelativeParts;
	export const toRelativeStringFromParts: (relativeParts: RelativeParts) => string;

}
declare module '@elastic/eui/src/components/date_picker/super_date_picker/date_modes' {
	import { AbsoluteDateMode, RelativeDateMode, NowDateMode, ShortDate } from '@elastic/eui/src/components/date_picker/types';
	export const DATE_MODES: {
	    ABSOLUTE: AbsoluteDateMode;
	    RELATIVE: RelativeDateMode;
	    NOW: NowDateMode;
	};
	export const INVALID_DATE = "invalid_date";
	export function getDateMode(value: ShortDate): import ("@elastic/eui/src/components/date_picker/types").DateMode;
	export function toAbsoluteString(value: string, roundUp?: boolean): string;
	export function toRelativeString(value: string): string;

}
declare module '@elastic/eui/src/components/date_picker/super_date_picker/date_popover/relative_tab' {
	import { Component, ChangeEventHandler } from 'react';
	import { EuiSwitchEvent } from '@elastic/eui/src/components/form';
	import { RelativeParts } from '@elastic/eui/src/components/date_picker/types';
	import { LocaleSpecifier } from 'moment';
	import { EuiDatePopoverContentProps } from '@elastic/eui/src/components/date_picker/super_date_picker/date_popover/date_popover_content';
	export interface EuiRelativeTabProps {
	    dateFormat: string;
	    locale?: LocaleSpecifier;
	    value: string;
	    onChange: EuiDatePopoverContentProps['onChange'];
	    roundUp?: boolean;
	    position: 'start' | 'end';
	}
	interface EuiRelativeTabState extends Pick<RelativeParts, 'unit' | 'round' | 'roundUnit'> {
	    count: number | undefined;
	    sentenceCasedPosition: string;
	}
	export class EuiRelativeTab extends Component<EuiRelativeTabProps, EuiRelativeTabState> {
	    state: EuiRelativeTabState;
	    relativeDateInputNumberDescriptionId: string;
	    onCountChange: ChangeEventHandler<HTMLInputElement>;
	    onUnitChange: ChangeEventHandler<HTMLSelectElement>;
	    onRoundChange: (event: EuiSwitchEvent) => void;
	    handleChange: () => void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/date_picker/super_date_picker/date_popover/date_popover_content' {
	import React, { FunctionComponent } from 'react';
	import { LocaleSpecifier } from 'moment';
	export interface EuiDatePopoverContentProps {
	    value: string;
	    onChange(date: string | null, event?: React.SyntheticEvent<any>): void;
	    roundUp?: boolean;
	    dateFormat: string;
	    timeFormat: string;
	    locale?: LocaleSpecifier;
	    position: 'start' | 'end';
	    utcOffset?: number;
	}
	export const EuiDatePopoverContent: FunctionComponent<EuiDatePopoverContentProps>;

}
declare module '@elastic/eui/src/components/date_picker/super_date_picker/date_popover/absolute_tab' {
	import { Component, ChangeEventHandler } from 'react';
	import { Moment, LocaleSpecifier } from 'moment';
	import { EuiDatePickerProps } from '@elastic/eui/src/components/date_picker/date_picker';
	import { EuiDatePopoverContentProps } from '@elastic/eui/src/components/date_picker/super_date_picker/date_popover/date_popover_content';
	export interface EuiAbsoluteTabProps {
	    dateFormat: string;
	    timeFormat: string;
	    locale?: LocaleSpecifier;
	    value: string;
	    onChange: EuiDatePopoverContentProps['onChange'];
	    roundUp: boolean;
	    position: 'start' | 'end';
	    utcOffset?: number;
	}
	interface EuiAbsoluteTabState {
	    isTextInvalid: boolean;
	    sentenceCasedPosition: string;
	    textInputValue: string;
	    valueAsMoment: Moment | null;
	}
	export class EuiAbsoluteTab extends Component<EuiAbsoluteTabProps, EuiAbsoluteTabState> {
	    state: EuiAbsoluteTabState;
	    constructor(props: EuiAbsoluteTabProps);
	    handleChange: EuiDatePickerProps['onChange'];
	    handleTextChange: ChangeEventHandler<HTMLInputElement>;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/date_picker/super_date_picker/pretty_duration' {
	import { LocaleSpecifier } from 'moment';
	import { DurationRange, ShortDate } from '@elastic/eui/src/components/date_picker/types';
	export const commonDurationRanges: DurationRange[];
	export function formatTimeString(timeString: string, dateFormat: string, roundUp?: boolean, locale?: LocaleSpecifier): string;
	export function prettyDuration(timeFrom: ShortDate, timeTo: ShortDate, quickRanges: DurationRange[] | undefined, dateFormat: string): string;
	export function showPrettyDuration(timeFrom: ShortDate, timeTo: ShortDate, quickRanges?: DurationRange[]): boolean;

}
declare module '@elastic/eui/src/components/date_picker/super_date_picker/date_popover/date_popover_button' {
	import { FunctionComponent, ButtonHTMLAttributes, MouseEventHandler } from 'react';
	import { LocaleSpecifier } from 'moment';
	import { EuiPopoverProps } from '@elastic/eui/src/components/popover';
	import { EuiDatePopoverContentProps } from '@elastic/eui/src/components/date_picker/super_date_picker/date_popover/date_popover_content';
	export interface EuiDatePopoverButtonProps {
	    className?: string;
	    buttonProps?: ButtonHTMLAttributes<HTMLButtonElement>;
	    dateFormat: string;
	    isDisabled?: boolean;
	    isInvalid?: boolean;
	    isOpen: boolean;
	    needsUpdating?: boolean;
	    locale?: LocaleSpecifier;
	    onChange: NonNullable<EuiDatePopoverContentProps['onChange']>;
	    onPopoverClose: EuiPopoverProps['closePopover'];
	    onPopoverToggle: MouseEventHandler<HTMLButtonElement>;
	    position: 'start' | 'end';
	    roundUp?: boolean;
	    timeFormat: string;
	    value: string;
	    utcOffset?: number;
	    compressed?: boolean;
	}
	export const EuiDatePopoverButton: FunctionComponent<EuiDatePopoverButtonProps>;

}
declare module '@elastic/eui/src/components/date_picker/super_date_picker/date_popover' {
	export { EuiAbsoluteTab, EuiAbsoluteTabProps } from '@elastic/eui/src/components/date_picker/super_date_picker/date_popover/absolute_tab';
	export { EuiDatePopoverButton, EuiDatePopoverButtonProps, } from '@elastic/eui/src/components/date_picker/super_date_picker/date_popover/date_popover_button';
	export { EuiDatePopoverContent, EuiDatePopoverContentProps, } from '@elastic/eui/src/components/date_picker/super_date_picker/date_popover/date_popover_content';
	export { EuiRelativeTab, EuiRelativeTabProps } from '@elastic/eui/src/components/date_picker/super_date_picker/date_popover/relative_tab';

}
declare module '@elastic/eui/src/components/date_picker/super_date_picker/quick_select_popover/commonly_used_time_ranges' {
	import { FunctionComponent } from 'react';
	import { DurationRange, ApplyTime } from '@elastic/eui/src/components/date_picker/types';
	export interface EuiCommonlyUsedTimeRangesProps {
	    applyTime: ApplyTime;
	    commonlyUsedRanges: DurationRange[];
	}
	export const EuiCommonlyUsedTimeRanges: FunctionComponent<EuiCommonlyUsedTimeRangesProps>;

}
declare module '@elastic/eui/src/components/date_picker/super_date_picker/quick_select_popover/quick_select_utils' {
	import { QuickSelect } from '@elastic/eui/src/components/date_picker/types';
	/**
	 * This function returns time value, time unit and time tense for a given time string.
	 *
	 * For example: for `now-40m` it will parse output as time value to `40` time unit to `m` and time unit to `last`.
	 *
	 * If given a datetime string it will return a default value.
	 *
	 * If the given string is in the format such as `now/d` it will parse the string to moment object and find the time value, time unit and time tense using moment
	 *
	 * This function accepts two strings start and end time. I the start value is now then it uses the end value to parse.
	 */
	export const parseTimeParts: (start: string, end: string) => QuickSelect;

}
declare module '@elastic/eui/src/components/date_picker/super_date_picker/quick_select_popover/quick_select' {
	import { Component, ChangeEventHandler, KeyboardEventHandler } from 'react';
	import moment from 'moment';
	import { ApplyTime, QuickSelect } from '@elastic/eui/src/components/date_picker/types'; type EuiQuickSelectState = QuickSelect;
	export interface EuiQuickSelectProps {
	    applyTime: ApplyTime;
	    start: string;
	    end: string;
	    prevQuickSelect?: EuiQuickSelectState;
	}
	export class EuiQuickSelect extends Component<EuiQuickSelectProps, EuiQuickSelectState> {
	    constructor(props: EuiQuickSelectProps);
	    generateId: (idSuffix?: string) => string;
	    timeSelectionId: string;
	    legendId: string;
	    onTimeTenseChange: ChangeEventHandler<HTMLSelectElement>;
	    onTimeValueChange: ChangeEventHandler<HTMLInputElement>;
	    onTimeUnitsChange: ChangeEventHandler<HTMLSelectElement>;
	    handleKeyDown: KeyboardEventHandler<HTMLElement>;
	    applyQuickSelect: () => void;
	    getBounds: () => {
	        min: moment.Moment;
	        max: moment.Moment;
	    };
	    stepForward: () => void;
	    stepBackward: () => void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/date_picker/super_date_picker/quick_select_popover/recently_used' {
	import { FunctionComponent } from 'react';
	import { DurationRange, ApplyTime } from '@elastic/eui/src/components/date_picker/types';
	export interface EuiRecentlyUsedProps {
	    applyTime: ApplyTime;
	    commonlyUsedRanges: DurationRange[];
	    dateFormat: string;
	    recentlyUsedRanges?: DurationRange[];
	}
	export const EuiRecentlyUsed: FunctionComponent<EuiRecentlyUsedProps>;

}
declare module '@elastic/eui/src/components/date_picker/auto_refresh/refresh_interval' {
	import { Component, ChangeEventHandler, KeyboardEventHandler } from 'react';
	import { Milliseconds, TimeUnitId, ApplyRefreshInterval } from '@elastic/eui/src/components/date_picker/types';
	export type EuiRefreshIntervalProps = {
	    /**
	     * Is refresh paused or running.
	     */
	    isPaused?: boolean;
	    /**
	     * Refresh interval in milliseconds.
	     */
	    refreshInterval?: Milliseconds;
	    /**
	     * Passes back the updated state of `isPaused` and `refreshInterval`.
	     */
	    onRefreshChange: ApplyRefreshInterval;
	};
	interface EuiRefreshIntervalState {
	    value: number | '';
	    units: TimeUnitId;
	}
	export class EuiRefreshInterval extends Component<EuiRefreshIntervalProps, EuiRefreshIntervalState> {
	    static defaultProps: {
	        isPaused: boolean;
	        refreshInterval: number;
	    };
	    state: EuiRefreshIntervalState;
	    generateId: (idSuffix?: string) => string;
	    legendId: string;
	    refreshSelectionId: string;
	    onValueChange: ChangeEventHandler<HTMLInputElement>;
	    onUnitsChange: ChangeEventHandler<HTMLSelectElement>;
	    startRefresh: () => void;
	    handleKeyDown: KeyboardEventHandler<HTMLElement>;
	    applyRefreshInterval: () => void;
	    toggleRefresh: () => void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/date_picker/super_date_picker/quick_select_popover/quick_select_popover' {
	import { Component } from 'react';
	import { DurationRange, ApplyRefreshInterval, ApplyTime, QuickSelect, QuickSelectPanel } from '@elastic/eui/src/components/date_picker/types';
	export interface EuiQuickSelectPopoverProps {
	    applyRefreshInterval?: ApplyRefreshInterval;
	    applyTime: ApplyTime;
	    commonlyUsedRanges: DurationRange[];
	    customQuickSelectPanels?: QuickSelectPanel[];
	    dateFormat: string;
	    end: string;
	    isDisabled: boolean;
	    isPaused: boolean;
	    recentlyUsedRanges: DurationRange[];
	    refreshInterval: number;
	    start: string;
	}
	interface EuiQuickSelectPopoverState {
	    isOpen: boolean;
	    prevQuickSelect?: QuickSelect;
	}
	export class EuiQuickSelectPopover extends Component<EuiQuickSelectPopoverProps, EuiQuickSelectPopoverState> {
	    state: EuiQuickSelectPopoverState;
	    closePopover: () => void;
	    togglePopover: () => void;
	    applyTime: ApplyTime;
	    renderDateTimeSections: () => JSX.Element;
	    renderCustomQuickSelectPanels: () => JSX.Element[] | null;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/date_picker/super_date_picker/quick_select_popover' {
	export { EuiCommonlyUsedTimeRanges, EuiCommonlyUsedTimeRangesProps, } from '@elastic/eui/src/components/date_picker/super_date_picker/quick_select_popover/commonly_used_time_ranges';
	export { EuiQuickSelectPopover, EuiQuickSelectPopoverProps, } from '@elastic/eui/src/components/date_picker/super_date_picker/quick_select_popover/quick_select_popover';
	export { EuiQuickSelect, EuiQuickSelectProps } from '@elastic/eui/src/components/date_picker/super_date_picker/quick_select_popover/quick_select';
	export { EuiRecentlyUsed, EuiRecentlyUsedProps } from '@elastic/eui/src/components/date_picker/super_date_picker/quick_select_popover/recently_used';

}
declare module '@elastic/eui/src/components/date_picker/super_date_picker/async_interval' {
	export class AsyncInterval {
	    timeoutId: number | null;
	    isStopped: boolean;
	    __pendingFn: Function;
	    constructor(fn: Function, refreshInterval: number);
	    setAsyncInterval: (fn: Function, milliseconds: number) => void;
	    stop: () => void;
	}

}
declare module '@elastic/eui/src/components/date_picker/date_picker_range' {
	import { FunctionComponent, ReactNode, ReactElement } from 'react';
	import { IconType } from '@elastic/eui/src/components/icon';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiDatePickerRangeProps = CommonProps & {
	    /**
	     * Including any children will replace all innards with the provided children
	     */
	    children?: ReactNode;
	    /**
	     * The end date `EuiDatePicker` element
	     */
	    endDateControl: ReactElement;
	    fullWidth?: boolean;
	    /**
	     * Pass either an icon type or set to `false` to remove icon entirely
	     */
	    iconType?: boolean | IconType;
	    /**
	     * Won't apply any additional props to start and end date components
	     */
	    isCustom?: boolean;
	    readOnly?: boolean;
	    /**
	     * The start date `EuiDatePicker` element
	     */
	    startDateControl: ReactElement;
	};
	export const EuiDatePickerRange: FunctionComponent<EuiDatePickerRangeProps>;

}
declare module '@elastic/eui/src/components/responsive/hide_for' {
	import { ReactNode, FunctionComponent } from 'react';
	import { EuiBreakpointSize } from '@elastic/eui/src/services/breakpoint';
	export type EuiHideForBreakpoints = EuiBreakpointSize;
	export interface EuiHideForProps {
	    /**
	     * Required otherwise nothing ever gets returned
	     */
	    children: ReactNode;
	    /**
	     * List of all the responsive sizes to hide the children for.
	     * Array of #EuiBreakpointSize
	     */
	    sizes: EuiHideForBreakpoints[] | 'all' | 'none';
	}
	export const EuiHideFor: FunctionComponent<EuiHideForProps>;

}
declare module '@elastic/eui/src/components/responsive/show_for' {
	import { ReactNode, FunctionComponent } from 'react';
	import { EuiBreakpointSize } from '@elastic/eui/src/services/breakpoint';
	export type EuiShowForBreakpoints = EuiBreakpointSize;
	export interface EuiShowForProps {
	    /**
	     * Required otherwise nothing ever gets returned
	     */
	    children: ReactNode;
	    /**
	     * List of all the responsive sizes to show the children for.
	     * Array of #EuiBreakpointSize
	     */
	    sizes: EuiShowForBreakpoints[] | 'all' | 'none';
	}
	export const EuiShowFor: FunctionComponent<EuiShowForProps>;

}
declare module '@elastic/eui/src/components/responsive' {
	export { EuiHideFor, EuiHideForProps } from '@elastic/eui/src/components/responsive/hide_for';
	export { EuiShowFor, EuiShowForProps } from '@elastic/eui/src/components/responsive/show_for';

}
declare module '@elastic/eui/src/components/date_picker/super_date_picker/super_update_button' {
	import { Component, MouseEventHandler, Ref } from 'react';
	import { EuiButtonProps } from '@elastic/eui/src/components/button';
	import { EuiToolTip, EuiToolTipProps } from '@elastic/eui/src/components/tool_tip';
	import { EuiBreakpointSize } from '@elastic/eui/src/services/breakpoint'; type EuiSuperUpdateButtonInternalProps = {
	    isDisabled?: boolean;
	    isLoading?: boolean;
	    needsUpdate?: boolean;
	    onClick: MouseEventHandler<HTMLButtonElement>;
	};
	export type EuiSuperUpdateButtonProps = {
	    /**
	     * Show the "Click to apply" tooltip
	     */
	    showTooltip?: boolean;
	    /**
	     * Passes props to `EuiToolTip`
	     */
	    toolTipProps?: EuiToolTipProps;
	    /**
	     * Returns an IconButton instead
	     */
	    iconOnly?: boolean;
	    /**
	     * Forces state to be `iconOnly` when within provided breakpoints.
	     * Remove completely with `false` or provide your own list of breakpoints.
	     */
	    responsive?: false | EuiBreakpointSize[];
	} & Partial<Omit<EuiButtonProps, 'isDisabled' | 'isLoading' | 'onClick'>>;
	export class EuiSuperUpdateButton extends Component<EuiSuperUpdateButtonInternalProps & EuiSuperUpdateButtonProps> {
	    static defaultProps: {
	        needsUpdate: boolean;
	        isLoading: boolean;
	        isDisabled: boolean;
	        showTooltip: boolean;
	        responsive: string[];
	        fill: boolean;
	    };
	    _isMounted: boolean;
	    tooltipTimeout: number | undefined;
	    tooltip: EuiToolTip | null;
	    componentWillUnmount(): void;
	    componentDidMount(): void;
	    componentDidUpdate(): void;
	    setTootipRef: Ref<EuiToolTip>;
	    showTooltip: () => void;
	    hideTooltip: () => void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/date_picker/super_date_picker/pretty_interval' {
	export const prettyInterval: (isPaused: boolean, intervalInMs: number, shortHand?: boolean) => string;

}
declare module '@elastic/eui/src/components/date_picker/auto_refresh/auto_refresh' {
	import { FunctionComponent } from 'react';
	import { EuiFieldTextProps } from '@elastic/eui/src/components/form';
	import { CommonEuiButtonEmptyProps } from '@elastic/eui/src/components/button/button_empty/button_empty';
	import { EuiRefreshIntervalProps } from '@elastic/eui/src/components/date_picker/auto_refresh/refresh_interval';
	export type EuiAutoRefreshSharedProps = EuiRefreshIntervalProps & {
	    isDisabled?: boolean;
	};
	export type EuiAutoRefreshProps = EuiAutoRefreshSharedProps & {
	    /**
	     * The input is `readOnly` by default because the input value is handled by the popover form.
	     * If you need make the input `isInvalid`, you'll need to set `readOnly` to `false`.
	     */
	    readOnly?: EuiFieldTextProps['readOnly'];
	} & Omit<EuiFieldTextProps, 'icon' | 'prepend' | 'controlOnly' | 'readOnly'>;
	export const EuiAutoRefresh: FunctionComponent<EuiAutoRefreshProps>;
	export type EuiAutoRefreshButtonProps = EuiAutoRefreshSharedProps & {
	    /**
	     * Reduces the time unit to a single letter
	     */
	    shortHand?: boolean;
	} & Omit<CommonEuiButtonEmptyProps, 'isSelected' | 'iconType' | 'iconSide' | 'iconSize' | 'onClick' | 'type'>;
	export const EuiAutoRefreshButton: FunctionComponent<EuiAutoRefreshButtonProps>;

}
declare module '@elastic/eui/src/components/date_picker/super_date_picker/super_date_picker' {
	import { Component } from 'react';
	import { LocaleSpecifier } from 'moment';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { ShortDate, Milliseconds, DurationRange, ApplyTime, ApplyRefreshInterval, QuickSelectPanel } from '@elastic/eui/src/components/date_picker/types';
	import { prettyDuration, commonDurationRanges } from '@elastic/eui/src/components/date_picker/super_date_picker/pretty_duration';
	import { AsyncInterval } from '@elastic/eui/src/components/date_picker/super_date_picker/async_interval';
	import { EuiSuperUpdateButtonProps } from '@elastic/eui/src/components/date_picker/super_date_picker/super_update_button';
	import { EuiDatePopoverContentProps } from '@elastic/eui/src/components/date_picker/super_date_picker/date_popover/date_popover_content';
	export { prettyDuration, commonDurationRanges };
	export interface OnTimeChangeProps extends DurationRange {
	    isInvalid: boolean;
	    isQuickSelection: boolean;
	}
	export interface OnRefreshProps extends DurationRange {
	    refreshInterval: number;
	}
	export type EuiSuperDatePickerProps = CommonProps & {
	    commonlyUsedRanges: DurationRange[];
	    customQuickSelectPanels?: QuickSelectPanel[];
	    /**
	     * Specifies the formatted used when displaying dates and/or datetimes
	     */
	    dateFormat: string;
	    /**
	     * Set isAutoRefreshOnly to true to limit the component to only display auto refresh content.
	     */
	    isAutoRefreshOnly: boolean;
	    isDisabled: boolean;
	    isLoading?: boolean;
	    isPaused: boolean;
	    /**
	     * Sets the overall width by adding sensible min and max widths.
	     * - `auto`: fits width to internal content / time string.
	     * - `restricted`: static width that fits the longest possible time string.
	     * - `full`: expands to 100% of the container.
	     */
	    width?: 'restricted' | 'full' | 'auto';
	    /**
	     * Reduces overall height to compressed form size
	     */
	    compressed?: boolean;
	    /**
	     * Used to localize e.g. month names, passed to `moment`
	     */
	    locale?: LocaleSpecifier;
	    /**
	     * Callback for when the refresh interval is fired.
	     * EuiSuperDatePicker will only manage a refresh interval timer when onRefresh callback is supplied
	     * If a promise is returned, the next refresh interval will not start until the promise has resolved.
	     * If the promise rejects the refresh interval will stop and the error thrown
	     */
	    onRefresh?: (props: OnRefreshProps) => void;
	    /**
	     * Callback for when the refresh interval changes.
	     * Supply onRefreshChange to show refresh interval inputs in quick select popover
	     */
	    onRefreshChange?: ApplyRefreshInterval;
	    /**
	     * Callback for when the time changes.
	     */
	    onTimeChange: (props: OnTimeChangeProps) => void;
	    recentlyUsedRanges: DurationRange[];
	    /**
	     * Refresh interval in milliseconds
	     */
	    refreshInterval: Milliseconds;
	    start: ShortDate;
	    end: ShortDate;
	    /**
	     * Specifies the formatted used when displaying times
	     */
	    timeFormat: string;
	    utcOffset?: number;
	    /**
	     * Set showUpdateButton to false to immediately invoke onTimeChange for all start and end changes.
	     */
	    showUpdateButton: boolean | 'iconOnly';
	    /**
	     * Hides the actual input reducing to just the quick select button.
	     */
	    isQuickSelectOnly?: boolean;
	    /**
	     * Props passed to the update button #EuiSuperUpdateButtonProps
	     */
	    updateButtonProps?: EuiSuperUpdateButtonProps;
	};
	interface EuiSuperDatePickerState {
	    end: ShortDate;
	    hasChanged: boolean;
	    isEndDatePopoverOpen: boolean;
	    isInvalid: boolean;
	    isStartDatePopoverOpen: boolean;
	    prevProps: {
	        end: ShortDate;
	        start: ShortDate;
	    };
	    showPrettyDuration: boolean;
	    start: ShortDate;
	}
	export class EuiSuperDatePicker extends Component<EuiSuperDatePickerProps, EuiSuperDatePickerState> {
	    static defaultProps: {
	        commonlyUsedRanges: DurationRange[];
	        dateFormat: string;
	        end: string;
	        isAutoRefreshOnly: boolean;
	        isDisabled: boolean;
	        isPaused: boolean;
	        recentlyUsedRanges: never[];
	        refreshInterval: number;
	        showUpdateButton: boolean;
	        start: string;
	        timeFormat: string;
	        width: string;
	    };
	    asyncInterval?: AsyncInterval;
	    state: EuiSuperDatePickerState;
	    static getDerivedStateFromProps(nextProps: EuiSuperDatePickerProps, prevState: EuiSuperDatePickerState): {
	        prevProps: {
	            start: string;
	            end: string;
	        };
	        start: string;
	        end: string;
	        isInvalid: boolean;
	        hasChanged: boolean;
	        showPrettyDuration: boolean;
	    } | null;
	    setTime: ({ end, start }: DurationRange) => void;
	    componentDidMount: () => void;
	    componentDidUpdate: () => void;
	    componentWillUnmount: () => void;
	    setStart: EuiDatePopoverContentProps['onChange'];
	    setEnd: EuiDatePopoverContentProps['onChange'];
	    applyTime: () => void;
	    applyQuickTime: ApplyTime;
	    hidePrettyDuration: () => void;
	    onStartDatePopoverToggle: () => void;
	    onStartDatePopoverClose: () => void;
	    onEndDatePopoverToggle: () => void;
	    onEndDatePopoverClose: () => void;
	    onRefreshChange: ApplyRefreshInterval;
	    stopInterval: () => void;
	    startInterval: (refreshInterval: number) => void;
	    renderDatePickerRange: () => JSX.Element;
	    handleClickUpdateButton: () => void;
	    renderUpdateButton: () => JSX.Element | null;
	    render(): JSX.Element;
	}

}
declare module '@elastic/eui/src/components/date_picker/super_date_picker' {
	export * from '@elastic/eui/src/components/date_picker/super_date_picker/date_popover';
	export * from '@elastic/eui/src/components/date_picker/super_date_picker/quick_select_popover';
	export { AsyncInterval } from '@elastic/eui/src/components/date_picker/super_date_picker/async_interval';
	export { EuiSuperDatePicker, EuiSuperDatePickerProps, OnTimeChangeProps, OnRefreshProps, } from '@elastic/eui/src/components/date_picker/super_date_picker/super_date_picker';
	export { EuiSuperUpdateButton, EuiSuperUpdateButtonProps, } from '@elastic/eui/src/components/date_picker/super_date_picker/super_update_button';
	export { prettyDuration, commonDurationRanges } from '@elastic/eui/src/components/date_picker/super_date_picker/pretty_duration';

}
declare module '@elastic/eui/src/components/date_picker/auto_refresh' {
	export { EuiAutoRefresh, EuiAutoRefreshProps, EuiAutoRefreshButton, EuiAutoRefreshButtonProps, EuiAutoRefreshSharedProps, } from '@elastic/eui/src/components/date_picker/auto_refresh/auto_refresh';
	export { EuiRefreshInterval, EuiRefreshIntervalProps, } from '@elastic/eui/src/components/date_picker/auto_refresh/refresh_interval';

}
declare module '@elastic/eui/src/components/date_picker' {
	export * from '@elastic/eui/src/components/date_picker/super_date_picker';
	export * from '@elastic/eui/src/components/date_picker/auto_refresh';
	export { EuiDatePicker, EuiDatePickerProps } from '@elastic/eui/src/components/date_picker/date_picker';
	export { EuiDatePickerRange, EuiDatePickerRangeProps, } from '@elastic/eui/src/components/date_picker/date_picker_range';
	export { ApplyTime, DurationRange as EuiSuperDatePickerCommonRange, DurationRange as EuiSuperDatePickerDurationRange, DurationRange as EuiSuperDatePickerRecentRange, TimeUnitId, TimeUnitFromNowId, TimeUnitLabel, TimeUnitLabelPlural, AbsoluteDateMode, RelativeDateMode, NowDateMode, DateMode, OnRefreshChangeProps, ShortDate, RelativeParts, RelativeOption, QuickSelect, QuickSelectPanel as EuiSuperDatePickerQuickSelectPanel, } from '@elastic/eui/src/components/date_picker/types';

}
declare module '@elastic/eui/src/components/delay_hide/delay_hide' {
	import { Component, ReactNode } from 'react';
	export interface EuiDelayHideProps {
	    hide: boolean;
	    minimumDuration: number;
	    render: () => ReactNode;
	}
	interface EuiDelayHideState {
	    hide: boolean;
	    countdownExpired?: boolean;
	}
	export class EuiDelayHide extends Component<EuiDelayHideProps, EuiDelayHideState> {
	    static defaultProps: {
	        hide: boolean;
	        minimumDuration: number;
	    };
	    static getDerivedStateFromProps(nextProps: EuiDelayHideProps, prevState: EuiDelayHideState): {
	        hide: boolean;
	        countdownExpired: boolean | undefined;
	    };
	    state: {
	        hide: boolean;
	        countdownExpired: boolean;
	    };
	    private timeoutId?;
	    componentDidMount(): void;
	    componentDidUpdate(prevProps: EuiDelayHideProps): void;
	    componentWillUnmount(): void;
	    startCountdown: () => void;
	    finishCountdown: () => void;
	    render(): {} | null | undefined;
	}
	export {};

}
declare module '@elastic/eui/src/components/delay_hide' {
	export { EuiDelayHide, EuiDelayHideProps } from '@elastic/eui/src/components/delay_hide/delay_hide';

}
declare module '@elastic/eui/src/components/delay_render/delay_render' {
	import { Component } from 'react';
	export interface EuiDelayRenderProps {
	    delay: number;
	}
	interface EuiDelayRenderState {
	    toggle: boolean;
	}
	export class EuiDelayRender extends Component<EuiDelayRenderProps, EuiDelayRenderState> {
	    static defaultProps: {
	        delay: number;
	    };
	    private delayID;
	    private toBeDelayed;
	    constructor(props: EuiDelayRenderProps);
	    shouldUpdate(): void;
	    startDelaying: () => void;
	    stopDelaying: () => void;
	    componentDidMount(): void;
	    shouldComponentUpdate(): boolean;
	    componentWillUnmount(): void;
	    componentDidUpdate(): void;
	    render(): {} | null | undefined;
	}
	export {};

}
declare module '@elastic/eui/src/components/delay_render' {
	export { EuiDelayRender, EuiDelayRenderProps } from '@elastic/eui/src/components/delay_render/delay_render';

}
declare module '@elastic/eui/src/components/description_list/description_list_title' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export const EuiDescriptionListTitle: FunctionComponent<CommonProps & HTMLAttributes<HTMLElement>>;

}
declare module '@elastic/eui/src/components/description_list/description_list_description' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export const EuiDescriptionListDescription: FunctionComponent<CommonProps & HTMLAttributes<HTMLElement>>;

}
declare module '@elastic/eui/src/components/description_list/description_list' {
	import { HTMLAttributes, ReactNode, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiDescriptionListType = keyof typeof typesToClassNameMap;
	export type EuiDescriptionListAlignment = keyof typeof alignmentsToClassNameMap;
	export type EuiDescriptionListTextStyle = keyof typeof textStylesToClassNameMap;
	export interface EuiDescriptionListProps {
	    listItems?: Array<{
	        title: NonNullable<ReactNode>;
	        description: NonNullable<ReactNode>;
	    }>;
	    /**
	     * Text alignment
	     */
	    align?: EuiDescriptionListAlignment;
	    /**
	     * Smaller text and condensed spacing
	     */
	    compressed?: boolean;
	    /**
	     * How should the content be styled, by default
	     * this will emphasize the title
	     */
	    textStyle?: EuiDescriptionListTextStyle;
	    /**
	     * How each item should be laid out
	     */
	    type?: EuiDescriptionListType;
	    /**
	     * Props object to be passed to `EuiDescriptionListTitle`
	     */
	    titleProps?: HTMLAttributes<HTMLElement> & CommonProps;
	    /**
	     * Props object to be passed to `EuiDescriptionListDescription`
	     */
	    descriptionProps?: HTMLAttributes<HTMLElement> & CommonProps;
	} const typesToClassNameMap: {
	    row: string;
	    inline: string;
	    column: string;
	    responsiveColumn: string;
	};
	export const TYPES: ("inline" | "column" | "row" | "responsiveColumn")[]; const alignmentsToClassNameMap: {
	    center: string;
	    left: string;
	};
	export const ALIGNMENTS: ("left" | "center")[]; const textStylesToClassNameMap: {
	    normal: string;
	    reverse: string;
	};
	export const TEXT_STYLES: ("normal" | "reverse")[];
	export const EuiDescriptionList: FunctionComponent<CommonProps & HTMLAttributes<HTMLDListElement> & EuiDescriptionListProps>;
	export {};

}
declare module '@elastic/eui/src/components/description_list' {
	export { EuiDescriptionList, EuiDescriptionListProps, } from '@elastic/eui/src/components/description_list/description_list';
	export { EuiDescriptionListTitle } from '@elastic/eui/src/components/description_list/description_list_title';
	export { EuiDescriptionListDescription } from '@elastic/eui/src/components/description_list/description_list_description';

}
declare module '@elastic/eui/src/components/empty_prompt/empty_prompt' {
	import { FunctionComponent, ReactElement, ReactNode } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiTitleSize } from '@elastic/eui/src/components/title';
	import { IconColor, IconType } from '@elastic/eui/src/components/icon';
	import { _EuiPanelDivlike } from '@elastic/eui/src/components/panel/panel';
	export const PADDING_SIZES: ("s" | "m" | "l" | "none")[];
	export type PaddingSize = typeof PADDING_SIZES[number];
	export type EuiEmptyPromptProps = CommonProps & Omit<_EuiPanelDivlike, 'borderRadius' | 'grow' | 'panelRef' | 'paddingSize' | 'title'> & {
	    iconType?: IconType;
	    /**
	     * Color for `iconType` when passed as an `IconType`
	     */
	    iconColor?: IconColor;
	    /**
	     * Custom icon replacing the one generated by `iconType`
	     */
	    icon?: ReactNode;
	    /**
	     * Requires passing a single element that gets wrapped in an EuiTitle.
	     * Recommendation is a heading, preferrably an `<h2>` if in its own section
	     */
	    title?: ReactElement<any>;
	    /**
	     * Choose from one of the `EuiTitle.size` options
	     */
	    titleSize?: EuiTitleSize;
	    /**
	     * Gets wrapped in a subdued EuiText block.
	     * Recommendation is to pass typical text elements like `<p>`
	     */
	    body?: ReactNode;
	    /**
	     * Pass a single or an array of actions (buttons) that get stacked at the bottom.
	     * Recommendation is to pass the primary action first and secondary actions as empty buttons
	     */
	    actions?: ReactNode;
	    /**
	     * Optionally provide a footer. Accepts any combination of elements.
	     */
	    footer?: ReactNode;
	    /**
	     * Sets the layout. When `horizontal` the icon goes to the right column.
	     */
	    layout?: 'vertical' | 'horizontal';
	    /**
	     * Padding applied around the content and footer.
	     */
	    paddingSize?: PaddingSize;
	};
	export const EuiEmptyPrompt: FunctionComponent<EuiEmptyPromptProps>;

}
declare module '@elastic/eui/src/components/empty_prompt' {
	export { EuiEmptyPrompt, EuiEmptyPromptProps } from '@elastic/eui/src/components/empty_prompt/empty_prompt';

}
declare module '@elastic/eui/src/components/error_boundary/error_boundary' {
	import { Component, HTMLAttributes, ReactNode } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	interface EuiErrorBoundaryState {
	    hasError: boolean;
	    error?: string;
	}
	export type EuiErrorBoundaryProps = CommonProps & HTMLAttributes<HTMLDivElement> & {
	    /**
	     * ReactNode to render as this component's content
	     */
	    children: ReactNode;
	};
	export class EuiErrorBoundary extends Component<EuiErrorBoundaryProps, EuiErrorBoundaryState> {
	    constructor(props: EuiErrorBoundaryProps);
	    componentDidCatch({ message, stack }: Error): void;
	    render(): {} | null | undefined;
	}
	export {};

}
declare module '@elastic/eui/src/components/error_boundary' {
	export { EuiErrorBoundary, EuiErrorBoundaryProps } from '@elastic/eui/src/components/error_boundary/error_boundary';

}
declare module '@elastic/eui/src/components/expression/expression' {
	import { ButtonHTMLAttributes, HTMLAttributes, MouseEventHandler, ReactNode, FunctionComponent } from 'react';
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common'; const colorToClassNameMap: {
	    subdued: string;
	    primary: string;
	    success: string;
	    accent: string;
	    warning: string;
	    danger: string;
	}; const textWrapToClassNameMap: {
	    'break-word': null;
	    truncate: string;
	};
	export const COLORS: ("primary" | "success" | "accent" | "warning" | "danger" | "subdued")[];
	export type ExpressionColor = keyof typeof colorToClassNameMap; const displayToClassNameMap: {
	    inline: null;
	    columns: string;
	};
	export type EuiExpressionProps = CommonProps & {
	    /**
	     * First part of the expression
	     */
	    description: ReactNode;
	    descriptionProps?: HTMLAttributes<HTMLSpanElement>;
	    /**
	     * Second part of the expression
	     */
	    value?: ReactNode;
	    valueProps?: HTMLAttributes<HTMLSpanElement>;
	    /**
	     * Color of the `description`
	     */
	    color?: ExpressionColor;
	    /**
	     * Should the `description` auto-uppercase?
	     */
	    uppercase?: boolean;
	    /**
	     * Adds an solid border at the bottom
	     */
	    isActive?: boolean;
	    /**
	     * Turns the component into a button and adds an editable style border at the bottom
	     */
	    onClick?: MouseEventHandler<HTMLButtonElement>;
	    /**
	     * Sets the display style for the expression. Defaults to `inline`
	     */
	    display?: keyof typeof displayToClassNameMap;
	    /**
	     * Forces color to display as `danger` and shows an `alert` icon
	     */
	    isInvalid?: boolean;
	    /**
	     * Sets a custom width for the description when using the columns layout.
	     * Set to a number for a custom width in `px`.
	     * Set to a string for a custom width in custom measurement.
	     * Defaults to `20%`
	     */
	    descriptionWidth?: number | string;
	    /**
	     * Sets how to handle the wrapping of long text.
	     */
	    textWrap?: keyof typeof textWrapToClassNameMap;
	}; type Buttonlike = EuiExpressionProps & Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'value'> & {
	    onClick: MouseEventHandler<HTMLButtonElement>;
	}; type Spanlike = EuiExpressionProps & Omit<HTMLAttributes<HTMLSpanElement>, 'value'>;
	export const EuiExpression: FunctionComponent<ExclusiveUnion<Buttonlike, Spanlike>>;
	export {};

}
declare module '@elastic/eui/src/components/expression' {
	export { EuiExpression, EuiExpressionProps } from '@elastic/eui/src/components/expression/expression';

}
declare module '@elastic/eui/src/components/facet/facet_button' {
	import { FunctionComponent, HTMLAttributes, MouseEventHandler, ReactNode, RefCallback } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export interface EuiFacetButtonProps extends CommonProps, Omit<HTMLAttributes<HTMLButtonElement>, 'onClick'> {
	    buttonRef?: RefCallback<HTMLButtonElement>;
	    /**
	     * ReactNode to render as this component's content
	     */
	    children: ReactNode;
	    /**
	     * Any node, but preferably a `EuiIcon` or `EuiAvatar`
	     */
	    icon?: ReactNode;
	    isDisabled?: boolean;
	    /**
	     * Adds/swaps for loading spinner & disables
	     */
	    isLoading?: boolean;
	    /**
	     * Changes visual of button to indicate it's currently selected
	     */
	    isSelected?: boolean;
	    onClick?: MouseEventHandler<HTMLButtonElement>;
	    /**
	     * Adds a notification indicator for displaying the quantity provided
	     */
	    quantity?: number;
	}
	export const EuiFacetButton: FunctionComponent<EuiFacetButtonProps>;

}
declare module '@elastic/eui/src/components/facet/facet_group' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; type FacetGroupLayout = 'vertical' | 'horizontal';
	export const LAYOUTS: ("horizontal" | "vertical")[]; type FacetGroupGutterSize = 'none' | 's' | 'm' | 'l';
	export const GUTTER_SIZES: ("s" | "m" | "l" | "none")[];
	export type EuiFacetGroupProps = CommonProps & HTMLAttributes<HTMLDivElement> & {
	    /**
	     * Vertically in a column, or horizontally in one wrapping line
	     */
	    layout?: FacetGroupLayout;
	    /**
	     * Distance between facet buttons.
	     * Horizontal layout always adds more distance horizontally between buttons.
	     */
	    gutterSize?: FacetGroupGutterSize;
	};
	export const EuiFacetGroup: FunctionComponent<EuiFacetGroupProps>;
	export {};

}
declare module '@elastic/eui/src/components/facet' {
	export { EuiFacetButton, EuiFacetButtonProps } from '@elastic/eui/src/components/facet/facet_button';
	export { EuiFacetGroup, EuiFacetGroupProps } from '@elastic/eui/src/components/facet/facet_group';

}
declare module '@elastic/eui/src/components/header/header_section/header_section' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; type HeaderSectionSide = 'left' | 'right';
	export type EuiHeaderSectionProps = CommonProps & HTMLAttributes<HTMLDivElement> & {
	    side?: HeaderSectionSide;
	    grow?: boolean;
	};
	export const EuiHeaderSection: FunctionComponent<EuiHeaderSectionProps>;
	export {};

}
declare module '@elastic/eui/src/components/header/header_section/header_section_item' {
	import { FunctionComponent, ReactNode } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; type Border = 'left' | 'right' | 'none';
	export type EuiHeaderSectionItemProps = CommonProps & {
	    /**
	     * Side to display a short border on.
	     * Not supported in Amsterdam theme.
	     */
	    border?: Border;
	    /**
	     * ReactNode to render as this component's content
	     */
	    children?: ReactNode;
	};
	export const EuiHeaderSectionItem: FunctionComponent<EuiHeaderSectionItemProps>;
	export {};

}
declare module '@elastic/eui/src/components/header/header_section/header_section_item_button' {
	import React from 'react';
	import { EuiNotificationBadgeProps } from '@elastic/eui/src/components/badge/notification_badge/badge_notification';
	import { EuiButtonEmptyProps } from '@elastic/eui/src/components/button';
	export type EuiHeaderSectionItemButtonProps = EuiButtonEmptyProps & {
	    /**
	     * Inserts the node into a EuiBadgeNotification and places it appropriately against the button.
	     * Or pass `true` to render a simple dot
	     */
	    notification?: EuiNotificationBadgeProps['children'] | boolean;
	    /**
	     * Changes the color of the notification background
	     */
	    notificationColor?: EuiNotificationBadgeProps['color'];
	};
	export type EuiHeaderSectionItemButtonRef = (HTMLButtonElement & {
	    euiAnimate: () => void;
	}) | null;
	export const EuiHeaderSectionItemButton: React.ForwardRefExoticComponent<(import ("@elastic/eui/src/components").DisambiguateSet<import ("@elastic/eui/src/components").PropsForAnchor<import ("@elastic/eui/src/components/button/button_empty/button_empty").CommonEuiButtonEmptyProps, {}>, import ("@elastic/eui/src/components").PropsForButton<import ("@elastic/eui/src/components/button/button_empty/button_empty").CommonEuiButtonEmptyProps, {}>> & import ("@elastic/eui/src/components/button/button_empty/button_empty").CommonEuiButtonEmptyProps & {
	    onClick?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
	} & React.ButtonHTMLAttributes<HTMLButtonElement> & {
	    /**
	     * Inserts the node into a EuiBadgeNotification and places it appropriately against the button.
	     * Or pass `true` to render a simple dot
	     */
	    notification?: EuiNotificationBadgeProps['children'] | boolean;
	    /**
	     * Changes the color of the notification background
	     */
	    notificationColor?: EuiNotificationBadgeProps['color'];
	} & {
	    children?: React.ReactNode;
	} & React.RefAttributes<EuiHeaderSectionItemButtonRef>) | (import ("@elastic/eui/src/components").DisambiguateSet<import ("@elastic/eui/src/components").PropsForButton<import ("@elastic/eui/src/components/button/button_empty/button_empty").CommonEuiButtonEmptyProps, {}>, import ("@elastic/eui/src/components").PropsForAnchor<import ("@elastic/eui/src/components/button/button_empty/button_empty").CommonEuiButtonEmptyProps, {}>> & import ("@elastic/eui/src/components/button/button_empty/button_empty").CommonEuiButtonEmptyProps & {
	    href?: string | undefined;
	    onClick?: ((event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void) | undefined;
	} & React.AnchorHTMLAttributes<HTMLAnchorElement> & {
	    /**
	     * Inserts the node into a EuiBadgeNotification and places it appropriately against the button.
	     * Or pass `true` to render a simple dot
	     */
	    notification?: EuiNotificationBadgeProps['children'] | boolean;
	    /**
	     * Changes the color of the notification background
	     */
	    notificationColor?: EuiNotificationBadgeProps['color'];
	} & {
	    children?: React.ReactNode;
	} & React.RefAttributes<EuiHeaderSectionItemButtonRef>)>;

}
declare module '@elastic/eui/src/components/header/header_section' {
	export { EuiHeaderSection, EuiHeaderSectionProps } from '@elastic/eui/src/components/header/header_section/header_section';
	export { EuiHeaderSectionItem, EuiHeaderSectionItemProps, } from '@elastic/eui/src/components/header/header_section/header_section_item';
	export { EuiHeaderSectionItemButton, EuiHeaderSectionItemButtonProps, } from '@elastic/eui/src/components/header/header_section/header_section_item_button';

}
declare module '@elastic/eui/src/components/header/header_breadcrumbs/header_breadcrumbs' {
	import { FunctionComponent } from 'react';
	import { EuiBreadcrumbsProps } from '@elastic/eui/src/components/breadcrumbs';
	export const EuiHeaderBreadcrumbs: FunctionComponent<EuiBreadcrumbsProps>;

}
declare module '@elastic/eui/src/components/header/header_breadcrumbs' {
	export { EuiHeaderBreadcrumbs } from '@elastic/eui/src/components/header/header_breadcrumbs/header_breadcrumbs';

}
declare module '@elastic/eui/src/components/header/header' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiHeaderSectionItemProps } from '@elastic/eui/src/components/header/header_section';
	import { EuiBreadcrumb, EuiBreadcrumbsProps } from '@elastic/eui/src/components/breadcrumbs'; type EuiHeaderSectionItemType = EuiHeaderSectionItemProps['children']; type EuiHeaderSectionBorderType = EuiHeaderSectionItemProps['border'];
	export interface EuiHeaderSections {
	    /**
	     * An arry of items that will be wrapped in a #EuiHeaderSectionItem
	     */
	    items?: EuiHeaderSectionItemType[];
	    /**
	     * Apply the passed border side to each #EuiHeaderSectionItem
	     */
	    borders?: EuiHeaderSectionBorderType;
	    /**
	     * Breadcrumbs in the header cannot be wrapped in a #EuiHeaderSection in order for truncation to work.
	     * Simply pass the array of EuiBreadcrumb objects
	     */
	    breadcrumbs?: EuiBreadcrumb[];
	    /**
	     * Other props to pass to #EuiHeaderBreadcrumbs
	     */
	    breadcrumbProps?: Omit<EuiBreadcrumbsProps, 'breadcrumbs'>;
	}
	export type EuiHeaderProps = CommonProps & HTMLAttributes<HTMLDivElement> & {
	    /**
	     * An array of objects to wrap in a #EuiHeaderSection.
	     * Each section is spaced using `space-between`.
	     * See #EuiHeaderSectionsProp for object details.
	     * This prop disregards the prop `children` if both are passed.
	     */
	    sections?: EuiHeaderSections[];
	    /**
	     * Helper that positions the header against the window body and
	     * adds the correct amount of top padding to the window when in `fixed` mode
	     */
	    position?: 'static' | 'fixed';
	    /**
	     * The `default` will inherit its coloring from the light or dark theme.
	     * Or, force the header into pseudo `dark` theme for all themes.
	     */
	    theme?: 'default' | 'dark';
	};
	export const EuiHeader: FunctionComponent<EuiHeaderProps>;
	export {};

}
declare module '@elastic/eui/src/components/header/header_alert/header_alert' {
	import { FunctionComponent, HTMLAttributes, ReactNode } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiHeaderAlertProps = CommonProps & Omit<HTMLAttributes<HTMLDivElement>, 'title'> & {
	    /**
	     * Adds a link to the alert.
	     */
	    action?: ReactNode;
	    date: ReactNode;
	    text?: ReactNode;
	    title: ReactNode;
	    /**
	     * Accepts an `EuiBadge` that displays on the alert
	     */
	    badge?: ReactNode;
	};
	export const EuiHeaderAlert: FunctionComponent<EuiHeaderAlertProps>;

}
declare module '@elastic/eui/src/components/header/header_alert' {
	export { EuiHeaderAlert, EuiHeaderAlertProps } from '@elastic/eui/src/components/header/header_alert/header_alert';

}
declare module '@elastic/eui/src/components/header/header_links/header_link' {
	import { FunctionComponent } from 'react';
	import { EuiButtonEmptyProps } from '@elastic/eui/src/components/button';
	export type EuiHeaderLinkProps = EuiButtonEmptyProps & {
	    /**
	     * Simple prop to update color based on active state.
	     * Can be overridden with `color`
	     */
	    isActive?: boolean;
	};
	export const EuiHeaderLink: FunctionComponent<EuiHeaderLinkProps>;

}
declare module '@elastic/eui/src/components/header/header_links/header_links' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { IconType } from '@elastic/eui/src/components/icon';
	import { EuiPopoverProps } from '@elastic/eui/src/components/popover';
	import { EuiHeaderSectionItemButtonProps } from '@elastic/eui/src/components/header/header_section';
	import { EuiBreakpointSize } from '@elastic/eui/src/services/breakpoint'; type EuiHeaderLinksGutterSize = 'xs' | 's' | 'm' | 'l'; type EuiHeaderLinksPopoverButtonProps = Partial<EuiHeaderSectionItemButtonProps> & {
	    iconType?: IconType;
	};
	export type EuiHeaderLinksProps = CommonProps & HTMLAttributes<HTMLElement> & {
	    /**
	     * Spacing between direct children
	     */
	    gutterSize?: EuiHeaderLinksGutterSize;
	    /**
	     * A list of named breakpoints at which to show the popover version
	     */
	    popoverBreakpoints?: EuiBreakpointSize[] | 'all' | 'none';
	    /**
	     * Extend the functionality of the EuiPopover.button which is a EuiHeaderSectionItemButton.
	     * With the addition of `iconType` to change the display icon which defaults to `apps`
	     */
	    popoverButtonProps?: EuiHeaderLinksPopoverButtonProps;
	    /**
	     * Extend the functionality of the EuiPopover
	     */
	    popoverProps?: Omit<EuiPopoverProps, 'button' | 'closePopover'>;
	};
	export const GUTTER_SIZES: ("s" | "xs" | "m" | "l")[];
	export const EuiHeaderLinks: FunctionComponent<EuiHeaderLinksProps>;
	export {};

}
declare module '@elastic/eui/src/components/header/header_links' {
	export { EuiHeaderLink, EuiHeaderLinkProps } from '@elastic/eui/src/components/header/header_links/header_link';
	export { EuiHeaderLinks, EuiHeaderLinksProps } from '@elastic/eui/src/components/header/header_links/header_links';

}
declare module '@elastic/eui/src/components/header/header_logo' {
	import { FunctionComponent, AnchorHTMLAttributes, ReactNode } from 'react';
	import { IconType } from '@elastic/eui/src/components/icon';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiHeaderLogoProps = CommonProps & AnchorHTMLAttributes<HTMLAnchorElement> & {
	    href?: string;
	    rel?: string;
	    target?: string;
	    iconType?: IconType;
	    iconTitle?: string;
	    /**
	     * ReactNode to render as this component's content
	     */
	    children?: ReactNode;
	};
	export const EuiHeaderLogo: FunctionComponent<EuiHeaderLogoProps>;

}
declare module '@elastic/eui/src/components/header' {
	export { EuiHeader, EuiHeaderProps, EuiHeaderSections } from '@elastic/eui/src/components/header/header';
	export { EuiHeaderAlert, EuiHeaderAlertProps } from '@elastic/eui/src/components/header/header_alert';
	export { EuiHeaderBreadcrumbs } from '@elastic/eui/src/components/header/header_breadcrumbs';
	export { EuiHeaderLink, EuiHeaderLinkProps, EuiHeaderLinks, EuiHeaderLinksProps, } from '@elastic/eui/src/components/header/header_links';
	export { EuiHeaderLogo, EuiHeaderLogoProps } from '@elastic/eui/src/components/header/header_logo';
	export { EuiHeaderSection, EuiHeaderSectionItem, EuiHeaderSectionItemButton, EuiHeaderSectionItemButtonProps, } from '@elastic/eui/src/components/header/header_section';

}
declare module '@elastic/eui/src/components/health/health' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { IconColor } from '@elastic/eui/src/components/icon';
	export const TEXT_SIZES: ("s" | "xs" | "m" | "inherit")[];
	export type EuiHealthProps = CommonProps & Omit<HTMLAttributes<HTMLDivElement>, 'color'> & {
	    /**
	     * Sets the color of the dot icon.
	     * It accepts any `IconColor`: `default`, `primary`, `success`, `accent`, `warning`, `danger`, `text`,
	     * `subdued` or `ghost`; or any valid CSS color value as a `string`
	     */
	    color?: IconColor;
	    /**
	     * Matches the text scales of EuiText.
	     * The `inherit` style will get its font size from the parent element
	     */
	    textSize?: typeof TEXT_SIZES[number];
	};
	export const EuiHealth: FunctionComponent<EuiHealthProps>;

}
declare module '@elastic/eui/src/components/health' {
	export { EuiHealth, EuiHealthProps } from '@elastic/eui/src/components/health/health';

}
declare module '@elastic/eui/src/components/image/image' {
	import { FunctionComponent, ImgHTMLAttributes, ReactNode } from 'react';
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common'; type ImageSize = 's' | 'm' | 'l' | 'xl' | 'fullWidth' | 'original'; type Floats = 'left' | 'right'; type Margins = 's' | 'm' | 'l' | 'xl';
	export const SIZES: string[]; type FullScreenIconColor = 'light' | 'dark'; type _EuiImageSrcOrUrl = ExclusiveUnion<{
	    /**
	     * Requires either `src` or `url` but defaults to using `src` if both are provided
	     */
	    src: string;
	}, {
	    url: string;
	}>;
	export type EuiImageProps = CommonProps & _EuiImageSrcOrUrl & Omit<ImgHTMLAttributes<HTMLImageElement>, 'src' | 'alt'> & {
	    /**
	     * Separate from the caption is a title on the alt tag itself.
	     * This one is required for accessibility.
	     */
	    alt: string;
	    /**
	     * Accepts `s` / `m` / `l` / `xl` / `original` / `fullWidth` / or a CSS size of `number` or `string`.
	     * `fullWidth` will set the figure to stretch to 100% of its container.
	     * `string` and `number` types will max both the width or height, whichever is greater.
	     */
	    size?: ImageSize | number | string;
	    /**
	     * Changes the color of the icon that floats above the image when it can be clicked to fullscreen.
	     * The default value of `light` is fine unless your image has a white background, in which case you should change it to `dark`.
	     */
	    fullScreenIconColor?: FullScreenIconColor;
	    /**
	     * Provides the visible caption to the image
	     */
	    caption?: ReactNode;
	    /**
	     * When set to `true` (default) will apply a slight shadow to the image
	     */
	    hasShadow?: boolean;
	    /**
	     * When set to `true` will make the image clickable to a larger version
	     */
	    allowFullScreen?: boolean;
	    /**
	     * Float the image to the left or right. Useful in large text blocks.
	     */
	    float?: Floats;
	    /**
	     * Margin around the image.
	     */
	    margin?: Margins;
	};
	export const EuiImage: FunctionComponent<EuiImageProps>;
	export {};

}
declare module '@elastic/eui/src/components/image' {
	export { EuiImage, EuiImageProps } from '@elastic/eui/src/components/image/image';

}
declare module '@elastic/eui/src/components/key_pad_menu/key_pad_menu' {
	import { FunctionComponent, HTMLAttributes, ReactNode } from 'react';
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common';
	import { _EuiFormLegendProps } from '@elastic/eui/src/components/form/form_label/form_label';
	export type _EuiKeyPadMenuCheckableProps = ExclusiveUnion<{
	    /**
	     * Rendered within a `legend` to label the `fieldset`.
	     * To create a visually hidden legend, use `ariaLegend`
	     */
	    legend: ReactNode;
	    /**
	     * Pass through props to a `EuiFormLabel` component, except for `type`
	     */
	    legendProps?: Omit<_EuiFormLegendProps, 'type'>;
	}, {
	    /**
	     * Custom aria-attribute for creating a *visually hidden* legend.
	     * To create a visible legend, use `legend`
	     */
	    ariaLegend: string;
	}>;
	export type EuiKeyPadMenuProps = CommonProps & HTMLAttributes<HTMLElement> & {
	    /**
	     * Renders the the group as a `fieldset`.
	     * Set to `true` to customize the labelling, or pass an #EuiKeyPadMenuCheckableProps object to add a `legend` or `ariaLegend`
	     */
	    checkable?: _EuiKeyPadMenuCheckableProps | true;
	};
	export const EuiKeyPadMenu: FunctionComponent<EuiKeyPadMenuProps>;

}
declare module '@elastic/eui/src/components/key_pad_menu/key_pad_menu_item' {
	import { FunctionComponent, ReactNode, Ref, LabelHTMLAttributes } from 'react';
	import { CommonProps, ExclusiveUnion, PropsForAnchor, PropsForButton } from '@elastic/eui/src/components/common';
	import { IconType } from '@elastic/eui/src/components/icon';
	import { EuiToolTipProps } from '@elastic/eui/src/components/tool_tip';
	export type EuiKeyPadMenuItemCheckableType = 'single' | 'multi';
	export type EuiKeyPadMenuItemCommonProps = {
	    /**
	     * One will be generated if not provided
	     */
	    id?: string;
	    /**
	     * Pass an EuiIcon, preferrably `size="l"`
	     */
	    children: ReactNode;
	    isDisabled?: boolean;
	    /**
	     * Indicate if an item is the current one.
	     * Be sure to use `true` AND `false` when acting as a toggle to ensure the attribute is added for both states
	     */
	    isSelected?: boolean;
	    /**
	     * The text to display beneath the icon
	     */
	    label: ReactNode;
	}; type EuiKeyPadMenuItemPropsForUncheckable = {
	    /**
	     * Beta badges are unavailable if the item is checkable
	     */
	    checkable?: undefined;
	    /**
	     * Add a badge to the card to label it as "Beta" or other non-GA state
	     */
	    betaBadgeLabel?: string;
	    /**
	     * Supply an icon type if the badge should just be an icon
	     */
	    betaBadgeIconType?: IconType;
	    /**
	     * Add a description to the beta badge (will appear in a tooltip)
	     */
	    betaBadgeTooltipContent?: ReactNode;
	    /**
	     * Extends the wrapping EuiToolTip props when `betaBadgeLabel` is provided
	     */
	    betaBadgeTooltipProps?: Partial<Omit<EuiToolTipProps, 'title' | 'content' | 'delay'>>;
	    /**
	     * Use `onClick` instead when the item is not `checkable`
	     */
	    onChange?: never;
	}; type EuiKeyPadMenuItemPropsForAnchor = PropsForAnchor<EuiKeyPadMenuItemCommonProps, {
	    buttonRef?: Ref<HTMLAnchorElement>;
	    rel?: string;
	} & EuiKeyPadMenuItemPropsForUncheckable>; type EuiKeyPadMenuItemPropsForButton = PropsForButton<EuiKeyPadMenuItemCommonProps, {
	    buttonRef?: Ref<HTMLButtonElement>;
	} & EuiKeyPadMenuItemPropsForUncheckable>; type EuiKeyPadMenuItemPropsForCheckable = Omit<LabelHTMLAttributes<HTMLLabelElement>, 'onChange'> & EuiKeyPadMenuItemCommonProps & {
	    /**
	     * Use `onChange` instead when the item is `checkable`
	     */
	    onClick?: never;
	} & ExclusiveUnion<{
	    /**
	     * Type `'single'` renders the item as a `<label>` and
	     * adds a radio element.
	     */
	    checkable: 'single';
	    /**
	     * The `name` attribute for radio inputs;
	     * Required in order to group properly
	     */
	    name: string;
	    /**
	     * The value of the radio input for 'single'
	     */
	    value?: string;
	    /**
	     * Single: Returns the `id` of the clicked option and the `value`
	     */
	    onChange: (id: string, value?: any) => void;
	}, {
	    /**
	     * Type `'multi'` renders the item as a `<label>` and
	     * adds a checkbox.
	     */
	    checkable: 'multi';
	    /**
	     * Multi: Returns the `id` of the clicked option
	     */
	    onChange: (id: string) => void;
	}>;
	export type EuiKeyPadMenuItemProps = CommonProps & ExclusiveUnion<EuiKeyPadMenuItemPropsForCheckable, ExclusiveUnion<EuiKeyPadMenuItemPropsForAnchor, EuiKeyPadMenuItemPropsForButton>>;
	export const EuiKeyPadMenuItem: FunctionComponent<EuiKeyPadMenuItemProps>;
	export {};

}
declare module '@elastic/eui/src/components/key_pad_menu' {
	export { EuiKeyPadMenu, EuiKeyPadMenuProps } from '@elastic/eui/src/components/key_pad_menu/key_pad_menu';
	export { EuiKeyPadMenuItem, EuiKeyPadMenuItemProps } from '@elastic/eui/src/components/key_pad_menu/key_pad_menu_item';

}
declare module '@elastic/eui/src/components/markdown_editor/markdown_types' {
	import { ComponentType, ReactNode } from 'react';
	import { VFile } from 'vfile';
	import { Node as UnistNode, Position as UnistPosition } from 'unist';
	import { Parser } from 'remark-parse';
	import { VFileMessage } from 'vfile-message';
	import { IconType } from '@elastic/eui/src/components/icon';
	export interface RemarkParser {
	    Parser: typeof Parser;
	    tokenizeInline: Function;
	    file: VFile;
	}
	export interface RemarkTokenizer {
	    (this: RemarkParser, eat: Function & {
	        now: Function;
	    }, value: string, silent: boolean): boolean | void;
	    locator?: (value: string, fromIndex: number) => number;
	    notInLink?: boolean;
	}
	interface RehypeNode {
	}
	interface RemarkRehypeHandlerCallback {
	    (node: UnistPosition, tagName: string, props: Object, children: RehypeNode[]): RehypeNode;
	}
	export interface RemarkRehypeHandler {
	    (h: RemarkRehypeHandlerCallback, node: UnistNode): RehypeNode;
	}
	export interface EuiMarkdownEditorUiPluginEditorProps<NodeShape> {
	    node: NodeShape | null;
	    onCancel: () => void;
	    onSave: (markdown: string, config: EuiMarkdownStringTagConfig) => void;
	}
	export const isPluginWithImmediateFormatting: (x: PluginWithImmediateFormatting | PluginWithDelayedFormatting<any>) => x is PluginWithImmediateFormatting;
	export interface PluginWithImmediateFormatting {
	    formatting: EuiMarkdownFormatting;
	    editor?: never;
	}
	export interface PluginWithDelayedFormatting<NodeShape> {
	    formatting?: never;
	    editor: ComponentType<EuiMarkdownEditorUiPluginEditorProps<NodeShape>>;
	}
	export type EuiMarkdownEditorUiPlugin<NodeShape = any> = {
	    name: string;
	    button: {
	        label: string;
	        iconType: IconType;
	    };
	    helpText?: ReactNode;
	} & (PluginWithImmediateFormatting | PluginWithDelayedFormatting<NodeShape>);
	export interface EuiMarkdownFormatting {
	    prefix?: string;
	    suffix?: string;
	    blockPrefix?: string;
	    blockSuffix?: string;
	    multiline?: boolean;
	    replaceNext?: string;
	    prefixSpace?: boolean;
	    scanFor?: string;
	    surroundWithNewlines?: boolean;
	    orderedList?: boolean;
	    trimFirst?: boolean;
	}
	export interface EuiMarkdownAstNode {
	    type: string;
	    children?: EuiMarkdownAstNode[];
	    position: EuiMarkdownAstNodePosition;
	}
	export interface EuiMarkdownAstNodePosition {
	    start: {
	        line: number;
	        column: number;
	        offset: number;
	    };
	    end: {
	        line: number;
	        column: number;
	        offset: number;
	    };
	}
	export type EuiMarkdownParseError = string | VFileMessage | Error;
	export interface EuiMarkdownDropHandler {
	    supportedFiles: string[];
	    accepts: (itemType: string) => boolean;
	    getFormattingForItem: (file: File) => EuiMarkdownDragAndDropResult | Promise<EuiMarkdownDragAndDropResult>;
	}
	export interface EuiMarkdownStringTagConfig {
	    block: boolean;
	}
	export interface EuiMarkdownDragAndDropResult {
	    text: string;
	    config: EuiMarkdownStringTagConfig;
	}
	export {};

}
declare module '@elastic/eui/src/components/markdown_editor/markdown_actions' {
	import { EuiMarkdownEditorUiPlugin, EuiMarkdownFormatting } from '@elastic/eui/src/components/markdown_editor/markdown_types'; class MarkdownActions {
	    editorID: string;
	    styles: Record<string, EuiMarkdownEditorUiPlugin>;
	    constructor(editorID: string, uiPlugins: EuiMarkdownEditorUiPlugin[]);
	    /**
	     * .do() accepts a string and retrieves the correlating style object (defined in the
	     * constructor). It passes this to applyStyle() that does the text manipulation.
	     *
	     * @param {string} pluginName
	     * @memberof MarkdownActions
	     */
	    do(pluginName: string): true | EuiMarkdownEditorUiPlugin;
	    /**
	     * Sets the default styling object and then superimposes the changes to make on top of
	     * it. Calls the `styleSelectedText` helper function that does the heavy lifting.
	     * Adapted from https://github.com/github/markdown-toolbar-element/blob/main/src/index.ts
	     *
	     * @param {object} incomingStyle
	     * @memberof MarkdownActions
	     */
	    applyStyle(incomingStyle: EuiMarkdownFormatting): void;
	}
	interface SelectionRange {
	    text: string;
	    selectionStart?: number;
	    selectionEnd?: number;
	}
	export function insertText(textarea: HTMLTextAreaElement, { text, selectionStart, selectionEnd }: SelectionRange): void;
	export default MarkdownActions;

}
declare module '@elastic/eui/src/components/markdown_editor/markdown_modes' {
	export const MODE_EDITING: "editing";
	export const MODE_VIEWING: "viewing";
	export type MARKDOWN_MODE = typeof MODE_EDITING | typeof MODE_VIEWING;

}
declare module '@elastic/eui/src/components/markdown_editor/markdown_context' {
	
	import { EuiMarkdownEditorUiPlugin } from '@elastic/eui/src/components/markdown_editor/markdown_types';
	interface MarkdownPosition {
	    start: {
	        line: number;
	        column: number;
	        offset: number;
	    };
	    end: {
	        line: number;
	        column: number;
	        offset: number;
	    };
	}
	export interface ContextShape {
	    openPluginEditor: (plugin: EuiMarkdownEditorUiPlugin) => void;
	    replaceNode(position: MarkdownPosition, next: string): void;
	}
	export const EuiMarkdownContext: import("react").Context<ContextShape>;
	export {};

}
declare module '@elastic/eui/src/components/markdown_editor/icons/markdown_checkmark' {
	import React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	} const MarkdownCheckmark: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export default MarkdownCheckmark;

}
declare module '@elastic/eui/src/components/markdown_editor/markdown_editor_toolbar' {
	import React, { HTMLAttributes, MouseEventHandler } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { MARKDOWN_MODE } from '@elastic/eui/src/components/markdown_editor/markdown_modes';
	import { EuiMarkdownEditorUiPlugin } from '@elastic/eui/src/components/markdown_editor/markdown_types';
	import MarkdownActions from '@elastic/eui/src/components/markdown_editor/markdown_actions';
	export type EuiMarkdownEditorToolbarProps = HTMLAttributes<HTMLDivElement> & CommonProps & {
	    selectedNode?: null | any;
	    markdownActions: MarkdownActions;
	    viewMode: MARKDOWN_MODE;
	    onClickPreview: MouseEventHandler<HTMLButtonElement>;
	    uiPlugins: EuiMarkdownEditorUiPlugin[];
	};
	export const EuiMarkdownEditorToolbar: React.ForwardRefExoticComponent<React.HTMLAttributes<HTMLDivElement> & CommonProps & {
	    selectedNode?: null | any;
	    markdownActions: MarkdownActions;
	    viewMode: MARKDOWN_MODE;
	    onClickPreview: MouseEventHandler<HTMLButtonElement>;
	    uiPlugins: EuiMarkdownEditorUiPlugin[];
	} & React.RefAttributes<HTMLDivElement>>;

}
declare module '@elastic/eui/src/components/markdown_editor/markdown_editor_text_area' {
	import React, { TextareaHTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiMarkdownEditorTextAreaProps = TextareaHTMLAttributes<HTMLTextAreaElement> & CommonProps & {
	    isInvalid?: boolean;
	    fullWidth?: boolean;
	    compressed?: boolean;
	    height: string;
	    maxHeight: string;
	};
	export const EuiMarkdownEditorTextArea: React.ForwardRefExoticComponent<React.TextareaHTMLAttributes<HTMLTextAreaElement> & CommonProps & {
	    isInvalid?: boolean | undefined;
	    fullWidth?: boolean | undefined;
	    compressed?: boolean | undefined;
	    height: string;
	    maxHeight: string;
	} & React.RefAttributes<HTMLTextAreaElement>>;

}
declare module '@elastic/eui/src/components/markdown_editor/plugins/markdown_tooltip/types' {
	export interface TooltipNodeDetails {
	    type: 'tooltipPlugin';
	    content: string;
	}

}
declare module '@elastic/eui/src/components/markdown_editor/plugins/markdown_tooltip/parser' {
	import { Plugin } from 'unified';
	export const TooltipParser: Plugin;

}
declare module '@elastic/eui/src/components/markdown_editor/plugins/markdown_tooltip/plugin' {
	
	export const tooltipPlugin: {
	    name: string;
	    button: {
	        label: string;
	        iconType: string;
	    };
	    formatting: {
	        prefix: string;
	        suffix: string;
	        trimFirst: boolean;
	    };
	    helpText: JSX.Element;
	};

}
declare module '@elastic/eui/src/components/markdown_editor/plugins/markdown_tooltip/renderer' {
	import { FunctionComponent } from 'react';
	import { EuiMarkdownAstNodePosition } from '@elastic/eui/src/components/markdown_editor/markdown_types';
	import { TooltipNodeDetails } from '@elastic/eui/src/components/markdown_editor/plugins/markdown_tooltip/types';
	export const tooltipMarkdownRenderer: FunctionComponent<TooltipNodeDetails & {
	    position: EuiMarkdownAstNodePosition;
	}>;

}
declare module '@elastic/eui/src/components/markdown_editor/plugins/markdown_tooltip' {
	export { TooltipParser as parser } from '@elastic/eui/src/components/markdown_editor/plugins/markdown_tooltip/parser';
	export { tooltipPlugin as plugin } from '@elastic/eui/src/components/markdown_editor/plugins/markdown_tooltip/plugin';
	export { tooltipMarkdownRenderer as renderer } from '@elastic/eui/src/components/markdown_editor/plugins/markdown_tooltip/renderer';
	export * from '@elastic/eui/src/components/markdown_editor/plugins/markdown_tooltip/types';

}
declare module '@elastic/eui/src/components/markdown_editor/plugins/markdown_default_plugins/ui_plugins' {
	import { EuiMarkdownEditorUiPlugin } from '@elastic/eui/src/components/markdown_editor/markdown_types';
	export type DefaultEuiMarkdownUiPlugins = EuiMarkdownEditorUiPlugin[];
	export const getDefaultEuiMarkdownUiPlugins: ({ exclude, }?: {
	    exclude?: "tooltip"[] | undefined;
	}) => DefaultEuiMarkdownUiPlugins;
	export const defaultUiPlugins: DefaultEuiMarkdownUiPlugins;

}
declare module '@elastic/eui/src/components/markdown_editor/plugins/remark/remark_prismjs' {
	import { Plugin } from 'unified';
	export const FENCED_CLASS = "remark-prismjs--fenced"; const attacher: Plugin;
	export default attacher;

}
declare module '@elastic/eui/src/components/markdown_editor/plugins/markdown_checkbox/types' {
	export interface CheckboxNodeDetails {
	    type: 'checkboxPlugin';
	    lead: string;
	    label: string;
	    isChecked: boolean;
	}

}
declare module '@elastic/eui/src/components/markdown_editor/plugins/markdown_checkbox/parser' {
	import { Plugin } from 'unified';
	export const CheckboxParser: Plugin;

}
declare module '@elastic/eui/src/components/markdown_editor/plugins/markdown_checkbox/renderer' {
	import { FunctionComponent } from 'react';
	import { EuiMarkdownAstNodePosition } from '@elastic/eui/src/components/markdown_editor/markdown_types';
	import { CheckboxNodeDetails } from '@elastic/eui/src/components/markdown_editor/plugins/markdown_checkbox/types';
	export const CheckboxMarkdownRenderer: FunctionComponent<CheckboxNodeDetails & {
	    position: EuiMarkdownAstNodePosition;
	}>;

}
declare module '@elastic/eui/src/components/markdown_editor/plugins/markdown_checkbox' {
	export { CheckboxParser as parser } from '@elastic/eui/src/components/markdown_editor/plugins/markdown_checkbox/parser';
	export { CheckboxMarkdownRenderer as renderer } from '@elastic/eui/src/components/markdown_editor/plugins/markdown_checkbox/renderer';
	export * from '@elastic/eui/src/components/markdown_editor/plugins/markdown_checkbox/types';

}
declare module '@elastic/eui/src/components/markdown_editor/plugins/markdown_link_validator' {
	interface LinkOrTextNode {
	    type: string;
	    url?: string;
	    title?: string | null;
	    value?: string;
	    children?: Array<{
	        value: string;
	    }>;
	}
	export function markdownLinkValidator(): (ast: any) => void;
	export function mutateLinkToText(node: LinkOrTextNode): LinkOrTextNode;
	export function validateUrl(url: string): boolean;
	export {};

}
declare module '@elastic/eui/src/components/markdown_editor/plugins/markdown_default_plugins/parsing_plugins' {
	import { PluggableList, Settings } from 'unified';
	export type DefaultEuiMarkdownParsingPlugins = PluggableList;
	export const getDefaultEuiMarkdownParsingPlugins: ({ exclude, }?: {
	    exclude?: "tooltip"[] | undefined;
	}) => PluggableList<Settings>;
	export const defaultParsingPlugins: PluggableList<Settings>;

}
declare module '@elastic/eui/src/components/markdown_editor/plugins/markdown_default_plugins/processing_plugins' {
	import React from 'react';
	import { Plugin, PluggableList, Attacher, Pluggable, Settings } from 'unified';
	import { Options as Remark2RehypeOptions } from 'mdast-util-to-hast';
	import rehype2react from 'rehype-react';
	export interface Rehype2ReactOptions {
	    components: {
	        [key: string]: React.ComponentType<any>;
	    };
	    [key: string]: any;
	}
	export type DefaultEuiMarkdownProcessingPlugins = [
	    [
	        Plugin,
	        Remark2RehypeOptions
	    ],
	    [
	        typeof rehype2react,
	        Rehype2ReactOptions
	    ],
	    ...PluggableList
	];
	export const getDefaultEuiMarkdownProcessingPlugins: ({ exclude, }?: {
	    exclude?: "tooltip"[] | undefined;
	}) => [[Attacher<[(Settings | undefined)?], Settings>, Remark2RehypeOptions], [typeof rehype2react, Rehype2ReactOptions], ...Pluggable<any[], Settings>[]];
	export const defaultProcessingPlugins: [[Attacher<[(Settings | undefined)?], Settings>, Remark2RehypeOptions], [typeof rehype2react, Rehype2ReactOptions], ...Pluggable<any[], Settings>[]];

}
declare module '@elastic/eui/src/components/markdown_editor/plugins/markdown_default_plugins/plugins' {
	import { DefaultEuiMarkdownUiPlugins } from '@elastic/eui/src/components/markdown_editor/plugins/markdown_default_plugins/ui_plugins';
	import { DefaultEuiMarkdownParsingPlugins } from '@elastic/eui/src/components/markdown_editor/plugins/markdown_default_plugins/parsing_plugins';
	import { DefaultEuiMarkdownProcessingPlugins } from '@elastic/eui/src/components/markdown_editor/plugins/markdown_default_plugins/processing_plugins';
	export const getDefaultEuiMarkdownPlugins: (config: undefined | {
	    exclude?: Array<'tooltip'>;
	}) => {
	    parsingPlugins: DefaultEuiMarkdownParsingPlugins;
	    processingPlugins: DefaultEuiMarkdownProcessingPlugins;
	    uiPlugins: DefaultEuiMarkdownUiPlugins;
	};

}
declare module '@elastic/eui/src/components/markdown_editor/plugins/markdown_default_plugins' {
	export * from '@elastic/eui/src/components/markdown_editor/plugins/markdown_default_plugins/ui_plugins';
	export * from '@elastic/eui/src/components/markdown_editor/plugins/markdown_default_plugins/parsing_plugins';
	export * from '@elastic/eui/src/components/markdown_editor/plugins/markdown_default_plugins/processing_plugins';
	export * from '@elastic/eui/src/components/markdown_editor/plugins/markdown_default_plugins/plugins';

}
declare module '@elastic/eui/src/components/markdown_editor/markdown_format' {
	import { FunctionComponent } from 'react';
	import { PluggableList } from 'unified';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiTextProps } from '@elastic/eui/src/components/text/text';
	export type EuiMarkdownFormatProps = CommonProps & Omit<EuiTextProps, 'size'> & {
	    children: string;
	    /** array of unified plugins to parse content into an AST */
	    parsingPluginList?: PluggableList;
	    /** array of unified plugins to convert the AST into a ReactNode */
	    processingPluginList?: PluggableList;
	    /**
	     * Determines the text size. Choose `relative` to control the `font-size` based on the value of a parent container.
	     */
	    textSize?: EuiTextProps['size'];
	};
	export const EuiMarkdownFormat: FunctionComponent<EuiMarkdownFormatProps>;

}
declare module '@elastic/eui/src/components/modal/modal' {
	import React, { FunctionComponent, ReactNode, HTMLAttributes } from 'react';
	export interface EuiModalProps extends HTMLAttributes<HTMLDivElement> {
	    className?: string;
	    /**
	     * ReactNode to render as this component's content
	     */
	    children: ReactNode;
	    onClose: (event?: React.KeyboardEvent<HTMLDivElement> | React.MouseEvent<HTMLButtonElement>) => void;
	    /**
	     * Sets the max-width of the modal.
	     * Set to `true` to use the default (`euiBreakpoints 'm'`),
	     * set to `false` to not restrict the width,
	     * set to a number for a custom width in px,
	     * set to a string for a custom width in custom measurement.
	     */
	    maxWidth?: boolean | number | string;
	    /**
	     * Specifies what element should initially have focus.
	     * Can be a DOM node, or a selector string (which will be passed to document.querySelector() to find the DOM node), or a function that returns a DOM node.
	     */
	    initialFocus?: HTMLElement | (() => HTMLElement) | string;
	}
	export const EuiModal: FunctionComponent<EuiModalProps>;

}
declare module '@elastic/eui/src/components/modal/modal_footer' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiModalFooterProps = FunctionComponent<HTMLAttributes<HTMLDivElement> & CommonProps>;
	export const EuiModalFooter: EuiModalFooterProps;

}
declare module '@elastic/eui/src/components/modal/modal_header' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiModalHeaderProps = FunctionComponent<HTMLAttributes<HTMLDivElement> & CommonProps>;
	export const EuiModalHeader: EuiModalHeaderProps;

}
declare module '@elastic/eui/src/components/modal/modal_header_title' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiModalHeaderTitleProps = FunctionComponent<HTMLAttributes<HTMLDivElement> & CommonProps>;
	export const EuiModalHeaderTitle: EuiModalHeaderTitleProps;

}
declare module '@elastic/eui/src/components/modal/modal_body' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiModalBodyProps = FunctionComponent<HTMLAttributes<HTMLDivElement> & CommonProps>;
	export const EuiModalBody: EuiModalBodyProps;

}
declare module '@elastic/eui/src/components/modal/confirm_modal' {
	import React, { FunctionComponent, ReactNode } from 'react';
	import { EuiModalProps } from '@elastic/eui/src/components/modal/modal';
	import { ButtonColor } from '@elastic/eui/src/components/button';
	export interface EuiConfirmModalProps extends Omit<EuiModalProps, 'children' | 'initialFocus' | 'onClose' | 'title'> {
	    /**
	     * ReactNode to render as this component's content
	     */
	    children?: ReactNode;
	    title?: ReactNode;
	    cancelButtonText?: ReactNode;
	    confirmButtonText?: ReactNode;
	    onCancel: (event?: React.KeyboardEvent<HTMLDivElement> | React.MouseEvent<HTMLButtonElement>) => void;
	    onConfirm?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
	    confirmButtonDisabled?: boolean;
	    className?: string;
	    defaultFocusedButton?: typeof CONFIRM_BUTTON | typeof CANCEL_BUTTON;
	    buttonColor?: ButtonColor;
	    /**
	     * Sets the max-width of the modal.
	     * Set to `true` to use the default (`euiBreakpoints 'm'`),
	     * set to `false` to not restrict the width,
	     * set to a number for a custom width in px,
	     * set to a string for a custom width in custom measurement.
	     */
	    maxWidth?: boolean | number | string;
	    /**
	     * Passes `isLoading` prop to the confirm button
	     */
	    isLoading?: boolean;
	}
	export const CONFIRM_BUTTON = "confirm";
	export const CANCEL_BUTTON = "cancel";
	export const EuiConfirmModal: FunctionComponent<EuiConfirmModalProps>;

}
declare module '@elastic/eui/src/components/modal' {
	export { EuiConfirmModal, EuiConfirmModalProps, CONFIRM_BUTTON as EUI_MODAL_CONFIRM_BUTTON, CANCEL_BUTTON as EUI_MODAL_CANCEL_BUTTON, } from '@elastic/eui/src/components/modal/confirm_modal';
	export { EuiModal, EuiModalProps } from '@elastic/eui/src/components/modal/modal';
	export { EuiModalFooter, EuiModalFooterProps } from '@elastic/eui/src/components/modal/modal_footer';
	export { EuiModalHeader, EuiModalHeaderProps } from '@elastic/eui/src/components/modal/modal_header';
	export { EuiModalBody, EuiModalBodyProps } from '@elastic/eui/src/components/modal/modal_body';
	export { EuiModalHeaderTitle, EuiModalHeaderTitleProps, } from '@elastic/eui/src/components/modal/modal_header_title';

}
declare module '@elastic/eui/src/components/markdown_editor/icons/markdown_logo' {
	import React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	} const MarkdownLogo: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export default MarkdownLogo;

}
declare module '@elastic/eui/src/components/markdown_editor/markdown_editor_footer' {
	import React from 'react';
	import { EuiMarkdownDropHandler, EuiMarkdownEditorUiPlugin, EuiMarkdownParseError } from '@elastic/eui/src/components/markdown_editor/markdown_types';
	interface EuiMarkdownEditorFooterProps {
	    uiPlugins: EuiMarkdownEditorUiPlugin[];
	    isUploadingFiles: boolean;
	    openFiles: () => void;
	    errors: EuiMarkdownParseError[];
	    hasUnacceptedItems: boolean;
	    dropHandlers: EuiMarkdownDropHandler[];
	}
	export const EuiMarkdownEditorFooter: React.ForwardRefExoticComponent<EuiMarkdownEditorFooterProps & React.RefAttributes<HTMLDivElement>>;
	export {};

}
declare module '@elastic/eui/src/components/markdown_editor/markdown_editor_drop_zone' {
	import { FunctionComponent } from 'react';
	import { EuiMarkdownEditorUiPlugin, EuiMarkdownParseError, EuiMarkdownDropHandler, EuiMarkdownStringTagConfig } from '@elastic/eui/src/components/markdown_editor/markdown_types';
	interface EuiMarkdownEditorDropZoneProps {
	    uiPlugins: EuiMarkdownEditorUiPlugin[];
	    errors: EuiMarkdownParseError[];
	    dropHandlers: EuiMarkdownDropHandler[];
	    insertText: (text: string, config: EuiMarkdownStringTagConfig) => void;
	    hasUnacceptedItems: boolean;
	    setHasUnacceptedItems: (hasUnacceptedItems: boolean) => void;
	    setEditorFooterHeight: (height: number) => void;
	    isEditing: boolean;
	}
	export const EuiMarkdownEditorDropZone: FunctionComponent<EuiMarkdownEditorDropZoneProps>;
	export {};

}
declare module '@elastic/eui/src/components/markdown_editor/markdown_editor' {
	import React, { HTMLAttributes } from 'react';
	import { PluggableList } from 'unified';
	import { VFileMessage } from 'vfile-message';
	import { CommonProps, OneOf } from '@elastic/eui/src/components/common';
	import { EuiMarkdownEditorTextAreaProps } from '@elastic/eui/src/components/markdown_editor/markdown_editor_text_area';
	import { EuiMarkdownFormatProps } from '@elastic/eui/src/components/markdown_editor/markdown_format';
	import { MARKDOWN_MODE } from '@elastic/eui/src/components/markdown_editor/markdown_modes';
	import { EuiMarkdownAstNode, EuiMarkdownDropHandler, EuiMarkdownEditorUiPlugin, EuiMarkdownParseError } from '@elastic/eui/src/components/markdown_editor/markdown_types';
	import { ContextShape } from '@elastic/eui/src/components/markdown_editor/markdown_context'; type CommonMarkdownEditorProps = Omit<HTMLAttributes<HTMLDivElement>, 'onChange' | 'placeholder'> & CommonProps & {
	    /** aria-label OR aria-labelledby must be set */
	    'aria-label'?: string;
	    /** aria-label OR aria-labelledby must be set */
	    'aria-labelledby'?: string;
	    /** ID of an element describing the text editor, useful for associating error messages */
	    'aria-describedby'?: string;
	    /** a unique ID to attach to the textarea. If one isn't provided, a random one
	     * will be generated */
	    editorId?: string;
	    /** A markdown content */
	    value: string;
	    /** callback function when markdown content is modified */
	    onChange: (value: string) => void;
	    /**
	     * Sets the `height` in pixels of the editor/preview area or pass `full` to allow
	     * the EuiMarkdownEditor to fill the height of its container.
	     * When in `full` mode the vertical resize is not allowed.
	     */
	    height?: number | 'full';
	    /**
	     * Sets the `max-height` in pixels of the editor/preview area.
	     * It has no effect when the `height` is set to `full`.
	     */
	    maxHeight?: number;
	    /**
	     * Automatically adjusts the preview height to fit all the content and avoid a scrollbar.
	     */
	    autoExpandPreview?: boolean;
	    /** plugins to identify new syntax and parse it into an AST node */
	    parsingPluginList?: PluggableList;
	    /** plugins to process the markdown AST nodes into a React nodes */
	    processingPluginList?: PluggableList;
	    /** defines UI for plugins' buttons in the toolbar as well as any modals or extra UI that provides content to the editor */
	    uiPlugins?: EuiMarkdownEditorUiPlugin[];
	    /** errors to bubble up */
	    errors?: EuiMarkdownParseError[];
	    /** callback triggered when parsing results are available */
	    onParse?: (error: EuiMarkdownParseError | null, data: {
	        messages: VFileMessage[];
	        ast: EuiMarkdownAstNode;
	    }) => void;
	    /** initial display mode for the editor */
	    initialViewMode?: MARKDOWN_MODE;
	    /** array defining any drag&drop handlers */
	    dropHandlers?: EuiMarkdownDropHandler[];
	    /**
	     * Sets the placeholder of the textarea
	     */
	    placeholder?: EuiMarkdownEditorTextAreaProps['placeholder'];
	    /**
	     * Further extend the props applied to EuiMarkdownFormat
	     */
	    markdownFormatProps?: Omit<EuiMarkdownFormatProps, 'parsingPluginList' | 'processingPluginList' | 'children'>;
	};
	export type EuiMarkdownEditorProps = OneOf<CommonMarkdownEditorProps, 'aria-label' | 'aria-labelledby'>;
	interface EuiMarkdownEditorRef {
	    textarea: HTMLTextAreaElement | null;
	    replaceNode: ContextShape['replaceNode'];
	}
	export const EuiMarkdownEditor: React.ForwardRefExoticComponent<(Pick<CommonMarkdownEditorProps, "children" | "slot" | "style" | "title" | "prefix" | "height" | "color" | "className" | "id" | "lang" | "role" | "tabIndex" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "data-test-subj" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "placeholder" | "spellCheck" | "translate" | "radioGroup" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "value" | "maxHeight" | "uiPlugins" | "parsingPluginList" | "processingPluginList" | "errors" | "dropHandlers" | "editorId" | "autoExpandPreview" | "onParse" | "initialViewMode" | "markdownFormatProps"> & Pick<Required<CommonMarkdownEditorProps>, "aria-label"> & {
	    "aria-labelledby"?: undefined;
	} & React.RefAttributes<EuiMarkdownEditorRef>) | (Pick<CommonMarkdownEditorProps, "children" | "slot" | "style" | "title" | "prefix" | "height" | "color" | "className" | "id" | "lang" | "role" | "tabIndex" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "data-test-subj" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "placeholder" | "spellCheck" | "translate" | "radioGroup" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "value" | "maxHeight" | "uiPlugins" | "parsingPluginList" | "processingPluginList" | "errors" | "dropHandlers" | "editorId" | "autoExpandPreview" | "onParse" | "initialViewMode" | "markdownFormatProps"> & Pick<Required<CommonMarkdownEditorProps>, "aria-labelledby"> & {
	    "aria-label"?: undefined;
	} & React.RefAttributes<EuiMarkdownEditorRef>)>;
	export {};

}
declare module '@elastic/eui/src/components/markdown_editor' {
	export { EuiMarkdownEditor, EuiMarkdownEditorProps } from '@elastic/eui/src/components/markdown_editor/markdown_editor';
	export { getDefaultEuiMarkdownParsingPlugins, getDefaultEuiMarkdownProcessingPlugins, getDefaultEuiMarkdownUiPlugins, getDefaultEuiMarkdownPlugins, } from '@elastic/eui/src/components/markdown_editor/plugins/markdown_default_plugins';
	export { EuiMarkdownContext } from '@elastic/eui/src/components/markdown_editor/markdown_context';
	export { EuiMarkdownFormat, EuiMarkdownFormatProps } from '@elastic/eui/src/components/markdown_editor/markdown_format';
	export { EuiMarkdownParseError, EuiMarkdownAstNode, EuiMarkdownAstNodePosition, EuiMarkdownFormatting, EuiMarkdownEditorUiPlugin, RemarkRehypeHandler, RemarkTokenizer, } from '@elastic/eui/src/components/markdown_editor/markdown_types';

}
declare module '@elastic/eui/src/components/notification/notification_event_meta' {
	import { FunctionComponent, ReactNode, ReactElement } from 'react';
	import { IconType } from '@elastic/eui/src/components/icon';
	import { EuiBadgeProps } from '@elastic/eui/src/components/badge';
	import { EuiContextMenuItem, EuiContextMenuItemProps } from '@elastic/eui/src/components/context_menu';
	export type EuiNotificationEventMetaProps = {
	    id: string;
	    /**
	     * Type of event (e.g. "Alert", "Cloud", etc..). Shows inside a badge.
	     */
	    type: string;
	    /**
	     * A unique, human-friendly name for the event to be used in aria attributes (e.g. "alert-critical-01", "cloud-no-severity-12", etc..).
	     */
	    eventName: string;
	    /**
	     * Type of severity (e.g. "Critical", "Warning", etc..). Shows as a text after the `type` following the format "Alert: Critical".
	     */
	    severity?: string;
	    /**
	     * Accepts either our palette colors (primary, success ..etc) or a hex value `#FFFFFF`, `#000`.
	     */
	    badgeColor?: EuiBadgeProps['color'];
	    /**
	     * The icon used to visually represent this data type. Accepts any `EuiIcon IconType`.
	     */
	    iconType?: IconType;
	    /**
	     * Specify an `aria-label` for the icon.
	     * If no `aria-label` is passed we assume the icon is purely decorative.
	     */
	    iconAriaLabel?: string;
	    /**
	     * Indicates when the event was received.
	     */
	    time: ReactNode;
	    /**
	     * Necessary to trigger `onOpenContextMenu` from #EuiNotificationEvent
	     */
	    onOpenContextMenu?: () => Array<ReactElement<EuiContextMenuItemProps, typeof EuiContextMenuItem>>;
	};
	export const EuiNotificationEventMeta: FunctionComponent<EuiNotificationEventMetaProps>;

}
declare module '@elastic/eui/src/components/notification/notification_event_messages' {
	import { FunctionComponent } from 'react';
	export type EuiNotificationEventMessagesProps = {
	    messages: string[];
	    /**
	     * A unique, human-friendly name for the event to be used in aria attributes (e.g. "alert-critical-01", "cloud-no-severity-12", etc..).
	     */
	    eventName: string;
	};
	export const EuiNotificationEventMessages: FunctionComponent<EuiNotificationEventMessagesProps>;

}
declare module '@elastic/eui/src/components/notification/notification_event_read_button' {
	import { FunctionComponent } from 'react';
	import { EuiButtonIconProps } from '@elastic/eui/src/components/button';
	export type EuiNotificationEventReadButtonProps = Omit<EuiButtonIconProps, 'iconType' | 'isDisabled' | 'isSelected' | 'size'> & {
	    id: string;
	    /**
	     * Shows an indicator of the read state of the event
	     */
	    isRead: boolean;
	    /**
	     * Applies an `onClick` handler to the `read` indicator.
	     */
	    onClick: () => void;
	    /**
	     * A unique, human-friendly name for the event to be used in aria attributes (e.g. "alert-critical-01", "cloud-no-severity-12", etc..).
	     */
	    eventName: string;
	};
	export const EuiNotificationEventReadButton: FunctionComponent<EuiNotificationEventReadButtonProps>;

}
declare module '@elastic/eui/src/components/notification/notification_event_read_icon' {
	import { FunctionComponent } from 'react';
	import { EuiIconProps } from '@elastic/eui/src/components/icon';
	export type EuiNotificationEventReadIconProps = Omit<EuiIconProps, 'type' | 'color' | 'size'> & {
	    id: string;
	    /**
	     * Shows an indicator of the read state of the event
	     */
	    isRead: boolean;
	    /**
	     * A unique, human-friendly name for the event to be used in aria attributes (e.g. "alert-critical-01", "cloud-no-severity-12", etc..).
	     */
	    eventName: string;
	};
	export const EuiNotificationEventReadIcon: FunctionComponent<EuiNotificationEventReadIconProps>;

}
declare module '@elastic/eui/src/components/notification/notification_event' {
	import { FunctionComponent, ReactElement } from 'react';
	import { EuiNotificationEventMetaProps } from '@elastic/eui/src/components/notification/notification_event_meta';
	import { EuiNotificationEventMessagesProps } from '@elastic/eui/src/components/notification/notification_event_messages';
	import { EuiNotificationEventReadButtonProps } from '@elastic/eui/src/components/notification/notification_event_read_button';
	import { EuiButtonEmptyProps } from '@elastic/eui/src/components/button';
	import { EuiContextMenuItem, EuiContextMenuItemProps } from '@elastic/eui/src/components/context_menu';
	export type EuiNotificationHeadingLevel = 'h2' | 'h3' | 'h4' | 'h5' | 'h6';
	export type EuiNotificationEventProps = Omit<EuiNotificationEventMetaProps, 'onOpenContextMenu' | 'onRead' | 'eventName' | 'id'> & Omit<EuiNotificationEventReadButtonProps, 'onClick' | 'color' | 'eventName' | 'isRead' | 'id'> & {
	    /**
	     * A unique identifier
	     */
	    id: string;
	    /**
	     * The title of the event.
	     */
	    title: string;
	    /**
	     * The heading level of the title.
	     */
	    headingLevel?: EuiNotificationHeadingLevel;
	    /**
	     * Returns the `id` and applies an `onClick` handler to the title.
	     */
	    onClickTitle?: (id: string) => void;
	    /**
	     * The label of the primary action
	     */
	    primaryAction?: string;
	    /**
	     * Apply more props to the `primaryAction` button. See #EuiPrimaryActionProps.
	     */
	    primaryActionProps?: EuiButtonEmptyProps;
	    /**
	     * Returns the `id` and applies an `onClick` handler to the `primaryAction`.
	     */
	    onClickPrimaryAction?: (id: string) => void;
	    /**
	     * Notification messages as an array of strings. More than one message wraps in an accordion.
	     */
	    messages: EuiNotificationEventMessagesProps['messages'];
	    /**
	     * Shows an indicator of the read state of the event. Leave as `undefined` to hide the indicator.
	     */
	    isRead?: boolean | undefined;
	    /**
	     * Returns the `id` and `isRead` state. Applies an `onClick` handler to the `read` indicator.
	     */
	    onRead?: (id: string, isRead: boolean) => void;
	    /**
	     * Provided the `id` of the event must return an array of #EuiContextMenuItem elements.
	     */
	    onOpenContextMenu?: (id: string) => Array<ReactElement<EuiContextMenuItemProps, typeof EuiContextMenuItem>>;
	};
	export const EuiNotificationEvent: FunctionComponent<EuiNotificationEventProps>;

}
declare module '@elastic/eui/src/components/notification' {
	export { EuiNotificationEvent } from '@elastic/eui/src/components/notification/notification_event';

}
declare module '@elastic/eui/src/components/page/_restrict_width' {
	/**
	 * The `restrictedWidth` property is the same for all EuiPage components.
	 * This is file contains the type specific to that prop and a helper
	 * function for creating the corresponding classNames and style tags
	 * based on the consumer's configuration
	 *
	 * @param {restrictWidth} boolean | number | string The prop value
	 * @param {style} CSSProperties An object of style attributes if provided
	 * @returns {{widthClassName: string, newStyle: CSSProperties}} Returns an object with keys for the class name to append to the component's class and the updated style props
	 */
	import { CSSProperties } from 'react';
	export type _EuiPageRestrictWidth = {
	    /**
	     * Sets the max-width of the page,
	     * set to `true` to use the default size of `1000px (1200 for Amsterdam)`,
	     * set to `false` to not restrict the width,
	     * set to a number for a custom width in px,
	     * set to a string for a custom width in custom measurement.
	     */
	    restrictWidth?: boolean | number | string;
	};
	export function setPropsForRestrictedPageWidth(restrictWidth: _EuiPageRestrictWidth['restrictWidth'], style?: CSSProperties): {
	    widthClassName?: string;
	    newStyle?: CSSProperties;
	};

}
declare module '@elastic/eui/src/components/page/page' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { _EuiPageRestrictWidth } from '@elastic/eui/src/components/page/_restrict_width';
	export const SIZES: ("s" | "m" | "l" | "none")[];
	export const DIRECTIONS: ("column" | "row")[];
	export interface EuiPageProps extends CommonProps, HTMLAttributes<HTMLDivElement>, _EuiPageRestrictWidth {
	    /**
	     * Adjust the padding.
	     * When using this setting it's best to be consistent throughout all similar usages
	     */
	    paddingSize?: typeof SIZES[number];
	    /**
	     * Adds `flex-grow: 1` to the whole page for stretching to fit vertically.
	     * Must be wrapped inside a flexbox, preferrably with `min-height: 100vh`
	     */
	    grow?: boolean;
	    /**
	     * Changes the `flex-direction` property.
	     * Flip to `column` when not including a sidebar.
	     */
	    direction?: 'row' | 'column';
	}
	export const EuiPage: FunctionComponent<EuiPageProps>;

}
declare module '@elastic/eui/src/components/page/page_body/page_body' {
	import React, { PropsWithChildren, ComponentType, ComponentProps } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { _EuiPageRestrictWidth } from '@elastic/eui/src/components/page/_restrict_width';
	import { EuiPanelProps } from '@elastic/eui/src/components/panel';
	export const PADDING_SIZES: ("s" | "m" | "l" | "none")[]; type ComponentTypes = keyof JSX.IntrinsicElements | ComponentType<any>;
	export type EuiPageBodyProps<T extends ComponentTypes = 'main'> = CommonProps & ComponentProps<T> & _EuiPageRestrictWidth & {
	    /**
	     * Sets the HTML element for `EuiPageBody`.
	     */
	    component?: T;
	    /**
	     * Uses an EuiPanel as the main component instead of a plain div
	     */
	    panelled?: boolean;
	    /**
	     * Extends any extra EuiPanel props if `panelled=true`
	     */
	    panelProps?: Omit<EuiPanelProps, 'paddingSize'>;
	    /**
	     * Adjusts the padding
	     */
	    paddingSize?: typeof PADDING_SIZES[number];
	};
	export const EuiPageBody: <T extends React.ElementType<any>>({ children, restrictWidth, style, className, component: Component, panelled, panelProps, paddingSize, borderRadius, ...rest }: React.PropsWithChildren<EuiPageBodyProps<T>>) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/page/page_body' {
	export { EuiPageBody, EuiPageBodyProps } from '@elastic/eui/src/components/page/page_body/page_body';

}
declare module '@elastic/eui/src/components/page/page_content/page_content' {
	import { FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { _EuiPanelProps, _EuiPanelDivlike } from '@elastic/eui/src/components/panel/panel';
	import { HTMLAttributes } from 'enzyme';
	export type EuiPageContentVerticalPositions = 'center';
	export type EuiPageContentHorizontalPositions = 'center';
	export type EuiPageContentProps = CommonProps & _EuiPanelProps & Omit<_EuiPanelDivlike, 'onClick' | 'role'> & {
	    verticalPosition?: EuiPageContentVerticalPositions;
	    horizontalPosition?: EuiPageContentHorizontalPositions;
	    /**
	     * There should only be one EuiPageContent per page and should contain the main contents.
	     * If this is untrue, set role = `null`, or change it to match your needed aria role
	     */
	    role?: HTMLAttributes['role'] | null;
	};
	export const EuiPageContent: FunctionComponent<EuiPageContentProps>;

}
declare module '@elastic/eui/src/components/page/page_content/page_content_body' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { _EuiPageRestrictWidth } from '@elastic/eui/src/components/page/_restrict_width';
	export const PADDING_SIZES: ("s" | "m" | "l" | "none")[];
	export interface EuiPageContentBodyProps extends CommonProps, HTMLAttributes<HTMLDivElement>, _EuiPageRestrictWidth {
	    /**
	     * Adjust the padding.
	     * When using this setting it's best to be consistent throughout all similar usages
	     */
	    paddingSize?: typeof PADDING_SIZES[number];
	}
	export const EuiPageContentBody: FunctionComponent<EuiPageContentBodyProps>;

}
declare module '@elastic/eui/src/components/page/page_content/page_content_header' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export interface EuiPageContentHeaderProps extends CommonProps, HTMLAttributes<HTMLDivElement> {
	    /**
	     * Set to false if you don't want the children to stack
	     * at small screen sizes.
	     */
	    responsive?: boolean;
	}
	export const EuiPageContentHeader: FunctionComponent<EuiPageContentHeaderProps>;

}
declare module '@elastic/eui/src/components/page/page_content/page_content_header_section' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export interface EuiPageContentHeaderSectionProps extends CommonProps, HTMLAttributes<HTMLDivElement> {
	}
	export const EuiPageContentHeaderSection: FunctionComponent<EuiPageContentHeaderSectionProps>;

}
declare module '@elastic/eui/src/components/page/page_content' {
	export { EuiPageContent, EuiPageContentProps } from '@elastic/eui/src/components/page/page_content/page_content';
	export { EuiPageContentBody, EuiPageContentBodyProps, } from '@elastic/eui/src/components/page/page_content/page_content_body';
	export { EuiPageContentHeader, EuiPageContentHeaderProps, } from '@elastic/eui/src/components/page/page_content/page_content_header';
	export { EuiPageContentHeaderSection, EuiPageContentHeaderSectionProps, } from '@elastic/eui/src/components/page/page_content/page_content_header_section';

}
declare module '@elastic/eui/src/components/page/page_header/page_header_content' {
	import { FunctionComponent, ReactNode, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiIconProps, IconType } from '@elastic/eui/src/components/icon';
	import { EuiTabsProps } from '@elastic/eui/src/components/tabs';
	import { Props as EuiTabProps } from '@elastic/eui/src/components/tabs/tab';
	import { EuiFlexGroupProps } from '@elastic/eui/src/components/flex';
	import { EuiTitleProps } from '@elastic/eui/src/components/title';
	export const ALIGN_ITEMS: readonly ["top", "bottom", "center", "stretch"]; type Tab = EuiTabProps & {
	    /**
	     * Visible text of the tab
	     */
	    label: ReactNode;
	};
	export type EuiPageHeaderContentTitle = {
	    /**
	     * Wrapped in an `H1` so choose appropriately.
	     * A simple string is best
	     */
	    pageTitle?: ReactNode;
	    /**
	     * Additional props to pass to the EuiTitle
	     */
	    pageTitleProps?: Omit<EuiTitleProps, 'children' | 'size'>;
	    /**
	     * Optional icon to place to the left of the title
	     */
	    iconType?: IconType;
	    /**
	     * Additional EuiIcon props to apply to the optional icon
	     */
	    iconProps?: Partial<Omit<EuiIconProps, 'type'>>;
	};
	export type EuiPageHeaderContentTabs = {
	    /**
	     * In-app navigation presented as large borderless tabs.
	     * Accepts an array of `EuiTab` objects;
	     */
	    tabs?: Tab[];
	    /**
	     * Any extras to apply to the outer tabs container.
	     * Extends `EuiTabs`
	     */
	    tabsProps?: Omit<EuiTabsProps, 'size' | 'expand' | 'display'>;
	}; type EuiPageHeaderContentLeft = EuiPageHeaderContentTitle & EuiPageHeaderContentTabs & {
	    /**
	     * Position is dependent on existing with a `pageTitle` or `tabs`
	     * Automatically get wrapped in a single paragraph tag inside an EuiText block
	     */
	    description?: string | ReactNode;
	};
	export type EuiPageHeaderContentProps = CommonProps & HTMLAttributes<HTMLDivElement> & EuiPageHeaderContentLeft & {
	    /**
	     * Set to false if you don't want the children to stack at small screen sizes.
	     * Set to `reverse` to display the right side content first for the sake of hierarchy (like global time)
	     */
	    responsive?: boolean | 'reverse';
	    /**
	     * Vertical alignment of the left and right side content;
	     * Default is `middle` for custom content, but `top` for when `pageTitle` or `tabs` are included
	     */
	    alignItems?: typeof ALIGN_ITEMS[number];
	    /**
	     * Pass custom an array of content to this side usually up to 3 buttons.
	     * The first button should be primary, usually with `fill` and will be visually displayed as the last item,
	     * but first in the tab order
	     */
	    rightSideItems?: ReactNode[];
	    /**
	     * Additional EuiFlexGroup props to pass to the container of the `rightSideItems`
	     */
	    rightSideGroupProps?: Partial<EuiFlexGroupProps>;
	    /**
	     * Custom children will be rendered before the `tabs` unless no `pageTitle` is present, then it will be the last item
	     */
	    children?: ReactNode;
	};
	export const EuiPageHeaderContent: FunctionComponent<EuiPageHeaderContentProps>;
	export {};

}
declare module '@elastic/eui/src/components/page/page_header/page_header' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiPageHeaderContentProps } from '@elastic/eui/src/components/page/page_header/page_header_content';
	import { _EuiPageRestrictWidth } from '@elastic/eui/src/components/page/_restrict_width';
	export const PADDING_SIZES: ("s" | "m" | "l" | "none")[];
	export type EuiPageHeaderProps = CommonProps & HTMLAttributes<HTMLElement> & EuiPageHeaderContentProps & _EuiPageRestrictWidth & {
	    /**
	     * Adjust the padding.
	     * When using this setting it's best to be consistent throughout all similar usages
	     */
	    paddingSize?: typeof PADDING_SIZES[number];
	    /**
	     * Adds a bottom border to separate it from the content after
	     */
	    bottomBorder?: boolean;
	};
	export const EuiPageHeader: FunctionComponent<EuiPageHeaderProps>;

}
declare module '@elastic/eui/src/components/page/page_header/page_header_section' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export interface EuiPageHeaderSectionProps extends CommonProps, HTMLAttributes<HTMLDivElement> {
	}
	export const EuiPageHeaderSection: FunctionComponent<EuiPageHeaderSectionProps>;

}
declare module '@elastic/eui/src/components/page/page_header' {
	export { EuiPageHeader, EuiPageHeaderProps } from '@elastic/eui/src/components/page/page_header/page_header';
	export { EuiPageHeaderContent, EuiPageHeaderContentProps, } from '@elastic/eui/src/components/page/page_header/page_header_content';
	export { EuiPageHeaderSection, EuiPageHeaderSectionProps, } from '@elastic/eui/src/components/page/page_header/page_header_section';

}
declare module '@elastic/eui/src/components/page/page_side_bar/page_side_bar' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export const PADDING_SIZES: ("s" | "m" | "l" | "none")[];
	export interface EuiPageSideBarProps extends CommonProps, HTMLAttributes<HTMLDivElement> {
	    /**
	     * Adds `position: sticky` and affords for any fixed position headers
	     */
	    sticky?: boolean;
	    /**
	     * Adds padding around the children
	     */
	    paddingSize?: typeof PADDING_SIZES[number];
	}
	export const EuiPageSideBar: FunctionComponent<EuiPageSideBarProps>;

}
declare module '@elastic/eui/src/components/page/page_side_bar' {
	export { EuiPageSideBar, EuiPageSideBarProps } from '@elastic/eui/src/components/page/page_side_bar/page_side_bar';

}
declare module '@elastic/eui/src/components/page/page_template' {
	import { CSSProperties, FunctionComponent, ReactNode } from 'react';
	import { EuiPageProps, SIZES } from '@elastic/eui/src/components/page/page';
	import { EuiPageSideBarProps } from '@elastic/eui/src/components/page/page_side_bar';
	import { EuiPageBodyProps } from '@elastic/eui/src/components/page/page_body';
	import { EuiPageHeaderProps } from '@elastic/eui/src/components/page/page_header';
	import { EuiPageContentProps, EuiPageContentBodyProps } from '@elastic/eui/src/components/page/page_content';
	import { EuiBottomBarProps } from '@elastic/eui/src/components/bottom_bar';
	export const TEMPLATES: readonly ["default", "centeredBody", "centeredContent", "empty"];
	export type EuiPageTemplateProps = Omit<EuiPageProps, 'paddingSize'> & {
	    /**
	     * Choose between 3 types of templates.
	     * `default`: Typical layout with nothing centered
	     * `centeredBody`: The panelled content is centered
	     * `centeredContent`: The content inside the panel is centered
	     * `empty`: Removes the panneling of the page content
	     */
	    template?: typeof TEMPLATES[number];
	    /**
	     * Padding size will not get applied to the over-arching #EuiPage,
	     * but will propogate through all the components to keep them in sync
	     */
	    paddingSize?: typeof SIZES[number];
	    /**
	     * Optionally include #EuiPageSideBar content.
	     * The inclusion of this will affect the whole layout
	     */
	    pageSideBar?: ReactNode;
	    /**
	     * Gets passed along to the #EuiPageSideBar component
	     */
	    pageSideBarProps?: EuiPageSideBarProps;
	    /**
	     * Optionally include an #EuiPageHeader by passing an object of its props
	     */
	    pageHeader?: EuiPageHeaderProps;
	    /**
	     * Gets passed along to the #EuiPageBody component
	     */
	    pageBodyProps?: EuiPageBodyProps;
	    /**
	     * Gets passed along to the #EuiPageContent component
	     */
	    pageContentProps?: EuiPageContentProps;
	    /**
	     * Gets passed along to the #EuiPageContentBody component
	     */
	    pageContentBodyProps?: EuiPageContentBodyProps;
	    /**
	     * Adds contents inside of an EuiBottomBar.
	     * Only works when `template = 'default'`
	     */
	    bottomBar?: EuiBottomBarProps['children'];
	    /**
	     * Gets passed along to the #EuiBottomBar component if `bottomBar` has contents
	     */
	    bottomBarProps?: EuiBottomBarProps;
	    /**
	     * Stretches or restricts the height to 100% of the parent;
	     * `true`: scrolls the EuiPageContentBody;
	     * `noscroll`: removes all scroll ability;
	     * Only works when `template = 'default | empty'` and breakpoint is `m` and above
	     */
	    fullHeight?: boolean | 'noscroll';
	    /**
	     * Minimum height in which to enforce scrolling
	     */
	    minHeight?: CSSProperties['minHeight'];
	};
	export const EuiPageTemplate: FunctionComponent<EuiPageTemplateProps>;

}
declare module '@elastic/eui/src/components/page' {
	export { EuiPage, EuiPageProps } from '@elastic/eui/src/components/page/page';
	export { EuiPageBody, EuiPageBodyProps } from '@elastic/eui/src/components/page/page_body';
	export { EuiPageContent, EuiPageContentProps, EuiPageContentBody, EuiPageContentBodyProps, EuiPageContentHeader, EuiPageContentHeaderProps, EuiPageContentHeaderSection, EuiPageContentHeaderSectionProps, } from '@elastic/eui/src/components/page/page_content';
	export { EuiPageHeader, EuiPageHeaderContent, EuiPageHeaderContentProps, EuiPageHeaderProps, EuiPageHeaderSection, EuiPageHeaderSectionProps, } from '@elastic/eui/src/components/page/page_header';
	export { EuiPageSideBar, EuiPageSideBarProps } from '@elastic/eui/src/components/page/page_side_bar';
	export { EuiPageTemplate, EuiPageTemplateProps } from '@elastic/eui/src/components/page/page_template';

}
declare module '@elastic/eui/src/global_styling/mixins/_shadow' {
	/**
	 * NOTE: These were quick conversions of their Sass counterparts.
	 *       They have yet to be used/tested.
	 */
	export const useSlightShadow: ({ color, opacity, }?: {
	    color?: string | undefined;
	    opacity?: number | undefined;
	}) => string;
	export const useBottomShadowSmall: ({ color, opacity, }?: {
	    color?: string | undefined;
	    opacity?: number | undefined;
	}) => string;
	export const useBottomShadowMedium: ({ color, opacity, }?: {
	    color?: string | undefined;
	    opacity?: number | undefined;
	}) => string;
	export const useBottomShadowFlat: ({ color, opacity, }?: {
	    color?: string | undefined;
	    opacity?: number | undefined;
	}) => string;
	export const useBottomShadow: ({ color: _color, opacity, adjustBorders, }?: {
	    color?: string | undefined;
	    opacity?: number | undefined;
	    adjustBorders?: boolean | undefined;
	}) => string;
	export const useBottomShadowLarge: ({ color: _color, opacity, adjustBorders, reverse, }?: {
	    color?: string | undefined;
	    opacity?: number | undefined;
	    adjustBorders?: boolean | undefined;
	    reverse?: boolean | undefined;
	}) => string;
	export const useSlightShadowHover: ({ color, opacity: _opacity, }?: {
	    color?: string | undefined;
	    opacity?: number | undefined;
	}) => string;
	export const useSlightShadowActive: ({ color, opacity: _opacity, }?: {
	    color?: string | undefined;
	    opacity?: number | undefined;
	}) => string;
	export const useOverflowShadow: ({ direction: _direction, side: _side, }?: {
	    direction?: 'y' | 'x';
	    side?: 'both' | 'start' | 'end';
	}) => string;

}
declare module '@elastic/eui/src/global_styling/mixins/_helpers' {
	import { CSSProperties } from 'react';
	/**
	 * Set scroll bar appearance on Chrome (and firefox).
	 * All parameters are optional and default to specific global settings.
	 */
	export const useScrollBar: ({ thumbColor: _thumbColor, trackColor, width, size: _size, corner: _corner, }?: {
	    thumbColor?: CSSProperties['backgroundColor'];
	    trackColor?: CSSProperties['backgroundColor'];
	    /**
	     * Defaults to `thin`. Use `auto` only for large page scrollbars
	     */
	    width?: CSSProperties['scrollbarWidth'];
	    /**
	     * Overall width (height for horizontal scrollbars)
	     */
	    size?: CSSProperties['width'];
	    /**
	     * Corner sizes are usually determined by `width` and
	     * are used as an inset border and therefore a smaller corner size means a larger thumb
	     */
	    corner?: CSSProperties['borderWidth'];
	}) => string;
	/**
	 * NOTE: The ones below this comment were quick conversions of their Sass counterparts.
	 *       They have yet to be used/tested.
	 */
	export const useInnerBorder: ({ type, borderRadius, alpha, }: {
	    type?: "dark" | "light" | undefined;
	    borderRadius?: number | undefined;
	    alpha?: number | undefined;
	}) => string;
	/**
	 * 1. Focus rings shouldn't be visible on scrollable regions, but a11y requires them to be focusable.
	 *    Browser's supporting `:focus-visible` will still show outline on keyboard focus only.
	 *    Others like Safari, won't show anything at all.
	 */
	export const useYScroll: () => string;
	export const useXScroll: () => string;
	export const useYScrollWithShadows: () => string;
	export const useXScrollWithShadows: () => string;
	export const useScreenReaderOnly: () => string;
	export const useCanAnimate: (content: string) => string;

}
declare module '@elastic/eui/src/global_styling/reset/reset' {
	export const resetStyles = "\n/* // Adapted from Eric Meyer's reset (http://meyerweb.com/eric/tools/css/reset/, v2.0 | 20110126). */\n\n\n*, *:before, *:after {\n  box-sizing: border-box;\n}\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: none;\n  vertical-align: baseline;\n}\n\nh1, h2, h3, h4, h5, h6, p {\n  font-family: inherit;\n  font-weight: inherit;\n  font-size: inherit;\n}\n\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section {\n  display: block;\n}\n\na[href],\nbutton,\n[role='button'] {\n  cursor: pointer;\n}\n\nbutton {\n  background: none;\n  border: none;\n  padding: 0;\n  margin: 0;\n  color: inherit;\n  border-radius: 0;\n  font-size: inherit;\n}\n\ninput {\n  margin: 0;\n  padding: 0;\n}\n\ninput:disabled {\n  opacity: 1; /* required on iOS */\n}\n\nol,\nul {\n  list-style: none;\n}\n\nblockquote,\nq {\n  quotes: none;\n}\n\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n  content: '';\n}\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\nhr {\n  margin: 0;\n}\n\nfieldset {\n  min-inline-size: auto;\n}\n\n/* Chrome has an issue around RTL languages in SVGs when letter-spacing is negative\n * https://bugs.chromium.org/p/chromium/issues/detail?id=966480\n */\nsvg text {\n  letter-spacing: normal !important;\n}";

}
declare module '@elastic/eui/src/themes/legacy/theme' {
	import { EuiThemeShape } from '@elastic/eui/src/services/theme/types';
	export const LEGACY_NAME_KEY = "EUI_THEME_LEGACY";
	export const euiThemeLegacy: EuiThemeShape;
	export const EuiThemeLegacy: {
	    model: EuiThemeShape;
	    root: EuiThemeShape;
	    key: string;
	};

}
declare module '@elastic/eui/src/themes/themes' {
	import { EuiThemeSystem } from '@elastic/eui/src/services';
	export interface EUI_THEME {
	    text: string;
	    value: string;
	    provider?: EuiThemeSystem;
	}
	export const EUI_THEMES: EUI_THEME[];
	export const isLegacyTheme: (name: string) => boolean;
	export const isDefaultTheme: (name: string) => boolean;

}
declare module '@elastic/eui/src/themes' {
	export { EUI_THEMES, EUI_THEME, isLegacyTheme, isDefaultTheme } from '@elastic/eui/src/themes/themes';
	export { AMSTERDAM_NAME_KEY, EuiThemeAmsterdam } from '@elastic/eui/src/themes/amsterdam/theme';
	export { LEGACY_NAME_KEY, EuiThemeLegacy } from '@elastic/eui/src/themes/legacy/theme';

}
declare module '@elastic/eui/src/global_styling/reset/global_styles' {
	
	export interface EuiGlobalStylesProps {
	}
	export const EuiGlobalStyles: ({}: EuiGlobalStylesProps) => JSX.Element | null;

}
declare module '@elastic/eui/src/global_styling' {
	export * from '@elastic/eui/src/global_styling/reset/global_styles';

}
declare module '@elastic/eui/src/components/provider/provider' {
	import React, { PropsWithChildren } from 'react';
	import { EmotionCache } from '@emotion/react';
	import { EuiGlobalStylesProps } from '@elastic/eui/src/global_styling';
	import { EuiThemeProviderProps, EuiThemeSystem } from '@elastic/eui/src/services';
	export interface EuiProviderProps<T> extends Omit<EuiThemeProviderProps<T>, 'children' | 'theme'>, EuiGlobalStylesProps {
	    /**
	     * Provide a specific EuiTheme; Defaults to EuiThemeAmsterdam;
	     * Pass `null` to remove all theming including global reset
	     */
	    theme?: EuiThemeSystem | null;
	    /**
	     * Provide global styles via `@emotion/react` `Global` for your custom theme.
	     * Pass `false` to remove the default EUI global styles.
	     */
	    globalStyles?: false | ((params: any) => JSX.Element | null);
	    /**
	     * Provide a cache configuration from `@emotion/cache`
	     */
	    cache?: EmotionCache;
	}
	export const EuiProvider: <T extends {} = {}>({ cache, theme, globalStyles: GlobalStyles, colorMode, modify, children, }: React.PropsWithChildren<EuiProviderProps<T>>) => JSX.Element;

}
declare module '@elastic/eui/src/components/provider' {
	export { EuiProvider, EuiProviderProps } from '@elastic/eui/src/components/provider/provider';

}
declare module '@elastic/eui/src/components/tree_view/tree_view' {
	import React, { Component, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export interface Node {
	    /** An array of EuiTreeViewNodes to render as children
	     */
	    children?: Node[];
	    /** The readable label for the item
	     */
	    label: React.ReactNode;
	    /** A unique ID
	     */
	    id: string;
	    /** An icon to use on the left of the label
	     */
	    icon?: React.ReactElement;
	    /** Display a different icon when the item is expanded.
	    For instance, an open folder or a down arrow
	    */
	    iconWhenExpanded?: React.ReactElement;
	    /** Use an empty icon to keep items without an icon
	    lined up with their siblings
	    */
	    useEmptyIcon?: boolean;
	    /** Whether or not the item is expanded.
	     */
	    isExpanded?: boolean;
	    /** Optional class to throw on the node
	     */
	    className?: string;
	    /** Function to call when the item is clicked.
	     The open state of the item will always be toggled.
	     */
	    callback?(): string;
	}
	export type EuiTreeViewDisplayOptions = 'default' | 'compressed';
	interface EuiTreeViewState {
	    openItems: string[];
	    activeItem: string;
	    treeID: string;
	    expandChildNodes: boolean;
	}
	export type CommonTreeProps = CommonProps & HTMLAttributes<HTMLUListElement> & {
	    /**
	     * Never accepts children directly, only through the `items` prop
	     */
	    children?: never;
	    /** An array of EuiTreeViewNodes
	     */
	    items: Node[];
	    /** Optionally use a variation with smaller text and icon sizes
	     */
	    display?: EuiTreeViewDisplayOptions;
	    /** Set all items to open on initial load
	     */
	    expandByDefault?: boolean;
	    /** Display expansion arrows next to all items
	     * that contain children
	     */
	    showExpansionArrows?: boolean;
	};
	export type EuiTreeViewProps = Omit<CommonTreeProps, 'aria-label' | 'aria-labelledby'> & ({
	    'aria-label': string;
	} | {
	    'aria-labelledby': string;
	});
	export class EuiTreeView extends Component<EuiTreeViewProps, EuiTreeViewState> {
	    treeIdGenerator: (idSuffix?: string) => string;
	    static contextType: React.Context<string>;
	    isNested: boolean;
	    state: EuiTreeViewState;
	    componentDidUpdate(prevProps: EuiTreeViewProps): void;
	    buttonRef: Array<HTMLButtonElement | undefined>;
	    setButtonRef: (ref: HTMLButtonElement | HTMLAnchorElement | null, index: number) => void;
	    handleNodeClick: (node: Node, ignoreCallback?: boolean) => void;
	    isNodeOpen: (node: Node) => boolean;
	    onKeyDown: (event: React.KeyboardEvent, node: Node) => void;
	    onChildrenKeydown: (event: React.KeyboardEvent, index: number) => void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/tree_view' {
	export { EuiTreeView, EuiTreeViewProps } from '@elastic/eui/src/components/tree_view/tree_view';

}
declare module '@elastic/eui/src/components/search_bar/search_box' {
	import { Component } from 'react';
	import { EuiFieldSearchProps } from '@elastic/eui/src/components/form';
	export interface SchemaType {
	    strict?: boolean;
	    fields?: any;
	    flags?: string[];
	}
	export interface EuiSearchBoxProps extends EuiFieldSearchProps {
	    query: string;
	    onSearch: (queryText: string) => void;
	} type DefaultProps = Pick<EuiSearchBoxProps, 'placeholder' | 'incremental'>;
	export class EuiSearchBox extends Component<EuiSearchBoxProps> {
	    static defaultProps: DefaultProps;
	    private inputElement;
	    componentDidUpdate(oldProps: EuiSearchBoxProps): void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/search_bar/query/date_format' {
	import { Moment, MomentInput } from 'moment';
	export interface EuiMoment extends Moment {
	    __eui_granularity?: GranularityType;
	    __eui_format?: string;
	}
	export interface GranularityType {
	    es: 'd' | 'w' | 'M' | 'y';
	    js: 'day' | 'week' | 'month' | 'year';
	    isSame: (d1: Moment, d2: Moment) => boolean;
	    start: (date: Moment) => Moment;
	    startOfNext: (date: Moment) => Moment;
	    iso8601: (date: Moment) => string;
	}
	interface GranularitiesType {
	    DAY: GranularityType;
	    WEEK: GranularityType;
	    MONTH: GranularityType;
	    YEAR: GranularityType;
	}
	export const Granularity: GranularitiesType;
	export const printIso8601: (value: MomentInput) => string;
	export const dateGranularity: (parsedDate: EuiMoment) => GranularityType;
	export const dateFormat: Readonly<{
	    parse(value: string): EuiMoment;
	    print(date: EuiMoment | MomentInput, defaultGranularity?: undefined): string;
	}>;
	export {};

}
declare module '@elastic/eui/src/components/search_bar/query/date_value' {
	
	import { GranularityType } from '@elastic/eui/src/components/search_bar/query/date_format';
	import moment, { MomentInput } from 'moment';
	export const DATE_TYPE = "date";
	export interface DateValue {
	    type: 'date';
	    raw: MomentInput;
	    granularity: GranularityType | undefined;
	    text: string;
	    resolve: () => moment.Moment;
	}
	export const dateValuesEqual: (v1: DateValue, v2: DateValue) => boolean;
	export const isDateValue: (value: any) => value is DateValue;
	export const dateValue: (raw: MomentInput, granularity?: GranularityType, dateFormat?: any) => DateValue | undefined;
	export const dateValueParser: (format?: Readonly<{
	    parse(value: string): import ("@elastic/eui/src/components/search_bar/query/date_format").EuiMoment;
	    print(date: string | number | Date | moment.Moment | import("react").ReactText[] | moment.MomentInputObject | import ("@elastic/eui/src/components/search_bar/query/date_format").EuiMoment | null | undefined, defaultGranularity?: undefined): string;
	}>) => (text: string) => DateValue | undefined;

}
declare module '@elastic/eui/src/components/search_bar/query/ast' {
	import { DateValue } from '@elastic/eui/src/components/search_bar/query/date_value';
	export type MatchType = 'must' | 'must_not';
	export type Value = string | number | boolean | DateValue;
	export interface IsClause {
	    type: 'is';
	    match?: MatchType;
	    flag: string;
	}
	export interface FieldClause {
	    type: 'field';
	    match?: MatchType;
	    operator: OperatorType;
	    field: string;
	    value: Value | Value[];
	}
	export interface TermClause {
	    type: 'term';
	    match?: MatchType;
	    value: Value;
	}
	export interface GroupClause {
	    type: 'group';
	    match: MatchType;
	    value: Clause[];
	}
	export type Clause = IsClause | FieldClause | TermClause | GroupClause;
	export const Match: Readonly<{
	    MUST: "must";
	    MUST_NOT: "must_not";
	    isMust(match: MatchType | undefined): boolean;
	    isMustClause(clause: Clause): boolean;
	}>;
	export type OperatorType = 'eq' | 'exact' | 'gt' | 'gte' | 'lt' | 'lte';
	export const Operator: Readonly<{
	    EQ: "eq";
	    EXACT: "exact";
	    GT: "gt";
	    GTE: "gte";
	    LT: "lt";
	    LTE: "lte";
	    isEQ(match: OperatorType | undefined): boolean;
	    isEQClause(clause: Clause): boolean;
	    isEXACT(match: OperatorType | undefined): boolean;
	    isEXACTClause(clause: Clause): boolean;
	    isRange(match: OperatorType | undefined): boolean;
	    isRangeClause(clause: Clause): boolean;
	    isGT(match: OperatorType | undefined): boolean;
	    isGTClause(clause: Clause): boolean;
	    isGTE(match: OperatorType | undefined): boolean;
	    isGTEClause(clause: Clause): boolean;
	    isLT(match: OperatorType | undefined): boolean;
	    isLTClause(clause: Clause): boolean;
	    isLTE(match: OperatorType | undefined): boolean;
	    isLTEClause(clause: Clause): boolean;
	}>;
	/**
	 * The AST structure is an array of clauses. There are 3 types of clauses that are supported:
	 *
	 * :term:
	 * Holds a VALUE and an OCCUR. The OCCUR indicates whether the value must match or must not match. Default
	 * clauses are not associated with any specific field - when executing the search, one can specify what are
	 * the default fields that the default clauses will be matched against.
	 *
	 * :field:
	 * Like the `term` clause, holds a VALUE and an MATCH, but this clause also specifies the field that the
	 * value will be matched against.
	 *
	 * :is:
	 * Holds a FLAG and indicates whether this flag must be applied or must not be applied. Typically this clause
	 * matches against boolean values of a record (e.g. "is:online", "is:internal", "is:on", etc..)
	 *
	 * This AST is immutable - every "mutating" operation returns a newly mutated AST.
	 */
	export class _AST {
	    private readonly _clauses;
	    private readonly _indexedClauses;
	    static create(clauses: Clause[]): _AST;
	    constructor(clauses?: Clause[]);
	    get clauses(): Clause[];
	    getTermClauses(): TermClause[];
	    getTermClause(value: Value): TermClause | undefined;
	    getFieldNames(): string[];
	    getFieldClauses(field?: string): FieldClause[];
	    getFieldClause(field: string, predicate: (c: FieldClause) => boolean): FieldClause | undefined;
	    hasOrFieldClause(field: string, value?: Value): boolean;
	    getOrFieldClause(field: string, value?: Value): FieldClause | undefined;
	    addOrFieldValue(field: string, value: Value, must?: boolean, operator?: OperatorType): _AST;
	    removeOrFieldValue(field: string, value: Value): _AST;
	    removeOrFieldClauses(field: string): _AST;
	    hasSimpleFieldClause(field: string, value?: Value): boolean;
	    getSimpleFieldClause(field: string, value?: Value): FieldClause | undefined;
	    addSimpleFieldValue(field: string, value: Value, must?: boolean, operator?: OperatorType): _AST;
	    removeSimpleFieldValue(field: string, value: Value): _AST;
	    removeSimpleFieldClauses(field: string): _AST;
	    getIsClauses(): IsClause[];
	    getIsClause(flag: string): IsClause;
	    removeIsClause(flag: string): _AST;
	    getGroupClauses(): GroupClause[];
	    /**
	     * Creates and returns a new AST with the given clause added to the current clauses. If
	     * the current clauses already include a similar clause, it will be (in-place) replaced by
	     * the given clause. Whether a clause is similar to the given one depends on the type of the clause.
	     * Two clauses are similar if:
	     *
	     * - they are both of the same type
	     * - if they are `default` clauses, they must have the same value
	     * - if they are `term` clauses, they must have the same fields and values
	     * - if they are `is` clauses, they must have the same flags
	     *
	     * The reasoning behind not including the `match` attributes of the clauses in the rules above, stems
	     * in the fact that the AST clauses are ANDed, and having two similar clauses with two different
	     * match attributes creates a logically contradicted AST (e.g. what does it mean to
	     * "(must have x) AND (must not have x)"?)
	     *
	     * note:  in-place replacement means the given clause will be placed in the same position as the one it
	     *        replaced
	     */
	    addClause(newClause: Clause): _AST;
	}
	export const AST: Readonly<{
	    Match: Readonly<{
	        MUST: "must";
	        MUST_NOT: "must_not";
	        isMust(match: MatchType | undefined): boolean;
	        isMustClause(clause: Clause): boolean;
	    }>;
	    Operator: Readonly<{
	        EQ: "eq";
	        EXACT: "exact";
	        GT: "gt";
	        GTE: "gte";
	        LT: "lt";
	        LTE: "lte";
	        isEQ(match: OperatorType | undefined): boolean;
	        isEQClause(clause: Clause): boolean;
	        isEXACT(match: OperatorType | undefined): boolean;
	        isEXACTClause(clause: Clause): boolean;
	        isRange(match: OperatorType | undefined): boolean;
	        isRangeClause(clause: Clause): boolean;
	        isGT(match: OperatorType | undefined): boolean;
	        isGTClause(clause: Clause): boolean;
	        isGTE(match: OperatorType | undefined): boolean;
	        isGTEClause(clause: Clause): boolean;
	        isLT(match: OperatorType | undefined): boolean;
	        isLTClause(clause: Clause): boolean;
	        isLTE(match: OperatorType | undefined): boolean;
	        isLTEClause(clause: Clause): boolean;
	    }>;
	    Term: Readonly<{
	        TYPE: "term";
	        isInstance: (clause: Clause) => clause is TermClause;
	        must: (value: Value) => {
	            type: "term";
	            value: Value;
	            match: "must";
	        };
	        mustNot: (value: Value) => {
	            type: "term";
	            value: Value;
	            match: "must_not";
	        };
	    }>;
	    Group: Readonly<{
	        TYPE: "group";
	        isInstance: (clause: Clause) => clause is GroupClause;
	        must: (value: Clause[]) => {
	            type: "group";
	            value: Clause[];
	            match: "must";
	        };
	        mustNot: (value: Clause[]) => {
	            type: "group";
	            value: Clause[];
	            match: "must_not";
	        };
	    }>;
	    Field: Readonly<{
	        TYPE: "field";
	        isInstance: (clause: Clause) => clause is FieldClause;
	        must: {
	            eq: (field: string, value: Value | Value[]) => {
	                type: "field";
	                field: string;
	                value: string | number | boolean | DateValue | Value[];
	                match: "must";
	                operator: "eq";
	            };
	            exact: (field: string, value: Value | Value[]) => {
	                type: "field";
	                field: string;
	                value: string | number | boolean | DateValue | Value[];
	                match: "must";
	                operator: "exact";
	            };
	            gt: (field: string, value: Value | Value[]) => {
	                type: "field";
	                field: string;
	                value: string | number | boolean | DateValue | Value[];
	                match: "must";
	                operator: "gt";
	            };
	            gte: (field: string, value: Value | Value[]) => {
	                type: "field";
	                field: string;
	                value: string | number | boolean | DateValue | Value[];
	                match: "must";
	                operator: "gte";
	            };
	            lt: (field: string, value: Value | Value[]) => {
	                type: "field";
	                field: string;
	                value: string | number | boolean | DateValue | Value[];
	                match: "must";
	                operator: "lt";
	            };
	            lte: (field: string, value: Value | Value[]) => {
	                type: "field";
	                field: string;
	                value: string | number | boolean | DateValue | Value[];
	                match: "must";
	                operator: "lte";
	            };
	        };
	        mustNot: {
	            eq: (field: string, value: Value | Value[]) => {
	                type: "field";
	                field: string;
	                value: string | number | boolean | DateValue | Value[];
	                match: "must_not";
	                operator: "eq";
	            };
	            exact: (field: string, value: Value | Value[]) => {
	                type: "field";
	                field: string;
	                value: string | number | boolean | DateValue | Value[];
	                match: "must_not";
	                operator: "exact";
	            };
	            gt: (field: string, value: Value | Value[]) => {
	                type: "field";
	                field: string;
	                value: string | number | boolean | DateValue | Value[];
	                match: "must_not";
	                operator: "gt";
	            };
	            gte: (field: string, value: Value | Value[]) => {
	                type: "field";
	                field: string;
	                value: string | number | boolean | DateValue | Value[];
	                match: "must_not";
	                operator: "gte";
	            };
	            lt: (field: string, value: Value | Value[]) => {
	                type: "field";
	                field: string;
	                value: string | number | boolean | DateValue | Value[];
	                match: "must_not";
	                operator: "lt";
	            };
	            lte: (field: string, value: Value | Value[]) => {
	                type: "field";
	                field: string;
	                value: string | number | boolean | DateValue | Value[];
	                match: "must_not";
	                operator: "lte";
	            };
	        };
	    }>;
	    Is: Readonly<{
	        TYPE: "is";
	        isInstance: (clause: Clause) => clause is IsClause;
	        must: (flag: string) => {
	            type: "is";
	            flag: string;
	            match: "must";
	        };
	        mustNot: (flag: string) => {
	            type: "is";
	            flag: string;
	            match: "must_not";
	        };
	    }>;
	    create: (clauses: Clause[]) => _AST;
	}>;

}
declare module '@elastic/eui/src/components/search_bar/query/default_syntax' {
	import { _AST, Clause } from '@elastic/eui/src/components/search_bar/query/ast';
	export interface ParseOptions {
	    dateFormat?: any;
	    schema?: any;
	    escapeValue?: (value: any) => string;
	}
	export type Syntax = Readonly<{
	    printClause: (clause: Clause, text: string, options: any) => string;
	    print: (ast: _AST, options?: {}) => string;
	    parse: (query: string, options?: ParseOptions) => _AST;
	}>;
	export const defaultSyntax: Syntax;

}
declare module '@elastic/eui/src/components/search_bar/query/operators' {
	import moment from 'moment';
	import { Value } from '@elastic/eui/src/components/search_bar/query/ast';
	export type FieldValue = string | number | boolean | any[] | Date | moment.Moment | null | undefined;
	export type ClauseValue = Value | Date | moment.Moment | null | undefined; type Options = Partial<{
	    exactMatch: boolean;
	    ignoreCase: boolean;
	}>;
	export const eq: (fieldValue: FieldValue, clauseValue: ClauseValue, options?: Options) => boolean;
	export const exact: (fieldValue: FieldValue, clauseValue: ClauseValue, options?: {}) => boolean;
	export const gt: (fieldValue: FieldValue, clauseValue: ClauseValue) => boolean;
	export const gte: (fieldValue: FieldValue, clauseValue: ClauseValue) => boolean;
	export const lt: (fieldValue: FieldValue, clauseValue: ClauseValue) => boolean;
	export const lte: (fieldValue: FieldValue, clauseValue: ClauseValue) => boolean;
	export {};

}
declare module '@elastic/eui/src/components/search_bar/query/execute_ast' {
	import { _AST, Clause, IsClause, MatchType, Value } from '@elastic/eui/src/components/search_bar/query/ast';
	interface Explain {
	    hit: boolean;
	    type: Clause['type'];
	    field?: string;
	    value?: Value | Value[];
	    flag?: string;
	    match?: MatchType;
	    operator?: any;
	} const defaultIsClauseMatcher: <T>(item: T, clause: IsClause, explain?: Explain[] | undefined) => boolean;
	export const createFilter: <T extends {}>(ast: _AST, defaultFields: string[] | undefined, isClauseMatcher?: <T_1>(item: T_1, clause: IsClause, explain?: Explain[] | undefined) => boolean, explain?: boolean) => (item: T) => boolean;
	interface Options {
	    isClauseMatcher?: typeof defaultIsClauseMatcher;
	    defaultFields?: string[];
	    explain?: boolean;
	}
	export function executeAst<T>(ast: _AST, items: T[], options?: Options): T[];
	export {};

}
declare module '@elastic/eui/src/components/search_bar/query/ast_to_es_query_dsl' {
	import { _AST, OperatorType, Value } from '@elastic/eui/src/components/search_bar/query/ast';
	export interface QueryContainer {
	    bool?: BoolQuery;
	    match_all?: {};
	    match?: object;
	    match_phrase?: object;
	    range?: object;
	    term?: object;
	    simple_query_string?: object;
	}
	interface BoolQuery {
	    must?: QueryContainer[];
	    must_not?: QueryContainer[];
	    should?: QueryContainer[];
	} type Options = Partial<{
	    defaultFields: string[];
	    extraMustQueries: QueryContainer[];
	    extraMustNotQueries: QueryContainer[];
	    termValuesToQuery: (terms: Value[], options: {}) => QueryContainer;
	    fieldValuesToQuery: (terms: string, options: {}) => QueryContainer;
	    isFlagToQuery: (flag: string, on: boolean) => QueryContainer;
	}>;
	export const _termValuesToQuery: (values: Value[], options: Options) => {
	    simple_query_string: {
	        query: string;
	        fields?: string[] | undefined;
	    };
	} | undefined;
	export const _fieldValuesToQuery: (field: string, operations: {
	    exact: Value[];
	    eq: Value[];
	    gt: Value[];
	    gte: Value[];
	    lt: Value[];
	    lte: Value[];
	}, andOr: 'and' | 'or') => QueryContainer;
	export const _isFlagToQuery: (flag: string, on: boolean) => {
	    term: {
	        [x: string]: boolean;
	    };
	};
	export const astToEsQueryDsl: (ast: _AST, options?: {}) => QueryContainer;
	export {};

}
declare module '@elastic/eui/src/components/search_bar/query/ast_to_es_query_string' {
	import { _AST } from '@elastic/eui/src/components/search_bar/query/ast';
	export const astToEsQueryString: (ast: _AST) => string;

}
declare module '@elastic/eui/src/components/search_bar/query/query' {
	import { ParseOptions, Syntax } from '@elastic/eui/src/components/search_bar/query/default_syntax';
	import { _AST, Clause, OperatorType, Value } from '@elastic/eui/src/components/search_bar/query/ast';
	/**
	 * This is the consumer interface for the query - it's effectively a wrapper construct around
	 * the AST and some of its related utility functions (e.g. parsing, text representation, executing, etc...)
	 * It is immutable - all mutating operations return a new (mutated) query instance.
	 */
	export class Query {
	    static parse(text: string, options?: ParseOptions, syntax?: Syntax): Query;
	    static isMust(clause: Clause): boolean;
	    static MATCH_ALL: Query;
	    static isTerm(clause: Clause): boolean;
	    static isIs(clause: Clause): boolean;
	    static isField(clause: Clause): boolean;
	    ast: _AST;
	    text: string;
	    private syntax;
	    constructor(ast: _AST, syntax?: Syntax, text?: string);
	    hasSimpleFieldClause(field: string, value?: string): boolean;
	    getSimpleFieldClause(field: string, value?: Value): import ("@elastic/eui/src/components/search_bar/query/ast").FieldClause | undefined;
	    removeSimpleFieldClauses(field: string): Query;
	    addSimpleFieldValue(field: string, value: Value, must?: boolean, operator?: OperatorType): Query;
	    removeSimpleFieldValue(field: string, value: Value): Query;
	    hasOrFieldClause(field: string, value?: Value): boolean;
	    getOrFieldClause(field: string, value?: Value): import ("@elastic/eui/src/components/search_bar/query/ast").FieldClause | undefined;
	    addOrFieldValue(field: string, value: Value, must?: boolean, operator?: OperatorType): Query;
	    removeOrFieldValue(field: string, value: Value): Query;
	    removeOrFieldClauses(field: string): Query;
	    hasIsClause(flag: string): boolean;
	    getIsClause(flag: string): import ("@elastic/eui/src/components/search_bar/query/ast").IsClause;
	    addMustIsClause(flag: string): Query;
	    addMustNotIsClause(flag: string): Query;
	    removeIsClause(flag: string): Query;
	    /**
	     * Executes this query over the given iterable item and returns
	     * an new array of all items that matched this query. Options:
	     *
	     * defaultFields: string[]
	     *
	     *    An array of field names to match the default clauses against. When not specified, the query
	     *    will pick up all the string fields of each record and try to match against those.
	     *
	     * isClauseMatcher?: (record: any, flag: string, applied: boolean, explain?: []) => boolean
	     *
	     *    By default the 'is' clauses will try to match against boolean fields - where the flag of the clause
	     *    indicates the field name. You can change this behaviour by providing this matcher function for the
	     *    is clause. For example, if the object has a `tags` field, one can create a matcher that checks if
	     *    an object has a specific tag (e.g. "is:marketing", "is:kitchen", etc..)
	     *
	     * explain?: boolean
	     *
	     *    When set to `true`, each item in the returns array will have an `__explain` field that will hold
	     *    information about why the objects matched the query (default to `false`, mainly/only useful for
	     *    debugging)
	     */
	    static execute<T>(query: string | Query, items: T[], options?: {}): T[];
	    /**
	     * Builds and returns an Elasticsearch query out this query. Options:
	     *
	     * defaultFields?: string[]
	     *
	     *    An array of field names to match the default clauses against. When not specified, the query
	     *    will pick up all the string fields of each record and try to match against those.
	     *
	     * isToQuery?: (flag: string, on: boolean) => Object (elasticsearch query object)
	     *
	     *    By default, "is" clauses will be translated to a term query where the flag is the field
	     *    and the "on" value will be the value of the field. This function lets you change this default
	     *    translation and provide your own custom one.
	     *
	     * termValuesToQuery?: (values: string[]) => Object (elasticsearch query object)
	     *
	     *    By default, "term" clauses will be translated to a "simple_query_string" query where all
	     *    the values serve as terms in the query string. This function lets you change this default
	     *    translation and provide your own custom one.
	     *
	     * fieldValuesToAndQuery?: (field: string, values: string[]) => Object (elasticsearch query object)
	     *
	     *    By default, "field" clauses will be translated to a match query where all the values serve as
	     *    terms in the query(the operator is AND). This function lets you change this default translation
	     *    and provide your own custom one.
	     */
	    static toESQuery(query: string | Query, options?: {}): import ("@elastic/eui/src/components/search_bar/query/ast_to_es_query_dsl").QueryContainer;
	    static toESQueryString(query: string | Query): string;
	}

}
declare module '@elastic/eui/src/components/search_bar/query' {
	export { Query } from '@elastic/eui/src/components/search_bar/query/query';
	export { AST } from '@elastic/eui/src/components/search_bar/query/ast';

}
declare module '@elastic/eui/src/components/search_bar/filters/is_filter' {
	import { Component } from 'react';
	import { Query } from '@elastic/eui/src/components/search_bar/query';
	import { Clause } from '@elastic/eui/src/components/search_bar/query/ast';
	export interface IsFilterConfigType {
	    type: 'is';
	    field: string;
	    name: string;
	    negatedName?: string;
	    available?: () => boolean;
	}
	export interface IsFilterProps {
	    index: number;
	    config: IsFilterConfigType;
	    query: Query;
	    onChange: (value: Query) => void;
	}
	export class IsFilter extends Component<IsFilterProps> {
	    resolveDisplay(clause: Clause): {
	        hasActiveFilters: boolean;
	        name: string;
	    };
	    valueChanged(field: string, checked: boolean): void;
	    render(): JSX.Element;
	}

}
declare module '@elastic/eui/src/components/search_bar/filters/field_value_selection_filter' {
	import React, { Component, ReactNode } from 'react';
	import { Query } from '@elastic/eui/src/components/search_bar/query';
	import { Clause, OperatorType, Value } from '@elastic/eui/src/components/search_bar/query/ast';
	export interface FieldValueOptionType {
	    field?: string;
	    value: Value;
	    name?: string;
	    view?: ReactNode;
	} type OptionsLoader = () => Promise<FieldValueOptionType[]>; type OptionsFilter = (name: string, query: string, options?: FieldValueOptionType[]) => boolean; type MultiSelect = boolean | 'and' | 'or';
	export interface FieldValueSelectionFilterConfigType {
	    type: 'field_value_selection';
	    field?: string;
	    name: string;
	    /**
	     * See #FieldValueOptionType
	     */
	    options: FieldValueOptionType[] | OptionsLoader;
	    filterWith?: 'prefix' | 'includes' | OptionsFilter;
	    cache?: number;
	    multiSelect?: MultiSelect;
	    loadingMessage?: string;
	    noOptionsMessage?: string;
	    searchThreshold?: number;
	    available?: () => boolean;
	    autoClose?: boolean;
	    operator?: OperatorType;
	}
	export interface FieldValueSelectionFilterProps {
	    index: number;
	    config: FieldValueSelectionFilterConfigType;
	    query: Query;
	    onChange: (query: Query) => void;
	}
	interface State {
	    popoverOpen: boolean;
	    error: string | null;
	    options: {
	        all: FieldValueOptionType[];
	        shown: FieldValueOptionType[];
	    } | null;
	    cachedOptions?: FieldValueOptionType[] | null;
	    activeItems: FieldValueOptionType[];
	}
	export class FieldValueSelectionFilter extends Component<FieldValueSelectionFilterProps, State> {
	    private readonly selectItems;
	    private searchInput;
	    constructor(props: FieldValueSelectionFilterProps);
	    closePopover(): void;
	    onButtonClick(): void;
	    loadOptions(): void;
	    filterOptions(q?: string): void;
	    getOptionFilter(): OptionsFilter;
	    resolveOptionsLoader: () => OptionsLoader;
	    resolveOptionName(option: FieldValueOptionType): string;
	    onOptionClick(field: string, value: Value, checked: 'on' | 'off' | undefined): void;
	    onKeyDown(index: number, event: React.KeyboardEvent<HTMLInputElement> | React.KeyboardEvent<HTMLButtonElement>): void;
	    resolveMultiSelect(): MultiSelect;
	    componentDidMount(): void;
	    componentDidUpdate(prevProps: FieldValueSelectionFilterProps): void;
	    render(): JSX.Element;
	    renderSearchBox(): JSX.Element | undefined;
	    renderContent(field: string | undefined, query: Query, config: FieldValueSelectionFilterConfigType, multiSelect: MultiSelect): JSX.Element | undefined;
	    resolveChecked(clause: Clause | undefined): 'on' | 'off' | undefined;
	    renderLoader(): JSX.Element;
	    renderError(message: string): JSX.Element;
	    renderNoOptions(): JSX.Element;
	    isActiveField(field: string | undefined): boolean;
	}
	export {};

}
declare module '@elastic/eui/src/components/search_bar/filters/field_value_toggle_filter' {
	import { Component } from 'react';
	import { Query } from '@elastic/eui/src/components/search_bar/query';
	import { Clause, OperatorType, Value } from '@elastic/eui/src/components/search_bar/query/ast';
	export interface FieldValueToggleFilterConfigType {
	    type: 'field_value_toggle';
	    field: string;
	    value: Value;
	    name: string;
	    negatedName?: string;
	    available?: () => boolean;
	    operator?: OperatorType;
	}
	export interface FieldValueToggleFilterProps {
	    index: number;
	    config: FieldValueToggleFilterConfigType;
	    query: Query;
	    onChange: (value: Query) => void;
	}
	export class FieldValueToggleFilter extends Component<FieldValueToggleFilterProps> {
	    resolveDisplay(clause: Clause | undefined): {
	        hasActiveFilters: boolean;
	        name: string;
	    };
	    valueChanged(checked: boolean): void;
	    render(): JSX.Element;
	}

}
declare module '@elastic/eui/src/components/search_bar/filters/field_value_toggle_group_filter' {
	import { Component } from 'react';
	import { Query } from '@elastic/eui/src/components/search_bar/query';
	import { OperatorType } from '@elastic/eui/src/components/search_bar/query/ast';
	export interface FieldValueToggleGroupFilterItemType {
	    value: string | number | boolean;
	    name: string;
	    negatedName?: string;
	    operator?: OperatorType;
	}
	export interface FieldValueToggleGroupFilterConfigType {
	    type: 'field_value_toggle_group';
	    field: string;
	    /**
	     * See #FieldValueToggleGroupFilterItemType
	     */
	    items: FieldValueToggleGroupFilterItemType[];
	    available?: () => boolean;
	}
	export interface FieldValueToggleGroupFilterProps {
	    index: number;
	    config: FieldValueToggleGroupFilterConfigType;
	    query: Query;
	    onChange: (value: Query) => void;
	}
	export class FieldValueToggleGroupFilter extends Component<FieldValueToggleGroupFilterProps> {
	    resolveDisplay(config: FieldValueToggleGroupFilterConfigType, query: Query, item: FieldValueToggleGroupFilterItemType): {
	        active: boolean;
	        name: string;
	    };
	    valueChanged(item: FieldValueToggleGroupFilterItemType, active: boolean): void;
	    render(): JSX.Element[];
	}

}
declare module '@elastic/eui/src/components/search_bar/filters/filters' {
	
	import { IsFilterConfigType } from '@elastic/eui/src/components/search_bar/filters/is_filter';
	import { FieldValueSelectionFilterConfigType } from '@elastic/eui/src/components/search_bar/filters/field_value_selection_filter';
	import { FieldValueToggleFilterConfigType } from '@elastic/eui/src/components/search_bar/filters/field_value_toggle_filter';
	import { FieldValueToggleGroupFilterConfigType } from '@elastic/eui/src/components/search_bar/filters/field_value_toggle_group_filter';
	import { Query } from '@elastic/eui/src/components/search_bar/query';
	export const createFilter: (index: number, config: SearchFilterConfig, query: Query, onChange: (query: Query) => void) => JSX.Element;
	export type SearchFilterConfig = IsFilterConfigType | FieldValueSelectionFilterConfigType | FieldValueToggleFilterConfigType | FieldValueToggleGroupFilterConfigType;

}
declare module '@elastic/eui/src/components/search_bar/filters' {
	export { createFilter, SearchFilterConfig } from '@elastic/eui/src/components/search_bar/filters/filters';
	export { FieldValueOptionType } from '@elastic/eui/src/components/search_bar/filters/field_value_selection_filter';

}
declare module '@elastic/eui/src/components/search_bar/search_filters' {
	import { Component } from 'react';
	import { SearchFilterConfig } from '@elastic/eui/src/components/search_bar/filters';
	import { Query } from '@elastic/eui/src/components/search_bar/query';
	export { SearchFilterConfig } from '@elastic/eui/src/components/search_bar/filters';
	interface EuiSearchFiltersProps {
	    query: Query;
	    onChange: (query: Query) => void;
	    filters: SearchFilterConfig[];
	} type DefaultProps = Pick<EuiSearchFiltersProps, 'filters'>;
	export class EuiSearchFilters extends Component<EuiSearchFiltersProps> {
	    static defaultProps: DefaultProps;
	    render(): JSX.Element;
	}

}
declare module '@elastic/eui/src/components/search_bar/search_bar' {
	import { Component, ReactElement } from 'react';
	import { SchemaType } from '@elastic/eui/src/components/search_bar/search_box';
	import { SearchFilterConfig } from '@elastic/eui/src/components/search_bar/search_filters';
	import { Query } from '@elastic/eui/src/components/search_bar/query';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiFieldSearchProps } from '@elastic/eui/src/components/form/field_search';
	export { Query, AST as Ast } from '@elastic/eui/src/components/search_bar/query';
	export type QueryType = Query | string; type Tools = ReactElement | ReactElement[];
	interface ArgsWithQuery {
	    query: Query;
	    queryText: string;
	    error: null;
	}
	interface ArgsWithError {
	    query: null;
	    queryText: string;
	    error: Error;
	}
	export type EuiSearchBarOnChangeArgs = ArgsWithQuery | ArgsWithError;
	export interface EuiSearchBarProps extends CommonProps {
	    onChange?: (args: EuiSearchBarOnChangeArgs) => void | boolean;
	    /**
	     The initial query the bar will hold when first mounted
	     */
	    defaultQuery?: QueryType;
	    /**
	     If you wish to use the search bar as a controlled component, continuously pass the query via this prop.
	     */
	    query?: QueryType;
	    /**
	     Configures the search box. Set `placeholder` to change the placeholder text in the box and `incremental` to support incremental (as you type) search.
	     */
	    box?: EuiFieldSearchProps & {
	        schema?: SchemaType | boolean;
	    };
	    /**
	     An array of search filters. See #SearchFilterConfig.
	     */
	    filters?: SearchFilterConfig[];
	    /**
	     * Tools which go to the left of the search bar.
	     */
	    toolsLeft?: Tools;
	    /**
	     * Tools which go to the right of the search bar.
	     */
	    toolsRight?: Tools;
	    /**
	     * Date formatter to use when parsing date values
	     */
	    dateFormat?: object;
	}
	interface State {
	    query: Query;
	    queryText: string;
	    error: null | Error;
	} type StateWithOptionalQuery = Omit<State, 'query'> & {
	    query: Query | null;
	};
	export class EuiSearchBar extends Component<EuiSearchBarProps, State> {
	    static Query: typeof Query;
	    constructor(props: EuiSearchBarProps);
	    static getDerivedStateFromProps(nextProps: EuiSearchBarProps, prevState: State): State | null;
	    notifyControllingParent(newState: StateWithOptionalQuery): void;
	    onSearch: (queryText: string) => void;
	    onFiltersChange: (query: Query) => void;
	    renderTools(tools?: Tools): JSX.Element | JSX.Element[] | undefined;
	    render(): JSX.Element;
	}

}
declare module '@elastic/eui/src/components/search_bar' {
	export { EuiSearchBar, EuiSearchBarProps, EuiSearchBarOnChangeArgs, QueryType, Query, Ast, } from '@elastic/eui/src/components/search_bar/search_bar';
	export { SearchFilterConfig } from '@elastic/eui/src/components/search_bar/search_filters';
	export { FieldValueOptionType } from '@elastic/eui/src/components/search_bar/filters/field_value_selection_filter';

}
declare module '@elastic/eui/src/components/selectable/selectable_option' {
	import React, { HTMLAttributes } from 'react';
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common';
	export type EuiSelectableOptionCheckedType = 'on' | 'off' | undefined;
	export type EuiSelectableOptionBase = CommonProps & {
	    /**
	     * Visible label of option.
	     * Must be unique across items if `key` is not supplied
	     */
	    label: string;
	    /**
	     * Optionally change the searchable term by passing a different string other than the `label`.
	     * Best used when creating a custom `optionRender` to separate the label from metadata but allowing to search on both
	     */
	    searchableLabel?: string;
	    /**
	     * Must be unique across items.
	     * Will be used to match options instead of `label`
	     */
	    key?: string;
	    /**
	     * Leave `undefined` to indicate not selected,
	     * 'on' to indicate inclusion and
	     * 'off' to indicate exclusion
	     */
	    checked?: EuiSelectableOptionCheckedType;
	    disabled?: boolean;
	    /**
	     * Optional `boolean`.
	     * Set to `true` to indicate object is just a grouping label, not a selectable item
	     */
	    isGroupLabel?: false;
	    /**
	     * Node to add between the selection icon and the label
	     */
	    prepend?: React.ReactNode;
	    /**
	     * Node to add to the far right of the item
	     */
	    append?: React.ReactNode;
	    ref?: (optionIndex: number) => void;
	    /**
	     * Disallow `id` from being set.
	     * Option item `id`s are coordinated at a higher level for a11y reasons.
	     */
	    id?: never;
	    /**
	     * Option data to pass through to the `renderOptions` element.
	     * Bypass `EuiSelectableItem` and avoid DOM attribute warnings.
	     */
	    data?: {
	        [key: string]: any;
	    };
	}; type _EuiSelectableGroupLabelOption = Omit<EuiSelectableOptionBase, 'isGroupLabel'> & Exclude<HTMLAttributes<HTMLDivElement>, 'id'> & {
	    isGroupLabel: true;
	};
	export type EuiSelectableGroupLabelOption<T> = _EuiSelectableGroupLabelOption & T; type _EuiSelectableLIOption = EuiSelectableOptionBase & Exclude<HTMLAttributes<HTMLLIElement>, 'id'>;
	export type EuiSelectableLIOption<T> = _EuiSelectableLIOption & T;
	export type EuiSelectableOption<T = {}> = ExclusiveUnion<EuiSelectableGroupLabelOption<T>, EuiSelectableLIOption<T>>;
	export {};

}
declare module '@elastic/eui/src/components/selectable/matching_options' {
	import { EuiSelectableOption } from '@elastic/eui/src/components/selectable/selectable_option'; type SelectableOptions<T> = Array<EuiSelectableOption<T>>;
	export const getMatchingOptions: <T>(options: SelectableOptions<T>, searchValue: string, isPreFiltered?: boolean | undefined, selectedOptions?: SelectableOptions<T> | undefined) => SelectableOptions<T>;
	export {};

}
declare module '@elastic/eui/src/components/selectable/selectable_search/selectable_search' {
	import { Component } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiFieldSearchProps } from '@elastic/eui/src/components/form';
	import { EuiSelectableOption } from '@elastic/eui/src/components/selectable/selectable_option';
	export type EuiSelectableSearchProps<T> = Omit<EuiFieldSearchProps, 'onChange'> & CommonProps & {
	    /**
	     * Passes back (matchingOptions, searchValue)
	     */
	    onChange: (matchingOptions: Array<EuiSelectableOption<T>>, searchValue: string) => void;
	    options: Array<EuiSelectableOption<T>>;
	    defaultValue: string;
	    /**
	     * The id of the visible list to create the appropriate aria controls
	     */
	    listId?: string;
	    isPreFiltered: boolean;
	};
	export interface EuiSelectableSearchState {
	    searchValue: string;
	}
	export class EuiSelectableSearch<T> extends Component<EuiSelectableSearchProps<T>, EuiSelectableSearchState> {
	    static defaultProps: {
	        defaultValue: string;
	    };
	    constructor(props: EuiSelectableSearchProps<T>);
	    componentDidMount(): void;
	    onSearchChange: (value: string) => void;
	    render(): JSX.Element;
	}

}
declare module '@elastic/eui/src/components/selectable/selectable_search' {
	export { EuiSelectableSearch, EuiSelectableSearchProps, } from '@elastic/eui/src/components/selectable/selectable_search/selectable_search';

}
declare module '@elastic/eui/src/components/selectable/selectable_message/selectable_message' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiSelectableMessageProps = Omit<HTMLAttributes<HTMLDivElement>, 'color'> & CommonProps & {
	    /**
	     * Match this to the `listProps.bordered` property of your `EuiSelectable` instance
	     */
	    bordered?: boolean;
	};
	export const EuiSelectableMessage: FunctionComponent<EuiSelectableMessageProps>;

}
declare module '@elastic/eui/src/components/selectable/selectable_message' {
	export { EuiSelectableMessage, EuiSelectableMessageProps, } from '@elastic/eui/src/components/selectable/selectable_message/selectable_message';

}
declare module '@elastic/eui/src/components/selectable/selectable_list/selectable_list_item' {
	import React, { Component, LiHTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiSelectableOptionCheckedType } from '@elastic/eui/src/components/selectable/selectable_option';
	import { EuiBadgeProps } from '@elastic/eui/src/components/badge';
	export type EuiSelectableListItemProps = LiHTMLAttributes<HTMLLIElement> & CommonProps & {
	    children?: React.ReactNode;
	    /**
	     * Applies an icon and visual styling to activated items
	     */
	    checked?: EuiSelectableOptionCheckedType;
	    /**
	     * Shows icons based on `checked` type
	     */
	    showIcons?: boolean;
	    /**
	     * Highlights the item for pseudo focus
	     */
	    isFocused?: boolean;
	    disabled?: boolean;
	    prepend?: React.ReactNode;
	    append?: React.ReactNode;
	    allowExclusions?: boolean;
	    /**
	     * When enabled by setting to either `true` or passing custom a custom badge,
	     * shows a hollow badge as an append (far right) when the item is focused.
	     * The default content when `true` is `↩ to select/deselect/include/exclude`
	     */
	    onFocusBadge?: boolean | EuiBadgeProps;
	};
	export class EuiSelectableListItem extends Component<EuiSelectableListItemProps> {
	    static defaultProps: {
	        showIcons: boolean;
	        onFocusBadge: boolean;
	    };
	    constructor(props: EuiSelectableListItemProps);
	    render(): JSX.Element;
	}

}
declare module '@elastic/eui/src/components/selectable/selectable_list/selectable_list' {
	import React, { Component, HTMLAttributes, ReactNode, CSSProperties } from 'react';
	import { FixedSizeList, ListProps, ListChildComponentProps as ReactWindowListChildComponentProps } from 'react-window';
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common';
	import { EuiSelectableOption } from '@elastic/eui/src/components/selectable/selectable_option';
	import { EuiSelectableListItemProps } from '@elastic/eui/src/components/selectable/selectable_list/selectable_list_item';
	interface ListChildComponentProps<T> extends Omit<ReactWindowListChildComponentProps, 'style'> {
	    data: Array<EuiSelectableOption<T>>;
	    style?: CSSProperties;
	}
	export type EuiSelectableOptionsListVirtualizedProps = ExclusiveUnion<{
	    /**
	     * Use virtualized rendering for list items with `react-window`.
	     * Sets each row's height to the value of `rowHeight`.
	     */
	    isVirtualized?: true;
	    /**
	     *  The height of each option in pixels. Defaults to `32`.
	     *  Has no effect if `isVirtualized=false`.
	     */
	    rowHeight: number;
	}, {
	    isVirtualized: false;
	}>;
	export type EuiSelectableOptionsListProps = CommonProps & HTMLAttributes<HTMLDivElement> & {
	    /**
	     * The index of the option to be highlighted as pseudo-focused;
	     * Good for use when only one selection is allowed and needing to open
	     * directly to that option
	     */
	    activeOptionIndex?: number;
	    /**
	     * Show the check/cross selection indicator icons
	     */
	    showIcons?: boolean;
	    singleSelection?: 'always' | boolean;
	    /**
	     * Any props to send specifically to the react-window `FixedSizeList`
	     */
	    windowProps?: Partial<ListProps>;
	    /**
	     * Adds a border around the list to indicate the bounds;
	     * Useful when the list scrolls, otherwise use your own container
	     */
	    bordered?: boolean;
	    /**
	     * When enabled by setting to either `true` or passing custom text,
	     * shows a hollow badge as an append (far right) when the item is focused.
	     * The default content when `true` is `↩ to select/deselect/include/exclude`
	     */
	    onFocusBadge?: EuiSelectableListItemProps['onFocusBadge'];
	} & EuiSelectableOptionsListVirtualizedProps;
	export type EuiSelectableListProps<T> = EuiSelectableOptionsListProps & {
	    /**
	     * All possible options
	     */
	    options: Array<EuiSelectableOption<T>>;
	    /**
	     * Filtered options list (if applicable)
	     */
	    visibleOptions?: Array<EuiSelectableOption<T>>;
	    /**
	     * Search value to highlight on the option render
	     */
	    searchValue: string;
	    /**
	     * Returns the array of options with altered checked state
	     */
	    onOptionClick: (options: Array<EuiSelectableOption<T>>) => void;
	    /**
	     * Custom render for the label portion of the option;
	     * Takes (option, searchValue), returns ReactNode
	     */
	    renderOption?: (option: EuiSelectableOption<T>, searchValue: string) => ReactNode;
	    /**
	     * Sets the max height in pixels or pass `full` to allow
	     * the whole group to fill the height of its container and
	     * allows the list grow as well
	     */
	    height?: number | 'full';
	    /**
	     * Allow cycling through the on, off and undefined state of option.checked
	     * and not just on and undefined
	     */
	    allowExclusions?: boolean;
	    searchable?: boolean;
	    makeOptionId: (index: number | undefined) => string;
	    listId: string;
	    setActiveOptionIndex: (index: number, cb?: () => void) => void;
	};
	export class EuiSelectableList<T> extends Component<EuiSelectableListProps<T>> {
	    static defaultProps: {
	        rowHeight: number;
	        searchValue: string;
	        isVirtualized: boolean;
	    };
	    listRef: FixedSizeList | null;
	    listBoxRef: HTMLUListElement | null;
	    setListRef: (ref: FixedSizeList | null) => void;
	    removeScrollableTabStop: (ref: HTMLDivElement | null) => void;
	    setListBoxRef: (ref: HTMLUListElement | null) => void;
	    componentDidUpdate(): void;
	    constructor(props: EuiSelectableListProps<T>);
	    ListRow: React.MemoExoticComponent<({ data, index, style }: ListChildComponentProps<T>) => JSX.Element>;
	    render(): JSX.Element;
	    onAddOrRemoveOption: (option: EuiSelectableOption<T>) => void;
	    private onAddOption;
	    private onRemoveOption;
	    private onExcludeOption;
	}
	export {};

}
declare module '@elastic/eui/src/components/selectable/selectable_list' {
	export { EuiSelectableList, EuiSelectableListProps, EuiSelectableOptionsListProps, EuiSelectableOptionsListVirtualizedProps, } from '@elastic/eui/src/components/selectable/selectable_list/selectable_list';
	export { EuiSelectableListItem, EuiSelectableListItemProps, } from '@elastic/eui/src/components/selectable/selectable_list/selectable_list_item';

}
declare module '@elastic/eui/src/components/selectable/selectable' {
	import React, { Component, HTMLAttributes, ReactNode, ReactElement, KeyboardEvent } from 'react';
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common';
	import { EuiSelectableSearch } from '@elastic/eui/src/components/selectable/selectable_search';
	import { EuiSelectableMessage } from '@elastic/eui/src/components/selectable/selectable_message';
	import { EuiSelectableList } from '@elastic/eui/src/components/selectable/selectable_list';
	import { EuiSelectableOption } from '@elastic/eui/src/components/selectable/selectable_option';
	import { EuiSelectableOptionsListProps } from '@elastic/eui/src/components/selectable/selectable_list/selectable_list';
	import { EuiSelectableSearchProps } from '@elastic/eui/src/components/selectable/selectable_search/selectable_search'; type RequiredEuiSelectableOptionsListProps = Omit<EuiSelectableOptionsListProps, keyof typeof EuiSelectableList['defaultProps']>; type OptionalEuiSelectableOptionsListProps = Omit<EuiSelectableOptionsListProps, keyof RequiredEuiSelectableOptionsListProps>; type EuiSelectableOptionsListPropsWithDefaults = RequiredEuiSelectableOptionsListProps & Partial<OptionalEuiSelectableOptionsListProps>; type EuiSelectableSearchableProps<T> = ExclusiveUnion<{
	    searchable: false;
	}, {
	    /**
	     * Hooks up a search box to filter the list (boolean)
	     */
	    searchable: true;
	    /**
	     * Passes props down to the `EuiFieldSearch`.
	     * See #EuiSelectableSearchProps
	     */
	    searchProps?: EuiSelectableSearchableSearchProps<T>;
	}>;
	export type EuiSelectableSearchableSearchProps<T> = Partial<Omit<EuiSelectableSearchProps<T>, 'onSearch'> & {
	    onSearch: (searchValue: string, matchingOptions: Array<EuiSelectableOption<T>>) => void;
	}>;
	export type EuiSelectableProps<T = {}> = CommonProps & Omit<HTMLAttributes<HTMLDivElement>, 'children' | 'onChange'> & EuiSelectableSearchableProps<T> & {
	    /**
	     * Function that takes the `list` node and then
	     * the `search` node (if `searchable` is applied)
	     */
	    children?: (list: ReactElement<typeof EuiSelectableMessage | typeof EuiSelectableList>, search: ReactElement<EuiSelectableSearch<T>> | undefined) => ReactNode;
	    /**
	     * Array of EuiSelectableOption objects. See #EuiSelectableOptionProps
	     */
	    options: Array<EuiSelectableOption<T>>;
	    /**
	     * Passes back the altered `options` array with selected options as
	     */
	    onChange?: (options: Array<EuiSelectableOption<T>>) => void;
	    /**
	     * Sets the single selection policy of
	     * `false`: allows multiple selection
	     * `true`: only allows one selection
	     * `always`: can and must have only one selection
	     */
	    singleSelection?: EuiSelectableOptionsListProps['singleSelection'];
	    /**
	     * Allows marking options as `checked='off'` as well as `'on'`
	     */
	    allowExclusions?: boolean;
	    /**
	     * Show an loading indicator while you load and hook up your data
	     */
	    isLoading?: boolean;
	    /**
	     * Sets the max height in pixels or pass `full` to allow
	     * the whole group to fill the height of its container and
	     * allows the list grow as well
	     */
	    height?: number | 'full';
	    /**
	     * See #EuiSelectableOptionsList
	     */
	    listProps?: EuiSelectableOptionsListPropsWithDefaults;
	    /**
	     * Custom render function for each option.
	     * Returns `(option, searchValue)`
	     */
	    renderOption?: (option: EuiSelectableOption<T>, searchValue: string) => ReactNode;
	    /**
	     * Customize the loading message. Pass a string to simply change the text,
	     * or a node to replace the whole content.
	     */
	    loadingMessage?: ReactElement | string;
	    /**
	     * Customize the no matches message. Pass a string to simply change the text,
	     * or a node to replace the whole content.
	     */
	    noMatchesMessage?: ReactElement | string;
	    /**
	     * Customize the empty message. Pass a string to simply change the text,
	     * or a node to replace the whole content.
	     */
	    emptyMessage?: ReactElement | string;
	    /**
	     * Control whether or not options get filtered internally or if consumer will filter
	     * Default: false
	     */
	    isPreFiltered?: boolean;
	};
	export interface EuiSelectableState<T> {
	    activeOptionIndex?: number;
	    searchValue: string;
	    visibleOptions: Array<EuiSelectableOption<T>>;
	    isFocused: boolean;
	}
	export class EuiSelectable<T = {}> extends Component<EuiSelectableProps<T>, EuiSelectableState<T>> {
	    static defaultProps: {
	        options: never[];
	        singleSelection: boolean;
	        searchable: boolean;
	        isPreFiltered: boolean;
	    };
	    private containerRef;
	    private optionsListRef;
	    private preventOnFocus;
	    rootId: (idSuffix?: string) => string;
	    constructor(props: EuiSelectableProps<T>);
	    static getDerivedStateFromProps<T>(nextProps: EuiSelectableProps<T>, prevState: EuiSelectableState<T>): {
	        visibleOptions: ExclusiveUnion<import ("@elastic/eui/src/components/selectable/selectable_option").EuiSelectableGroupLabelOption<T>, import ("@elastic/eui/src/components/selectable/selectable_option").EuiSelectableLIOption<T>>[];
	        activeOptionIndex: number | undefined;
	    };
	    hasActiveOption: () => boolean;
	    onMouseDown: () => void;
	    onFocus: () => void;
	    onKeyDown: (event: KeyboardEvent<HTMLDivElement>) => void;
	    incrementActiveOptionIndex: (amount: number) => void;
	    onSearchChange: (visibleOptions: Array<EuiSelectableOption<T>>, searchValue: string) => void;
	    onContainerBlur: (e: React.FocusEvent) => void;
	    onOptionClick: (options: Array<EuiSelectableOption<T>>) => void;
	    scrollToItem: (index: number, align?: "center" | "end" | "auto" | "start" | "smart" | undefined) => void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/selectable/selectable_templates/selectable_template_sitewide_option' {
	import React from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiIconProps } from '@elastic/eui/src/components/icon';
	import { EuiAvatarProps } from '@elastic/eui/src/components/avatar/avatar';
	import { EuiSelectableOption } from '@elastic/eui/src/components/selectable/selectable_option';
	export interface EuiSelectableTemplateSitewideMetaData extends CommonProps {
	    /**
	     * Required to display the metadata
	     */
	    text: string;
	    /**
	     * Styles the metadata according to Elastic's schema.
	     * Can be one of 'application', 'deployment', 'article', 'case', 'platform',
	     * or a custom string to associate with your own schema.
	     * Appends the string to the class name as `euiSelectableTemplateSitewide__optionMeta--[type]`
	     */
	    type?: 'application' | 'deployment' | 'article' | 'case' | 'platform' | string;
	    /**
	     * Will wrap the meta tag in EuiHighlight to mark the portions that match the search text
	     */
	    highlightSearchString?: boolean;
	}
	/**
	 * The generic extension allows consumers to keep their data objects
	 * intact without needing to do key lookups when using `renderOption`
	 */
	export type EuiSelectableTemplateSitewideOption<T = {
	    [key: string]: any;
	}> = {
	    /**
	     * Displayed on the left (`prepend`).
	     * Object of `EuiIconProps` for display of the solution/application's logo
	     */
	    icon?: EuiIconProps;
	    /**
	     * Displayed on the right (`append`).
	     * Object of `EuiAvatarProps` for display of the space (default) or user
	     */
	    avatar?: EuiAvatarProps;
	    /**
	     * An array of inline #MetaData displayed beneath the label and separated by bullets.
	     */
	    meta?: EuiSelectableTemplateSitewideMetaData[];
	} & EuiSelectableOption<T>;
	export const euiSelectableTemplateSitewideFormatOptions: (options: EuiSelectableTemplateSitewideOption[]) => ({
	    className: string;
	    prepend: {} | null | undefined;
	    append: {} | null | undefined;
	    /**
	     * Displayed on the left (`prepend`).
	     * Object of `EuiIconProps` for display of the solution/application's logo
	     */
	    icon?: EuiIconProps | undefined;
	    /**
	     * Displayed on the right (`append`).
	     * Object of `EuiAvatarProps` for display of the space (default) or user
	     */
	    avatar?: (Pick<React.HTMLAttributes<HTMLDivElement>, "children" | "slot" | "style" | "title" | "prefix" | "className" | "id" | "lang" | "role" | "tabIndex" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "placeholder" | "spellCheck" | "translate" | "radioGroup" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is"> & CommonProps & import ("@elastic/eui/src/components/common").DisambiguateSet<(import ("@elastic/eui/src/components/common").DisambiguateSet<{
	        initials?: string | undefined;
	        initialsLength?: 1 | 2 | undefined;
	    }, {
	        imageUrl: string;
	    }> & {
	        imageUrl: string;
	    }) | (import ("@elastic/eui/src/components/common").DisambiguateSet<{
	        imageUrl: string;
	    }, {
	        initials?: string | undefined;
	        initialsLength?: 1 | 2 | undefined;
	    }> & {
	        initials?: string | undefined;
	        initialsLength?: 1 | 2 | undefined;
	    }), {
	        iconType: import ("@elastic/eui/src/components/icon").IconType;
	        iconSize?: "s" | "m" | "l" | "xl" | "original" | "xxl" | undefined;
	        iconColor?: string | null | undefined;
	    }> & {
	        iconType: import ("@elastic/eui/src/components/icon").IconType;
	        iconSize?: "s" | "m" | "l" | "xl" | "original" | "xxl" | undefined;
	        iconColor?: string | null | undefined;
	    } & {
	        name: string;
	        color?: string | null | undefined;
	        type?: "space" | "user" | undefined;
	        size?: "s" | "m" | "l" | "xl" | undefined;
	        isDisabled?: boolean | undefined;
	    }) | (Pick<React.HTMLAttributes<HTMLDivElement>, "children" | "slot" | "style" | "title" | "prefix" | "className" | "id" | "lang" | "role" | "tabIndex" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "placeholder" | "spellCheck" | "translate" | "radioGroup" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is"> & CommonProps & import ("@elastic/eui/src/components/common").DisambiguateSet<{
	        iconType: import ("@elastic/eui/src/components/icon").IconType;
	        iconSize?: "s" | "m" | "l" | "xl" | "original" | "xxl" | undefined;
	        iconColor?: string | null | undefined;
	    }, (import ("@elastic/eui/src/components/common").DisambiguateSet<{
	        initials?: string | undefined;
	        initialsLength?: 1 | 2 | undefined;
	    }, {
	        imageUrl: string;
	    }> & {
	        imageUrl: string;
	    }) | (import ("@elastic/eui/src/components/common").DisambiguateSet<{
	        imageUrl: string;
	    }, {
	        initials?: string | undefined;
	        initialsLength?: 1 | 2 | undefined;
	    }> & {
	        initials?: string | undefined;
	        initialsLength?: 1 | 2 | undefined;
	    })> & import ("@elastic/eui/src/components/common").DisambiguateSet<{
	        initials?: string | undefined;
	        initialsLength?: 1 | 2 | undefined;
	    }, {
	        imageUrl: string;
	    }> & {
	        imageUrl: string;
	    } & {
	        name: string;
	        color?: string | null | undefined;
	        type?: "space" | "user" | undefined;
	        size?: "s" | "m" | "l" | "xl" | undefined;
	        isDisabled?: boolean | undefined;
	    }) | (Pick<React.HTMLAttributes<HTMLDivElement>, "children" | "slot" | "style" | "title" | "prefix" | "className" | "id" | "lang" | "role" | "tabIndex" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "placeholder" | "spellCheck" | "translate" | "radioGroup" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is"> & CommonProps & import ("@elastic/eui/src/components/common").DisambiguateSet<{
	        iconType: import ("@elastic/eui/src/components/icon").IconType;
	        iconSize?: "s" | "m" | "l" | "xl" | "original" | "xxl" | undefined;
	        iconColor?: string | null | undefined;
	    }, (import ("@elastic/eui/src/components/common").DisambiguateSet<{
	        initials?: string | undefined;
	        initialsLength?: 1 | 2 | undefined;
	    }, {
	        imageUrl: string;
	    }> & {
	        imageUrl: string;
	    }) | (import ("@elastic/eui/src/components/common").DisambiguateSet<{
	        imageUrl: string;
	    }, {
	        initials?: string | undefined;
	        initialsLength?: 1 | 2 | undefined;
	    }> & {
	        initials?: string | undefined;
	        initialsLength?: 1 | 2 | undefined;
	    })> & import ("@elastic/eui/src/components/common").DisambiguateSet<{
	        imageUrl: string;
	    }, {
	        initials?: string | undefined;
	        initialsLength?: 1 | 2 | undefined;
	    }> & {
	        initials?: string | undefined;
	        initialsLength?: 1 | 2 | undefined;
	    } & {
	        name: string;
	        color?: string | null | undefined;
	        type?: "space" | "user" | undefined;
	        size?: "s" | "m" | "l" | "xl" | undefined;
	        isDisabled?: boolean | undefined;
	    }) | undefined;
	    /**
	     * An array of inline #MetaData displayed beneath the label and separated by bullets.
	     */
	    meta?: EuiSelectableTemplateSitewideMetaData[] | undefined;
	    'aria-label'?: string | undefined;
	    'data-test-subj'?: string | undefined;
	    label: string;
	    searchableLabel?: string | undefined;
	    key: string;
	    checked?: "off" | "on" | undefined;
	    disabled?: boolean | undefined;
	    isGroupLabel?: false | undefined;
	    ref?: ((optionIndex: number) => void) | undefined;
	    id?: undefined;
	    data?: {
	        [key: string]: any;
	    } | undefined;
	    defaultChecked?: boolean | undefined;
	    defaultValue?: string | number | string[] | undefined;
	    suppressContentEditableWarning?: boolean | undefined;
	    suppressHydrationWarning?: boolean | undefined;
	    accessKey?: string | undefined;
	    contentEditable?: boolean | "inherit" | "true" | "false" | undefined;
	    contextMenu?: string | undefined;
	    dir?: string | undefined;
	    draggable?: boolean | "true" | "false" | undefined;
	    hidden?: boolean | undefined;
	    lang?: string | undefined;
	    placeholder?: string | undefined;
	    slot?: string | undefined;
	    spellCheck?: boolean | "true" | "false" | undefined;
	    style?: React.CSSProperties | undefined;
	    tabIndex?: number | undefined;
	    title: string;
	    translate?: "no" | "yes" | undefined;
	    radioGroup?: string | undefined;
	    role?: string | undefined;
	    about?: string | undefined;
	    datatype?: string | undefined;
	    inlist?: any;
	    prefix?: string | undefined;
	    property?: string | undefined;
	    resource?: string | undefined;
	    typeof?: string | undefined;
	    vocab?: string | undefined;
	    autoCapitalize?: string | undefined;
	    autoCorrect?: string | undefined;
	    autoSave?: string | undefined;
	    color?: string | undefined;
	    itemProp?: string | undefined;
	    itemScope?: boolean | undefined;
	    itemType?: string | undefined;
	    itemID?: string | undefined;
	    itemRef?: string | undefined;
	    results?: number | undefined;
	    security?: string | undefined;
	    unselectable?: "off" | "on" | undefined;
	    inputMode?: "search" | "text" | "none" | "email" | "tel" | "url" | "numeric" | "decimal" | undefined;
	    is?: string | undefined;
	    'aria-activedescendant'?: string | undefined;
	    'aria-atomic'?: boolean | "true" | "false" | undefined;
	    'aria-autocomplete'?: "both" | "none" | "inline" | "list" | undefined;
	    'aria-busy'?: boolean | "true" | "false" | undefined;
	    'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
	    'aria-colcount'?: number | undefined;
	    'aria-colindex'?: number | undefined;
	    'aria-colspan'?: number | undefined;
	    'aria-controls'?: string | undefined;
	    'aria-current'?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date" | undefined;
	    'aria-describedby'?: string | undefined;
	    'aria-details'?: string | undefined;
	    'aria-disabled'?: boolean | "true" | "false" | undefined;
	    'aria-dropeffect'?: "link" | "none" | "copy" | "execute" | "move" | "popup" | undefined;
	    'aria-errormessage'?: string | undefined;
	    'aria-expanded'?: boolean | "true" | "false" | undefined;
	    'aria-flowto'?: string | undefined;
	    'aria-grabbed'?: boolean | "true" | "false" | undefined;
	    'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "listbox" | "tree" | "grid" | undefined;
	    'aria-hidden'?: boolean | "true" | "false" | undefined;
	    'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
	    'aria-keyshortcuts'?: string | undefined;
	    'aria-labelledby'?: string | undefined;
	    'aria-level'?: number | undefined;
	    'aria-live'?: "off" | "assertive" | "polite" | undefined;
	    'aria-modal'?: boolean | "true" | "false" | undefined;
	    'aria-multiline'?: boolean | "true" | "false" | undefined;
	    'aria-multiselectable'?: boolean | "true" | "false" | undefined;
	    'aria-orientation'?: "horizontal" | "vertical" | undefined;
	    'aria-owns'?: string | undefined;
	    'aria-placeholder'?: string | undefined;
	    'aria-posinset'?: number | undefined;
	    'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
	    'aria-readonly'?: boolean | "true" | "false" | undefined;
	    'aria-relevant'?: "text" | "additions" | "additions text" | "all" | "removals" | undefined;
	    'aria-required'?: boolean | "true" | "false" | undefined;
	    'aria-roledescription'?: string | undefined;
	    'aria-rowcount'?: number | undefined;
	    'aria-rowindex'?: number | undefined;
	    'aria-rowspan'?: number | undefined;
	    'aria-selected'?: boolean | "true" | "false" | undefined;
	    'aria-setsize'?: number | undefined;
	    'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
	    'aria-valuemax'?: number | undefined;
	    'aria-valuemin'?: number | undefined;
	    'aria-valuenow'?: number | undefined;
	    'aria-valuetext'?: string | undefined;
	    children?: React.ReactNode;
	    dangerouslySetInnerHTML?: {
	        __html: string;
	    } | undefined;
	    onCopy?: ((event: React.ClipboardEvent<HTMLLIElement>) => void) | undefined;
	    onCopyCapture?: ((event: React.ClipboardEvent<HTMLLIElement>) => void) | undefined;
	    onCut?: ((event: React.ClipboardEvent<HTMLLIElement>) => void) | undefined;
	    onCutCapture?: ((event: React.ClipboardEvent<HTMLLIElement>) => void) | undefined;
	    onPaste?: ((event: React.ClipboardEvent<HTMLLIElement>) => void) | undefined;
	    onPasteCapture?: ((event: React.ClipboardEvent<HTMLLIElement>) => void) | undefined;
	    onCompositionEnd?: ((event: React.CompositionEvent<HTMLLIElement>) => void) | undefined;
	    onCompositionEndCapture?: ((event: React.CompositionEvent<HTMLLIElement>) => void) | undefined;
	    onCompositionStart?: ((event: React.CompositionEvent<HTMLLIElement>) => void) | undefined;
	    onCompositionStartCapture?: ((event: React.CompositionEvent<HTMLLIElement>) => void) | undefined;
	    onCompositionUpdate?: ((event: React.CompositionEvent<HTMLLIElement>) => void) | undefined;
	    onCompositionUpdateCapture?: ((event: React.CompositionEvent<HTMLLIElement>) => void) | undefined;
	    onFocus?: ((event: React.FocusEvent<HTMLLIElement>) => void) | undefined;
	    onFocusCapture?: ((event: React.FocusEvent<HTMLLIElement>) => void) | undefined;
	    onBlur?: ((event: React.FocusEvent<HTMLLIElement>) => void) | undefined;
	    onBlurCapture?: ((event: React.FocusEvent<HTMLLIElement>) => void) | undefined;
	    onChange?: ((event: React.FormEvent<HTMLLIElement>) => void) | undefined;
	    onChangeCapture?: ((event: React.FormEvent<HTMLLIElement>) => void) | undefined;
	    onBeforeInput?: ((event: React.FormEvent<HTMLLIElement>) => void) | undefined;
	    onBeforeInputCapture?: ((event: React.FormEvent<HTMLLIElement>) => void) | undefined;
	    onInput?: ((event: React.FormEvent<HTMLLIElement>) => void) | undefined;
	    onInputCapture?: ((event: React.FormEvent<HTMLLIElement>) => void) | undefined;
	    onReset?: ((event: React.FormEvent<HTMLLIElement>) => void) | undefined;
	    onResetCapture?: ((event: React.FormEvent<HTMLLIElement>) => void) | undefined;
	    onSubmit?: ((event: React.FormEvent<HTMLLIElement>) => void) | undefined;
	    onSubmitCapture?: ((event: React.FormEvent<HTMLLIElement>) => void) | undefined;
	    onInvalid?: ((event: React.FormEvent<HTMLLIElement>) => void) | undefined;
	    onInvalidCapture?: ((event: React.FormEvent<HTMLLIElement>) => void) | undefined;
	    onLoad?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onLoadCapture?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onError?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onErrorCapture?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onKeyDown?: ((event: React.KeyboardEvent<HTMLLIElement>) => void) | undefined;
	    onKeyDownCapture?: ((event: React.KeyboardEvent<HTMLLIElement>) => void) | undefined;
	    onKeyPress?: ((event: React.KeyboardEvent<HTMLLIElement>) => void) | undefined;
	    onKeyPressCapture?: ((event: React.KeyboardEvent<HTMLLIElement>) => void) | undefined;
	    onKeyUp?: ((event: React.KeyboardEvent<HTMLLIElement>) => void) | undefined;
	    onKeyUpCapture?: ((event: React.KeyboardEvent<HTMLLIElement>) => void) | undefined;
	    onAbort?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onAbortCapture?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onCanPlay?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onCanPlayCapture?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onCanPlayThrough?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onCanPlayThroughCapture?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onDurationChange?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onDurationChangeCapture?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onEmptied?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onEmptiedCapture?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onEncrypted?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onEncryptedCapture?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onEnded?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onEndedCapture?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onLoadedData?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onLoadedDataCapture?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onLoadedMetadata?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onLoadedMetadataCapture?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onLoadStart?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onLoadStartCapture?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onPause?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onPauseCapture?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onPlay?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onPlayCapture?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onPlaying?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onPlayingCapture?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onProgress?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onProgressCapture?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onRateChange?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onRateChangeCapture?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onSeeked?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onSeekedCapture?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onSeeking?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onSeekingCapture?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onStalled?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onStalledCapture?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onSuspend?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onSuspendCapture?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onTimeUpdate?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onTimeUpdateCapture?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onVolumeChange?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onVolumeChangeCapture?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onWaiting?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onWaitingCapture?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onAuxClick?: ((event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void) | undefined;
	    onAuxClickCapture?: ((event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void) | undefined;
	    onClick?: ((event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void) | undefined;
	    onClickCapture?: ((event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void) | undefined;
	    onContextMenu?: ((event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void) | undefined;
	    onContextMenuCapture?: ((event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void) | undefined;
	    onDoubleClick?: ((event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void) | undefined;
	    onDoubleClickCapture?: ((event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void) | undefined;
	    onDrag?: ((event: React.DragEvent<HTMLLIElement>) => void) | undefined;
	    onDragCapture?: ((event: React.DragEvent<HTMLLIElement>) => void) | undefined;
	    onDragEnd?: ((event: React.DragEvent<HTMLLIElement>) => void) | undefined;
	    onDragEndCapture?: ((event: React.DragEvent<HTMLLIElement>) => void) | undefined;
	    onDragEnter?: ((event: React.DragEvent<HTMLLIElement>) => void) | undefined;
	    onDragEnterCapture?: ((event: React.DragEvent<HTMLLIElement>) => void) | undefined;
	    onDragExit?: ((event: React.DragEvent<HTMLLIElement>) => void) | undefined;
	    onDragExitCapture?: ((event: React.DragEvent<HTMLLIElement>) => void) | undefined;
	    onDragLeave?: ((event: React.DragEvent<HTMLLIElement>) => void) | undefined;
	    onDragLeaveCapture?: ((event: React.DragEvent<HTMLLIElement>) => void) | undefined;
	    onDragOver?: ((event: React.DragEvent<HTMLLIElement>) => void) | undefined;
	    onDragOverCapture?: ((event: React.DragEvent<HTMLLIElement>) => void) | undefined;
	    onDragStart?: ((event: React.DragEvent<HTMLLIElement>) => void) | undefined;
	    onDragStartCapture?: ((event: React.DragEvent<HTMLLIElement>) => void) | undefined;
	    onDrop?: ((event: React.DragEvent<HTMLLIElement>) => void) | undefined;
	    onDropCapture?: ((event: React.DragEvent<HTMLLIElement>) => void) | undefined;
	    onMouseDown?: ((event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void) | undefined;
	    onMouseDownCapture?: ((event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void) | undefined;
	    onMouseEnter?: ((event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void) | undefined;
	    onMouseLeave?: ((event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void) | undefined;
	    onMouseMove?: ((event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void) | undefined;
	    onMouseMoveCapture?: ((event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void) | undefined;
	    onMouseOut?: ((event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void) | undefined;
	    onMouseOutCapture?: ((event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void) | undefined;
	    onMouseOver?: ((event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void) | undefined;
	    onMouseOverCapture?: ((event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void) | undefined;
	    onMouseUp?: ((event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void) | undefined;
	    onMouseUpCapture?: ((event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void) | undefined;
	    onSelect?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onSelectCapture?: ((event: React.SyntheticEvent<HTMLLIElement, Event>) => void) | undefined;
	    onTouchCancel?: ((event: React.TouchEvent<HTMLLIElement>) => void) | undefined;
	    onTouchCancelCapture?: ((event: React.TouchEvent<HTMLLIElement>) => void) | undefined;
	    onTouchEnd?: ((event: React.TouchEvent<HTMLLIElement>) => void) | undefined;
	    onTouchEndCapture?: ((event: React.TouchEvent<HTMLLIElement>) => void) | undefined;
	    onTouchMove?: ((event: React.TouchEvent<HTMLLIElement>) => void) | undefined;
	    onTouchMoveCapture?: ((event: React.TouchEvent<HTMLLIElement>) => void) | undefined;
	    onTouchStart?: ((event: React.TouchEvent<HTMLLIElement>) => void) | undefined;
	    onTouchStartCapture?: ((event: React.TouchEvent<HTMLLIElement>) => void) | undefined;
	    onPointerDown?: ((event: React.PointerEvent<HTMLLIElement>) => void) | undefined;
	    onPointerDownCapture?: ((event: React.PointerEvent<HTMLLIElement>) => void) | undefined;
	    onPointerMove?: ((event: React.PointerEvent<HTMLLIElement>) => void) | undefined;
	    onPointerMoveCapture?: ((event: React.PointerEvent<HTMLLIElement>) => void) | undefined;
	    onPointerUp?: ((event: React.PointerEvent<HTMLLIElement>) => void) | undefined;
	    onPointerUpCapture?: ((event: React.PointerEvent<HTMLLIElement>) => void) | undefined;
	    onPointerCancel?: ((event: React.PointerEvent<HTMLLIElement>) => void) | undefined;
	    onPointerCancelCapture?: ((event: React.PointerEvent<HTMLLIElement>) => void) | undefined;
	    onPointerEnter?: ((event: React.PointerEvent<HTMLLIElement>) => void) | undefined;
	    onPointerEnterCapture?: ((event: React.PointerEvent<HTMLLIElement>) => void) | undefined;
	    onPointerLeave?: ((event: React.PointerEvent<HTMLLIElement>) => void) | undefined;
	    onPointerLeaveCapture?: ((event: React.PointerEvent<HTMLLIElement>) => void) | undefined;
	    onPointerOver?: ((event: React.PointerEvent<HTMLLIElement>) => void) | undefined;
	    onPointerOverCapture?: ((event: React.PointerEvent<HTMLLIElement>) => void) | undefined;
	    onPointerOut?: ((event: React.PointerEvent<HTMLLIElement>) => void) | undefined;
	    onPointerOutCapture?: ((event: React.PointerEvent<HTMLLIElement>) => void) | undefined;
	    onGotPointerCapture?: ((event: React.PointerEvent<HTMLLIElement>) => void) | undefined;
	    onGotPointerCaptureCapture?: ((event: React.PointerEvent<HTMLLIElement>) => void) | undefined;
	    onLostPointerCapture?: ((event: React.PointerEvent<HTMLLIElement>) => void) | undefined;
	    onLostPointerCaptureCapture?: ((event: React.PointerEvent<HTMLLIElement>) => void) | undefined;
	    onScroll?: ((event: React.UIEvent<HTMLLIElement, UIEvent>) => void) | undefined;
	    onScrollCapture?: ((event: React.UIEvent<HTMLLIElement, UIEvent>) => void) | undefined;
	    onWheel?: ((event: React.WheelEvent<HTMLLIElement>) => void) | undefined;
	    onWheelCapture?: ((event: React.WheelEvent<HTMLLIElement>) => void) | undefined;
	    onAnimationStart?: ((event: React.AnimationEvent<HTMLLIElement>) => void) | undefined;
	    onAnimationStartCapture?: ((event: React.AnimationEvent<HTMLLIElement>) => void) | undefined;
	    onAnimationEnd?: ((event: React.AnimationEvent<HTMLLIElement>) => void) | undefined;
	    onAnimationEndCapture?: ((event: React.AnimationEvent<HTMLLIElement>) => void) | undefined;
	    onAnimationIteration?: ((event: React.AnimationEvent<HTMLLIElement>) => void) | undefined;
	    onAnimationIterationCapture?: ((event: React.AnimationEvent<HTMLLIElement>) => void) | undefined;
	    onTransitionEnd?: ((event: React.TransitionEvent<HTMLLIElement>) => void) | undefined;
	    onTransitionEndCapture?: ((event: React.TransitionEvent<HTMLLIElement>) => void) | undefined;
	} | {
	    className: string;
	    prepend: {} | null | undefined;
	    append: {} | null | undefined;
	    /**
	     * Displayed on the left (`prepend`).
	     * Object of `EuiIconProps` for display of the solution/application's logo
	     */
	    icon?: EuiIconProps | undefined;
	    /**
	     * Displayed on the right (`append`).
	     * Object of `EuiAvatarProps` for display of the space (default) or user
	     */
	    avatar?: (Pick<React.HTMLAttributes<HTMLDivElement>, "children" | "slot" | "style" | "title" | "prefix" | "className" | "id" | "lang" | "role" | "tabIndex" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "placeholder" | "spellCheck" | "translate" | "radioGroup" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is"> & CommonProps & import ("@elastic/eui/src/components/common").DisambiguateSet<(import ("@elastic/eui/src/components/common").DisambiguateSet<{
	        initials?: string | undefined;
	        initialsLength?: 1 | 2 | undefined;
	    }, {
	        imageUrl: string;
	    }> & {
	        imageUrl: string;
	    }) | (import ("@elastic/eui/src/components/common").DisambiguateSet<{
	        imageUrl: string;
	    }, {
	        initials?: string | undefined;
	        initialsLength?: 1 | 2 | undefined;
	    }> & {
	        initials?: string | undefined;
	        initialsLength?: 1 | 2 | undefined;
	    }), {
	        iconType: import ("@elastic/eui/src/components/icon").IconType;
	        iconSize?: "s" | "m" | "l" | "xl" | "original" | "xxl" | undefined;
	        iconColor?: string | null | undefined;
	    }> & {
	        iconType: import ("@elastic/eui/src/components/icon").IconType;
	        iconSize?: "s" | "m" | "l" | "xl" | "original" | "xxl" | undefined;
	        iconColor?: string | null | undefined;
	    } & {
	        name: string;
	        color?: string | null | undefined;
	        type?: "space" | "user" | undefined;
	        size?: "s" | "m" | "l" | "xl" | undefined;
	        isDisabled?: boolean | undefined;
	    }) | (Pick<React.HTMLAttributes<HTMLDivElement>, "children" | "slot" | "style" | "title" | "prefix" | "className" | "id" | "lang" | "role" | "tabIndex" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "placeholder" | "spellCheck" | "translate" | "radioGroup" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is"> & CommonProps & import ("@elastic/eui/src/components/common").DisambiguateSet<{
	        iconType: import ("@elastic/eui/src/components/icon").IconType;
	        iconSize?: "s" | "m" | "l" | "xl" | "original" | "xxl" | undefined;
	        iconColor?: string | null | undefined;
	    }, (import ("@elastic/eui/src/components/common").DisambiguateSet<{
	        initials?: string | undefined;
	        initialsLength?: 1 | 2 | undefined;
	    }, {
	        imageUrl: string;
	    }> & {
	        imageUrl: string;
	    }) | (import ("@elastic/eui/src/components/common").DisambiguateSet<{
	        imageUrl: string;
	    }, {
	        initials?: string | undefined;
	        initialsLength?: 1 | 2 | undefined;
	    }> & {
	        initials?: string | undefined;
	        initialsLength?: 1 | 2 | undefined;
	    })> & import ("@elastic/eui/src/components/common").DisambiguateSet<{
	        initials?: string | undefined;
	        initialsLength?: 1 | 2 | undefined;
	    }, {
	        imageUrl: string;
	    }> & {
	        imageUrl: string;
	    } & {
	        name: string;
	        color?: string | null | undefined;
	        type?: "space" | "user" | undefined;
	        size?: "s" | "m" | "l" | "xl" | undefined;
	        isDisabled?: boolean | undefined;
	    }) | (Pick<React.HTMLAttributes<HTMLDivElement>, "children" | "slot" | "style" | "title" | "prefix" | "className" | "id" | "lang" | "role" | "tabIndex" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "placeholder" | "spellCheck" | "translate" | "radioGroup" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is"> & CommonProps & import ("@elastic/eui/src/components/common").DisambiguateSet<{
	        iconType: import ("@elastic/eui/src/components/icon").IconType;
	        iconSize?: "s" | "m" | "l" | "xl" | "original" | "xxl" | undefined;
	        iconColor?: string | null | undefined;
	    }, (import ("@elastic/eui/src/components/common").DisambiguateSet<{
	        initials?: string | undefined;
	        initialsLength?: 1 | 2 | undefined;
	    }, {
	        imageUrl: string;
	    }> & {
	        imageUrl: string;
	    }) | (import ("@elastic/eui/src/components/common").DisambiguateSet<{
	        imageUrl: string;
	    }, {
	        initials?: string | undefined;
	        initialsLength?: 1 | 2 | undefined;
	    }> & {
	        initials?: string | undefined;
	        initialsLength?: 1 | 2 | undefined;
	    })> & import ("@elastic/eui/src/components/common").DisambiguateSet<{
	        imageUrl: string;
	    }, {
	        initials?: string | undefined;
	        initialsLength?: 1 | 2 | undefined;
	    }> & {
	        initials?: string | undefined;
	        initialsLength?: 1 | 2 | undefined;
	    } & {
	        name: string;
	        color?: string | null | undefined;
	        type?: "space" | "user" | undefined;
	        size?: "s" | "m" | "l" | "xl" | undefined;
	        isDisabled?: boolean | undefined;
	    }) | undefined;
	    /**
	     * An array of inline #MetaData displayed beneath the label and separated by bullets.
	     */
	    meta?: EuiSelectableTemplateSitewideMetaData[] | undefined;
	    data?: {
	        [key: string]: any;
	    } | undefined;
	    label: string;
	    id?: undefined;
	    'aria-label'?: string | undefined;
	    ref?: ((optionIndex: number) => void) | undefined;
	    key: string;
	    'data-test-subj'?: string | undefined;
	    disabled?: boolean | undefined;
	    checked?: "off" | "on" | undefined;
	    searchableLabel?: string | undefined;
	    defaultChecked?: boolean | undefined;
	    defaultValue?: string | number | string[] | undefined;
	    suppressContentEditableWarning?: boolean | undefined;
	    suppressHydrationWarning?: boolean | undefined;
	    accessKey?: string | undefined;
	    contentEditable?: boolean | "inherit" | "true" | "false" | undefined;
	    contextMenu?: string | undefined;
	    dir?: string | undefined;
	    draggable?: boolean | "true" | "false" | undefined;
	    hidden?: boolean | undefined;
	    lang?: string | undefined;
	    placeholder?: string | undefined;
	    slot?: string | undefined;
	    spellCheck?: boolean | "true" | "false" | undefined;
	    style?: React.CSSProperties | undefined;
	    tabIndex?: number | undefined;
	    title: string;
	    translate?: "no" | "yes" | undefined;
	    radioGroup?: string | undefined;
	    role?: string | undefined;
	    about?: string | undefined;
	    datatype?: string | undefined;
	    inlist?: any;
	    prefix?: string | undefined;
	    property?: string | undefined;
	    resource?: string | undefined;
	    typeof?: string | undefined;
	    vocab?: string | undefined;
	    autoCapitalize?: string | undefined;
	    autoCorrect?: string | undefined;
	    autoSave?: string | undefined;
	    color?: string | undefined;
	    itemProp?: string | undefined;
	    itemScope?: boolean | undefined;
	    itemType?: string | undefined;
	    itemID?: string | undefined;
	    itemRef?: string | undefined;
	    results?: number | undefined;
	    security?: string | undefined;
	    unselectable?: "off" | "on" | undefined;
	    inputMode?: "search" | "text" | "none" | "email" | "tel" | "url" | "numeric" | "decimal" | undefined;
	    is?: string | undefined;
	    'aria-activedescendant'?: string | undefined;
	    'aria-atomic'?: boolean | "true" | "false" | undefined;
	    'aria-autocomplete'?: "both" | "none" | "inline" | "list" | undefined;
	    'aria-busy'?: boolean | "true" | "false" | undefined;
	    'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
	    'aria-colcount'?: number | undefined;
	    'aria-colindex'?: number | undefined;
	    'aria-colspan'?: number | undefined;
	    'aria-controls'?: string | undefined;
	    'aria-current'?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date" | undefined;
	    'aria-describedby'?: string | undefined;
	    'aria-details'?: string | undefined;
	    'aria-disabled'?: boolean | "true" | "false" | undefined;
	    'aria-dropeffect'?: "link" | "none" | "copy" | "execute" | "move" | "popup" | undefined;
	    'aria-errormessage'?: string | undefined;
	    'aria-expanded'?: boolean | "true" | "false" | undefined;
	    'aria-flowto'?: string | undefined;
	    'aria-grabbed'?: boolean | "true" | "false" | undefined;
	    'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "listbox" | "tree" | "grid" | undefined;
	    'aria-hidden'?: boolean | "true" | "false" | undefined;
	    'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
	    'aria-keyshortcuts'?: string | undefined;
	    'aria-labelledby'?: string | undefined;
	    'aria-level'?: number | undefined;
	    'aria-live'?: "off" | "assertive" | "polite" | undefined;
	    'aria-modal'?: boolean | "true" | "false" | undefined;
	    'aria-multiline'?: boolean | "true" | "false" | undefined;
	    'aria-multiselectable'?: boolean | "true" | "false" | undefined;
	    'aria-orientation'?: "horizontal" | "vertical" | undefined;
	    'aria-owns'?: string | undefined;
	    'aria-placeholder'?: string | undefined;
	    'aria-posinset'?: number | undefined;
	    'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
	    'aria-readonly'?: boolean | "true" | "false" | undefined;
	    'aria-relevant'?: "text" | "additions" | "additions text" | "all" | "removals" | undefined;
	    'aria-required'?: boolean | "true" | "false" | undefined;
	    'aria-roledescription'?: string | undefined;
	    'aria-rowcount'?: number | undefined;
	    'aria-rowindex'?: number | undefined;
	    'aria-rowspan'?: number | undefined;
	    'aria-selected'?: boolean | "true" | "false" | undefined;
	    'aria-setsize'?: number | undefined;
	    'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
	    'aria-valuemax'?: number | undefined;
	    'aria-valuemin'?: number | undefined;
	    'aria-valuenow'?: number | undefined;
	    'aria-valuetext'?: string | undefined;
	    children?: React.ReactNode;
	    dangerouslySetInnerHTML?: {
	        __html: string;
	    } | undefined;
	    onCopy?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
	    onCopyCapture?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
	    onCut?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
	    onCutCapture?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
	    onPaste?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
	    onPasteCapture?: ((event: React.ClipboardEvent<HTMLDivElement>) => void) | undefined;
	    onCompositionEnd?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
	    onCompositionEndCapture?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
	    onCompositionStart?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
	    onCompositionStartCapture?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
	    onCompositionUpdate?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
	    onCompositionUpdateCapture?: ((event: React.CompositionEvent<HTMLDivElement>) => void) | undefined;
	    onFocus?: ((event: React.FocusEvent<HTMLDivElement>) => void) | undefined;
	    onFocusCapture?: ((event: React.FocusEvent<HTMLDivElement>) => void) | undefined;
	    onBlur?: ((event: React.FocusEvent<HTMLDivElement>) => void) | undefined;
	    onBlurCapture?: ((event: React.FocusEvent<HTMLDivElement>) => void) | undefined;
	    onChange?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
	    onChangeCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
	    onBeforeInput?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
	    onBeforeInputCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
	    onInput?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
	    onInputCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
	    onReset?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
	    onResetCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
	    onSubmit?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
	    onSubmitCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
	    onInvalid?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
	    onInvalidCapture?: ((event: React.FormEvent<HTMLDivElement>) => void) | undefined;
	    onLoad?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onLoadCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onError?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onErrorCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onKeyDown?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
	    onKeyDownCapture?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
	    onKeyPress?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
	    onKeyPressCapture?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
	    onKeyUp?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
	    onKeyUpCapture?: ((event: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
	    onAbort?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onAbortCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onCanPlay?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onCanPlayCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onCanPlayThrough?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onCanPlayThroughCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onDurationChange?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onDurationChangeCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onEmptied?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onEmptiedCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onEncrypted?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onEncryptedCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onEnded?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onEndedCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onLoadedData?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onLoadedDataCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onLoadedMetadata?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onLoadedMetadataCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onLoadStart?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onLoadStartCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onPause?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onPauseCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onPlay?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onPlayCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onPlaying?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onPlayingCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onProgress?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onProgressCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onRateChange?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onRateChangeCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onSeeked?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onSeekedCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onSeeking?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onSeekingCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onStalled?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onStalledCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onSuspend?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onSuspendCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onTimeUpdate?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onTimeUpdateCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onVolumeChange?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onVolumeChangeCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onWaiting?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onWaitingCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onAuxClick?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
	    onAuxClickCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
	    onClick?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
	    onClickCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
	    onContextMenu?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
	    onContextMenuCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
	    onDoubleClick?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
	    onDoubleClickCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
	    onDrag?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
	    onDragCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
	    onDragEnd?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
	    onDragEndCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
	    onDragEnter?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
	    onDragEnterCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
	    onDragExit?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
	    onDragExitCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
	    onDragLeave?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
	    onDragLeaveCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
	    onDragOver?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
	    onDragOverCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
	    onDragStart?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
	    onDragStartCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
	    onDrop?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
	    onDropCapture?: ((event: React.DragEvent<HTMLDivElement>) => void) | undefined;
	    onMouseDown?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
	    onMouseDownCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
	    onMouseEnter?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
	    onMouseLeave?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
	    onMouseMove?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
	    onMouseMoveCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
	    onMouseOut?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
	    onMouseOutCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
	    onMouseOver?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
	    onMouseOverCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
	    onMouseUp?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
	    onMouseUpCapture?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
	    onSelect?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onSelectCapture?: ((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | undefined;
	    onTouchCancel?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
	    onTouchCancelCapture?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
	    onTouchEnd?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
	    onTouchEndCapture?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
	    onTouchMove?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
	    onTouchMoveCapture?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
	    onTouchStart?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
	    onTouchStartCapture?: ((event: React.TouchEvent<HTMLDivElement>) => void) | undefined;
	    onPointerDown?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
	    onPointerDownCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
	    onPointerMove?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
	    onPointerMoveCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
	    onPointerUp?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
	    onPointerUpCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
	    onPointerCancel?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
	    onPointerCancelCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
	    onPointerEnter?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
	    onPointerEnterCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
	    onPointerLeave?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
	    onPointerLeaveCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
	    onPointerOver?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
	    onPointerOverCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
	    onPointerOut?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
	    onPointerOutCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
	    onGotPointerCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
	    onGotPointerCaptureCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
	    onLostPointerCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
	    onLostPointerCaptureCapture?: ((event: React.PointerEvent<HTMLDivElement>) => void) | undefined;
	    onScroll?: ((event: React.UIEvent<HTMLDivElement, UIEvent>) => void) | undefined;
	    onScrollCapture?: ((event: React.UIEvent<HTMLDivElement, UIEvent>) => void) | undefined;
	    onWheel?: ((event: React.WheelEvent<HTMLDivElement>) => void) | undefined;
	    onWheelCapture?: ((event: React.WheelEvent<HTMLDivElement>) => void) | undefined;
	    onAnimationStart?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
	    onAnimationStartCapture?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
	    onAnimationEnd?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
	    onAnimationEndCapture?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
	    onAnimationIteration?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
	    onAnimationIterationCapture?: ((event: React.AnimationEvent<HTMLDivElement>) => void) | undefined;
	    onTransitionEnd?: ((event: React.TransitionEvent<HTMLDivElement>) => void) | undefined;
	    onTransitionEndCapture?: ((event: React.TransitionEvent<HTMLDivElement>) => void) | undefined;
	    isGroupLabel: true;
	})[];
	export const euiSelectableTemplateSitewideRenderOptions: (option: EuiSelectableTemplateSitewideOption, searchValue: string) => JSX.Element;

}
declare module '@elastic/eui/src/components/selectable/selectable_templates/selectable_template_sitewide' {
	import { FunctionComponent, ReactNode, CSSProperties, ReactElement } from 'react';
	import { EuiSelectableProps } from '@elastic/eui/src/components/selectable/selectable';
	import { Props as PopoverProps } from '@elastic/eui/src/components/popover/popover';
	import { EuiSelectableTemplateSitewideOption } from '@elastic/eui/src/components/selectable/selectable_templates/selectable_template_sitewide_option';
	import { EuiBreakpointSize } from '@elastic/eui/src/services/breakpoint';
	export type EuiSelectableTemplateSitewideProps = Partial<Omit<EuiSelectableProps<{
	    [key: string]: any;
	}>, 'options'>> & {
	    /**
	     * Extends the typical EuiSelectable #Options with the addition of pre-composed elements
	     * such as `icon`, `avatar`and `meta`
	     */
	    options: EuiSelectableTemplateSitewideOption[];
	    /**
	     * Override some of the EuiPopover props housing the list.
	     * The default width is `600`
	     */
	    popoverProps?: Partial<PopoverProps> & {
	        width?: CSSProperties['width'];
	    };
	    /**
	     * Optionally provide a title for the popover
	     */
	    popoverTitle?: ReactNode;
	    /**
	     * Optionally provide a footer for the popover
	     */
	    popoverFooter?: ReactNode;
	    /**
	     * Optionally provide a separate button for toggling the display of the popover.
	     */
	    popoverButton?: ReactElement;
	    /**
	     * Pass an array of named breakpoints for which to show the `popoverButton`.
	     * If `undefined`, the `popoverButton` will always show (if provided)
	     */
	    popoverButtonBreakpoints?: EuiBreakpointSize[];
	};
	export const EuiSelectableTemplateSitewide: FunctionComponent<EuiSelectableTemplateSitewideProps>;

}
declare module '@elastic/eui/src/components/selectable/selectable_templates' {
	export { EuiSelectableTemplateSitewide, EuiSelectableTemplateSitewideProps, } from '@elastic/eui/src/components/selectable/selectable_templates/selectable_template_sitewide';
	export { EuiSelectableTemplateSitewideOption, EuiSelectableTemplateSitewideMetaData, euiSelectableTemplateSitewideFormatOptions, euiSelectableTemplateSitewideRenderOptions, } from '@elastic/eui/src/components/selectable/selectable_templates/selectable_template_sitewide_option';

}
declare module '@elastic/eui/src/components/selectable' {
	export { EuiSelectable, EuiSelectableProps, EuiSelectableSearchableSearchProps, } from '@elastic/eui/src/components/selectable/selectable';
	export { EuiSelectableList, EuiSelectableListProps, EuiSelectableListItem, EuiSelectableListItemProps, EuiSelectableOptionsListProps, } from '@elastic/eui/src/components/selectable/selectable_list';
	export { EuiSelectableMessage, EuiSelectableMessageProps, } from '@elastic/eui/src/components/selectable/selectable_message';
	export { EuiSelectableOption } from '@elastic/eui/src/components/selectable/selectable_option';
	export { EuiSelectableSearch, EuiSelectableSearchProps, } from '@elastic/eui/src/components/selectable/selectable_search';
	export { EuiSelectableTemplateSitewide, EuiSelectableTemplateSitewideProps, EuiSelectableTemplateSitewideOption, EuiSelectableTemplateSitewideMetaData, euiSelectableTemplateSitewideRenderOptions, } from '@elastic/eui/src/components/selectable/selectable_templates';

}
declare module '@elastic/eui/src/components/side_nav/side_nav_item' {
	import { ReactNode, ReactElement, MouseEventHandler } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	/**
	 * The props that are exposed to, or altered for, the consumer
	 * for use in the object of items in `EuiSideNav`
	 * can be found in the `side_nave_types.ts` file.
	 */
	export type _EuiSideNavItemButtonProps = CommonProps & {
	    /**
	     * Is an optional string to be passed as the navigation item's `href` prop,
	     * and by default it will force rendering of the item as an `<a>`
	     */
	    href?: string;
	    target?: string;
	    rel?: string;
	    /**
	     * Callback function to be passed as the navigation item's `onClick` prop,
	     * and by default it will force rendering of the item as a `<button>` instead of a link
	     */
	    onClick?: MouseEventHandler<HTMLButtonElement | HTMLElement>;
	    children: ReactNode;
	    disabled?: boolean;
	};
	export interface _EuiSideNavItemProps {
	    /**
	     * React node which will be rendered as a small icon to the
	     * left of the navigation item text
	     */
	    icon?: ReactElement;
	    /**
	     * If set to true it will render the item in a visible
	     * "selected" state, and will force all ancestor navigation items
	     * to render in an "open" state
	     */
	    isSelected?: boolean;
	    /**
	     * Enhances the whole item's section (including nested items) with
	     * a slight background and bold top item
	     */
	    emphasize?: boolean;
	    /**
	     * Restrict the item's text length to a single line
	     */
	    truncate?: boolean;
	    /**
	     * Passed to the actual `.euiSideNavItemButton` element
	     */
	    buttonClassName?: string;
	    items?: ReactNode;
	    isOpen?: boolean;
	    isParent?: boolean;
	    depth?: number;
	    childrenOnly?: boolean;
	} type ExcludeEuiSideNavItemProps<T> = Pick<T, Exclude<keyof T, keyof _EuiSideNavItemProps | 'renderItem'>>; type OmitEuiSideNavItemProps<T> = {
	    [K in keyof ExcludeEuiSideNavItemProps<T>]: T[K];
	};
	export type RenderItem<T> = (props: OmitEuiSideNavItemProps<T> & _EuiSideNavItemButtonProps) => JSX.Element;
	export type EuiSideNavItemProps<T> = T extends {
	    renderItem: Function;
	} ? T & {
	    renderItem: RenderItem<T>;
	} : T;
	export function EuiSideNavItem<T extends _EuiSideNavItemButtonProps & _EuiSideNavItemProps & {
	    renderItem?: (props: any) => JSX.Element;
	}>({ isOpen, isSelected, isParent, icon, onClick, href: _href, rel, target, items, children, renderItem: RenderItem, depth, className, truncate, emphasize, buttonClassName, childrenOnly, ...rest }: EuiSideNavItemProps<T>): JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/side_nav/side_nav_types' {
	import { ReactNode } from 'react';
	import { RenderItem, _EuiSideNavItemButtonProps, _EuiSideNavItemProps } from '@elastic/eui/src/components/side_nav/side_nav_item';
	export interface EuiSideNavItemType<T> extends Omit<_EuiSideNavItemButtonProps, 'children'>, Omit<_EuiSideNavItemProps, 'isParent' | 'depth' | 'isOpen' | 'childrenOnly'> {
	    /**
	     * A value that is passed to React as the `key` for this item
	     */
	    id: string | number;
	    /**
	     * If set to true it will force the item to display in an "open" state at all times.
	     */
	    forceOpen?: boolean;
	    /**
	     * Array containing additional item objects, representing nested children of this navigation item.
	     */
	    items?: Array<EuiSideNavItemType<T>>;
	    /**
	     * React node representing the text to render for this item (usually a string will suffice).
	     */
	    name: ReactNode;
	    /**
	     * Function overriding default rendering for this navigation item — when called, it should return a React node representing a replacement navigation item.
	     */
	    renderItem?: RenderItem<T>;
	}

}
declare module '@elastic/eui/src/components/side_nav/side_nav' {
	import { Component, ReactNode, MouseEventHandler } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { RenderItem } from '@elastic/eui/src/components/side_nav/side_nav_item';
	import { EuiSideNavItemType } from '@elastic/eui/src/components/side_nav/side_nav_types';
	import { EuiTitleProps } from '@elastic/eui/src/components/title';
	import { EuiBreakpointSize } from '@elastic/eui/src/services';
	export type EuiSideNavHeadingProps = Partial<EuiTitleProps> & {
	    /**
	     * The actual HTML heading element to wrap the `heading`.
	     * Default is `h2`
	     */
	    element?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'span';
	    /**
	     * For best accessibility, `<nav>` elements should have a nested heading. But you can hide this element if it's redundent from something else (except on mobile).
	     */
	    screenReaderOnly?: boolean;
	};
	export type EuiSideNavProps<T = {}> = T & CommonProps & {
	    /**
	     * `children` are not rendered. Use `items` to specify navigation items instead.
	     */
	    children?: never;
	    /**
	     * Class names to be merged into the final `className` property.
	     */
	    className?: string;
	    /**
	     * Creates an associated heading element and uses the same node as default for `mobileTitle`
	     */
	    heading?: ReactNode;
	    /**
	     * Adds a couple extra #EuiSideNavHeading props and extends the props of EuiTitle that wraps the `heading`
	     */
	    headingProps?: EuiSideNavHeadingProps;
	    /**
	     * When called, toggles visibility of the navigation menu at mobile responsive widths. The callback should set the `isOpenOnMobile` prop to actually toggle navigation visibility.
	     */
	    toggleOpenOnMobile?: MouseEventHandler<HTMLButtonElement>;
	    /**
	     * If `true`, the navigation menu will be open at mobile device widths. Use in conjunction with the `toggleOpenOnMobile` prop.
	     */
	    isOpenOnMobile?: boolean;
	    /**
	     * A React node to render at mobile responsive widths, representing the title of this navigation menu.
	     */
	    mobileTitle?: ReactNode;
	    /**
	     * Array of breakpoint names for when to show the mobile version.
	     * Set to `undefined` to remove responsive behavior
	     */
	    mobileBreakpoints?: EuiBreakpointSize[];
	    /**
	     *  An array of #EuiSideNavItem objects. Lists navigation menu items.
	     */
	    items: Array<EuiSideNavItemType<T>>;
	    /**
	     * Overrides default navigation menu item rendering. When called, it should return a React node representing a replacement navigation item.
	     */
	    renderItem?: RenderItem<T>;
	    /**
	     * Truncates the text of all items to stick to a single line
	     */
	    truncate?: boolean;
	};
	export class EuiSideNav<T> extends Component<EuiSideNavProps<T>> {
	    generateId: (idSuffix?: string) => string;
	    static defaultProps: {
	        items: never[];
	        mobileBreakpoints: string[];
	    };
	    isItemOpen: (item: EuiSideNavItemType<T>) => boolean;
	    renderTree: (items: Array<EuiSideNavItemType<T>>, depth?: number) => JSX.Element[];
	    render(): JSX.Element;
	}

}
declare module '@elastic/eui/src/components/side_nav' {
	export { EuiSideNav, EuiSideNavProps } from '@elastic/eui/src/components/side_nav/side_nav';
	export * from '@elastic/eui/src/components/side_nav/side_nav_types';

}
declare module '@elastic/eui/src/components/stat/stat' {
	import { HTMLAttributes, FunctionComponent, ReactNode } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiTitleSize } from '@elastic/eui/src/components/title/title'; const colorToClassNameMap: {
	    default: null;
	    subdued: string;
	    primary: string;
	    success: string;
	    danger: string;
	    accent: string;
	};
	export const COLORS: ("default" | "primary" | "success" | "accent" | "danger" | "subdued")[]; const textAlignToClassNameMap: {
	    left: string;
	    center: string;
	    right: string;
	};
	export const isColorClass: (input: string) => input is "default" | "primary" | "success" | "accent" | "danger" | "subdued";
	export const ALIGNMENTS: import ("@elastic/eui").HorizontalAlignment[];
	export interface EuiStatProps {
	    /**
	     * Set the description (label) text
	     */
	    description: ReactNode;
	    /**
	     * Will hide the title with an animation until false
	     */
	    isLoading?: boolean;
	    /**
	     * Flips the order of the description and title
	     */
	    reverse?: boolean;
	    textAlign?: keyof typeof textAlignToClassNameMap;
	    /**
	     * The (value) text
	     */
	    title: ReactNode;
	    /**
	     * The color of the title text
	     */
	    titleColor?: keyof typeof colorToClassNameMap | string;
	    /**
	     * Size of the title. See EuiTitle for options ('s', 'm', 'l'... etc)
	     */
	    titleSize?: EuiTitleSize;
	    /**
	     * HTML Element to be used for title
	     */
	    titleElement?: string;
	    /**
	     * HTML Element to be used for description
	     */
	    descriptionElement?: string;
	}
	export const EuiStat: FunctionComponent<CommonProps & Omit<HTMLAttributes<HTMLDivElement>, 'title'> & EuiStatProps>;
	export {};

}
declare module '@elastic/eui/src/components/stat' {
	export { EuiStat, EuiStatProps } from '@elastic/eui/src/components/stat/stat';

}
declare module '@elastic/eui/src/components/steps/step_strings' {
	 type Props = {
	    number?: number;
	    title?: string;
	};
	export const useI18nStep: ({ number, title }: Props) => string;
	export const useI18nCompleteStep: ({ number, title }: Props) => string;
	export const useI18nWarningStep: ({ number, title }: Props) => string;
	export const useI18nErrorsStep: ({ number, title }: Props) => string;
	export const useI18nIncompleteStep: ({ number, title }: Props) => string;
	export const useI18nDisabledStep: ({ number, title }: Props) => string;
	export const useI18nLoadingStep: ({ number, title }: Props) => string;
	export const useI18nCurrentStep: ({ number, title }: Props) => string;
	export {};

}
declare module '@elastic/eui/src/components/steps/step_number' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiStepProps } from '@elastic/eui/src/components/steps/step';
	export const STATUS: ("warning" | "danger" | "disabled" | "current" | "loading" | "incomplete" | "complete")[];
	export type EuiStepStatus = typeof STATUS[number];
	export interface EuiStepNumberProps extends CommonProps, HTMLAttributes<HTMLDivElement> {
	    /**
	     * May replace the number provided in props.number with alternate styling
	     */
	    status?: EuiStepStatus;
	    number?: number;
	    /**
	     * **DEPRECATED IN AMSTERDAM**
	     * Uses a border and removes the step number.
	     */
	    isHollow?: boolean;
	    /**
	     * Title sizing equivalent to EuiTitle, but only `m`, `s` and `xs`. Defaults to `s`
	     */
	    titleSize?: EuiStepProps['titleSize'];
	}
	export const EuiStepNumber: FunctionComponent<EuiStepNumberProps>;

}
declare module '@elastic/eui/src/components/steps/step' {
	import { FunctionComponent, HTMLAttributes, ReactNode } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiTitleProps } from '@elastic/eui/src/components/title';
	import { EuiStepStatus } from '@elastic/eui/src/components/steps/step_number';
	export interface EuiStepInterface {
	    /**
	     * ReactNode to render as this component's content
	     */
	    children: ReactNode;
	    /**
	     * The HTML tag used for the title
	     */
	    headingElement?: string;
	    /**
	     * The number of the step in the list of steps
	     */
	    step?: number;
	    title: string;
	    /**
	     * May replace the number provided in props.step with alternate styling.
	     */
	    status?: EuiStepStatus;
	    /**
	     * Title sizing equivalent to EuiTitle, but only `m`, `s` and `xs`. Defaults to `s`
	     */
	    titleSize?: Exclude<EuiTitleProps['size'], 'xxxs' | 'xxs' | 'l'>;
	}
	export type EuiStepProps = CommonProps & Omit<HTMLAttributes<HTMLDivElement>, 'title'> & EuiStepInterface;
	export const EuiStep: FunctionComponent<EuiStepProps>;

}
declare module '@elastic/eui/src/components/steps/steps' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiStepProps } from '@elastic/eui/src/components/steps/step';
	export type EuiContainedStepProps = Omit<EuiStepProps, 'step'>;
	export interface EuiStepsProps extends CommonProps, HTMLAttributes<HTMLDivElement> {
	    /**
	     * An array of `EuiStep` objects excluding the `step` prop
	     */
	    steps: EuiContainedStepProps[];
	    /**
	     * The number the steps should begin from
	     */
	    firstStepNumber?: number;
	    /**
	     * The HTML tag used for the title
	     */
	    headingElement?: string;
	    /**
	     * Title sizing equivalent to EuiTitle, but only `m`, `s` and `xs`. Defaults to `s`
	     */
	    titleSize?: EuiStepProps['titleSize'];
	}
	export const EuiSteps: FunctionComponent<EuiStepsProps>;

}
declare module '@elastic/eui/src/components/steps/sub_steps' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiSubStepsProps = FunctionComponent<HTMLAttributes<HTMLDivElement> & CommonProps>;
	export const EuiSubSteps: EuiSubStepsProps;

}
declare module '@elastic/eui/src/components/steps/step_horizontal' {
	import { ButtonHTMLAttributes, FunctionComponent, MouseEventHandler } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiStepStatus } from '@elastic/eui/src/components/steps/step_number';
	export interface EuiStepHorizontalProps extends Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'onClick'>, CommonProps {
	    /**
	     * **DEPRECATED: Use `status = 'current'` instead**
	     * Adds to the line before the indicator for showing current progress
	     */
	    isSelected?: boolean;
	    /**
	     * **DEPRECATED: Use `status = 'complete'` instead**
	     * Adds to the line after the indicator for showing current progress
	     */
	    isComplete?: boolean;
	    onClick: MouseEventHandler<HTMLButtonElement>;
	    /**
	     * Makes the whole step button disabled.
	     */
	    disabled?: boolean;
	    /**
	     * The number of the step in the list of steps
	     */
	    step?: number;
	    title?: string;
	    /**
	     * Visual representation of the step number indicator.
	     * May replace the number provided in props.step with alternate styling.
	     * The `isSelected`, `isComplete`, and `disabled` props will override these.
	     */
	    status?: EuiStepStatus;
	}
	export const EuiStepHorizontal: FunctionComponent<EuiStepHorizontalProps>;

}
declare module '@elastic/eui/src/components/steps/steps_horizontal' {
	import { FunctionComponent, OlHTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiStepHorizontalProps } from '@elastic/eui/src/components/steps/step_horizontal';
	export interface EuiStepsHorizontalProps extends OlHTMLAttributes<HTMLOListElement>, CommonProps {
	    /**
	     * An array of `EuiStepHorizontal` objects excluding the `step` prop
	     */
	    steps: Array<Omit<EuiStepHorizontalProps, 'step'>>;
	}
	export const EuiStepsHorizontal: FunctionComponent<EuiStepsHorizontalProps>;

}
declare module '@elastic/eui/src/components/steps' {
	export { EuiStep, EuiStepProps } from '@elastic/eui/src/components/steps/step';
	export { EuiSteps, EuiStepsProps } from '@elastic/eui/src/components/steps/steps';
	export { EuiSubSteps, EuiSubStepsProps } from '@elastic/eui/src/components/steps/sub_steps';
	export { EuiStepHorizontal } from '@elastic/eui/src/components/steps/step_horizontal';
	export { EuiStepsHorizontal, EuiStepsHorizontalProps, } from '@elastic/eui/src/components/steps/steps_horizontal';
	export { EuiStepStatus, EuiStepNumber, EuiStepNumberProps, } from '@elastic/eui/src/components/steps/step_number';

}
declare module '@elastic/eui/src/components/suggest/suggest_item' {
	import React, { FunctionComponent, HTMLAttributes, ButtonHTMLAttributes, MouseEventHandler } from 'react';
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common';
	import { IconType } from '@elastic/eui/src/components/icon';
	interface Type {
	    iconType: IconType;
	    color: string | keyof typeof colorToClassNameMap;
	}
	interface EuiSuggestItemPropsBase {
	    /**
	     * Takes 'iconType' for EuiIcon and 'color'. 'color' can be tint1 through tint9.
	     */
	    type: Type;
	    /**
	     * Label or primary text.
	     */
	    label: string;
	    /**
	     * Description or secondary text (optional).
	     */
	    description?: string;
	    /**
	     * Label display is 'fixed' by default. Label will increase its width beyond 50% if needed with 'expand'.
	     */
	    labelDisplay?: keyof typeof labelDisplayToClassMap;
	    /**
	     * Width of 'label' when 'labelDisplay' is set to 'fixed'.
	     * Accepts multiples of 10, from 20 to 90. Defaults to 50.
	     */
	    labelWidth?: LabelWidthSize;
	    /**
	     * Set the way in which 'description' is displayed, defaults to 'truncate'.
	     */
	    descriptionDisplay?: keyof typeof descriptionDisplayToClassMap;
	} type PropsForDiv = Omit<HTMLAttributes<HTMLDivElement>, 'onClick'>; type PropsForButton = Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'onClick' | 'type'> & {
	    onClick: MouseEventHandler<HTMLButtonElement> | undefined;
	};
	export type EuiSuggestItemProps = CommonProps & EuiSuggestItemPropsBase & ExclusiveUnion<PropsForDiv, PropsForButton>;
	interface ColorToClassMap {
	    tint0: string;
	    tint1: string;
	    tint2: string;
	    tint3: string;
	    tint4: string;
	    tint5: string;
	    tint6: string;
	    tint7: string;
	    tint8: string;
	    tint9: string;
	    tint10: string;
	    [key: string]: string;
	} type LabelWidthSize = '20' | '30' | '40' | '50' | '60' | '70' | '80' | '90'; const colorToClassNameMap: ColorToClassMap;
	export const COLORS: React.ReactText[]; const labelDisplayToClassMap: {
	    fixed: string;
	    expand: string;
	}; const descriptionDisplayToClassMap: {
	    truncate: string;
	    wrap: string;
	};
	export const DISPLAYS: ("fixed" | "expand")[];
	export const EuiSuggestItem: FunctionComponent<EuiSuggestItemProps>;
	export {};

}
declare module '@elastic/eui/src/components/suggest/suggest_input' {
	import { FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiFieldTextProps } from '@elastic/eui/src/components/form';
	import { EuiSuggestItemProps } from '@elastic/eui/src/components/suggest/suggest_item';
	export type EuiSuggestInputProps = CommonProps & EuiFieldTextProps & {
	    tooltipContent?: string;
	    /**
	     * Status of the current query 'unsaved', 'saved', 'unchanged' or 'loading'.
	     */
	    status?: 'unsaved' | 'saved' | 'unchanged' | 'loading';
	    /**
	     * Element to be appended to the input bar.
	     */
	    append?: JSX.Element;
	    /**
	     * List of suggestions to display using 'suggestItem'.
	     */
	    suggestions: JSX.Element[] | EuiSuggestItemProps[];
	    sendValue?: Function;
	};
	export const EuiSuggestInput: FunctionComponent<EuiSuggestInputProps>;

}
declare module '@elastic/eui/src/components/suggest/suggest' {
	import { FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiSuggestItemProps } from '@elastic/eui/src/components/suggest/suggest_item';
	import { EuiSuggestInputProps } from '@elastic/eui/src/components/suggest/suggest_input';
	export type EuiSuggestProps = CommonProps & EuiSuggestInputProps & {
	    /**
	     * List of suggestions to display using 'suggestItem'.
	     */
	    suggestions: EuiSuggestItemProps[];
	    /**
	     * Handler for click on a suggestItem.
	     */
	    onItemClick?: (item: EuiSuggestItemProps) => void;
	    onInputChange?: (target: EventTarget) => void;
	};
	export const EuiSuggest: FunctionComponent<EuiSuggestProps>;

}
declare module '@elastic/eui/src/components/suggest' {
	export { EuiSuggestInput, EuiSuggestInputProps } from '@elastic/eui/src/components/suggest/suggest_input';
	export { EuiSuggestItem, EuiSuggestItemProps } from '@elastic/eui/src/components/suggest/suggest_item';
	export { EuiSuggest, EuiSuggestProps } from '@elastic/eui/src/components/suggest/suggest';

}
declare module '@elastic/eui/src/components/table/table' {
	import { FunctionComponent, TableHTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export interface EuiTableProps extends CommonProps, TableHTMLAttributes<HTMLTableElement> {
	    compressed?: boolean;
	    responsive?: boolean;
	    /**
	     * Sets the table-layout CSS property
	     */
	    tableLayout?: 'fixed' | 'auto';
	}
	export const EuiTable: FunctionComponent<EuiTableProps>;

}
declare module '@elastic/eui/src/components/table/table_body' {
	import { FunctionComponent, Ref } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiTableBodyProps = CommonProps & {
	    bodyRef?: Ref<HTMLTableSectionElement>;
	};
	export const EuiTableBody: FunctionComponent<EuiTableBodyProps>;

}
declare module '@elastic/eui/src/components/table/table_footer' {
	import { FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export const EuiTableFooter: FunctionComponent<CommonProps>;

}
declare module '@elastic/eui/src/components/table/utils' {
	import { CSSProperties } from 'react';
	export const WARNING_MESSAGE = "Two `width` properties were provided. Provide only one of `style.width` or `width` to avoid conflicts.";
	export const resolveWidthAsStyle: (style?: CSSProperties, width?: string | number | undefined) => {
	    width: string | number | undefined;
	    alignContent?: string | undefined;
	    alignItems?: string | undefined;
	    alignSelf?: string | undefined;
	    animationDelay?: string | undefined;
	    animationDirection?: string | undefined;
	    animationDuration?: string | undefined;
	    animationFillMode?: string | undefined;
	    animationIterationCount?: string | number | undefined;
	    animationName?: string | undefined;
	    animationPlayState?: string | undefined;
	    animationTimingFunction?: string | undefined;
	    appearance?: "button" | "meter" | "textarea" | "none" | "inherit" | "initial" | "listbox" | "-moz-initial" | "revert" | "unset" | "button-bevel" | "checkbox" | "menulist" | "menulist-button" | "progress-bar" | "push-button" | "radio" | "searchfield" | "slider-horizontal" | "square-button" | "textfield" | undefined;
	    aspectRatio?: string | undefined;
	    backdropFilter?: string | undefined;
	    backfaceVisibility?: "inherit" | "initial" | "hidden" | "-moz-initial" | "revert" | "unset" | "visible" | undefined;
	    backgroundAttachment?: string | undefined;
	    backgroundBlendMode?: string | undefined;
	    backgroundClip?: string | undefined;
	    backgroundColor?: string | undefined;
	    backgroundImage?: string | undefined;
	    backgroundOrigin?: string | undefined;
	    backgroundPosition?: string | number | undefined;
	    backgroundPositionX?: string | number | undefined;
	    backgroundPositionY?: string | number | undefined;
	    backgroundRepeat?: string | undefined;
	    backgroundSize?: string | number | undefined;
	    blockOverflow?: string | undefined;
	    blockSize?: string | number | undefined;
	    borderBlockColor?: string | undefined;
	    borderBlockEndColor?: string | undefined;
	    borderBlockEndStyle?: "none" | "inherit" | "initial" | "hidden" | "-moz-initial" | "revert" | "unset" | "dashed" | "dotted" | "double" | "groove" | "inset" | "outset" | "ridge" | "solid" | undefined;
	    borderBlockEndWidth?: string | number | undefined;
	    borderBlockStartColor?: string | undefined;
	    borderBlockStartStyle?: "none" | "inherit" | "initial" | "hidden" | "-moz-initial" | "revert" | "unset" | "dashed" | "dotted" | "double" | "groove" | "inset" | "outset" | "ridge" | "solid" | undefined;
	    borderBlockStartWidth?: string | number | undefined;
	    borderBlockStyle?: "none" | "inherit" | "initial" | "hidden" | "-moz-initial" | "revert" | "unset" | "dashed" | "dotted" | "double" | "groove" | "inset" | "outset" | "ridge" | "solid" | undefined;
	    borderBlockWidth?: string | number | undefined;
	    borderBottomColor?: string | undefined;
	    borderBottomLeftRadius?: string | number | undefined;
	    borderBottomRightRadius?: string | number | undefined;
	    borderBottomStyle?: "none" | "inherit" | "initial" | "hidden" | "-moz-initial" | "revert" | "unset" | "dashed" | "dotted" | "double" | "groove" | "inset" | "outset" | "ridge" | "solid" | undefined;
	    borderBottomWidth?: string | number | undefined;
	    borderCollapse?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "collapse" | "separate" | undefined;
	    borderEndEndRadius?: string | number | undefined;
	    borderEndStartRadius?: string | number | undefined;
	    borderImageOutset?: string | number | undefined;
	    borderImageRepeat?: string | undefined;
	    borderImageSlice?: string | number | undefined;
	    borderImageSource?: string | undefined;
	    borderImageWidth?: string | number | undefined;
	    borderInlineColor?: string | undefined;
	    borderInlineEndColor?: string | undefined;
	    borderInlineEndStyle?: "none" | "inherit" | "initial" | "hidden" | "-moz-initial" | "revert" | "unset" | "dashed" | "dotted" | "double" | "groove" | "inset" | "outset" | "ridge" | "solid" | undefined;
	    borderInlineEndWidth?: string | number | undefined;
	    borderInlineStartColor?: string | undefined;
	    borderInlineStartStyle?: "none" | "inherit" | "initial" | "hidden" | "-moz-initial" | "revert" | "unset" | "dashed" | "dotted" | "double" | "groove" | "inset" | "outset" | "ridge" | "solid" | undefined;
	    borderInlineStartWidth?: string | number | undefined;
	    borderInlineStyle?: "none" | "inherit" | "initial" | "hidden" | "-moz-initial" | "revert" | "unset" | "dashed" | "dotted" | "double" | "groove" | "inset" | "outset" | "ridge" | "solid" | undefined;
	    borderInlineWidth?: string | number | undefined;
	    borderLeftColor?: string | undefined;
	    borderLeftStyle?: "none" | "inherit" | "initial" | "hidden" | "-moz-initial" | "revert" | "unset" | "dashed" | "dotted" | "double" | "groove" | "inset" | "outset" | "ridge" | "solid" | undefined;
	    borderLeftWidth?: string | number | undefined;
	    borderRightColor?: string | undefined;
	    borderRightStyle?: "none" | "inherit" | "initial" | "hidden" | "-moz-initial" | "revert" | "unset" | "dashed" | "dotted" | "double" | "groove" | "inset" | "outset" | "ridge" | "solid" | undefined;
	    borderRightWidth?: string | number | undefined;
	    borderSpacing?: string | number | undefined;
	    borderStartEndRadius?: string | number | undefined;
	    borderStartStartRadius?: string | number | undefined;
	    borderTopColor?: string | undefined;
	    borderTopLeftRadius?: string | number | undefined;
	    borderTopRightRadius?: string | number | undefined;
	    borderTopStyle?: "none" | "inherit" | "initial" | "hidden" | "-moz-initial" | "revert" | "unset" | "dashed" | "dotted" | "double" | "groove" | "inset" | "outset" | "ridge" | "solid" | undefined;
	    borderTopWidth?: string | number | undefined;
	    bottom?: string | number | undefined;
	    boxDecorationBreak?: "slice" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "clone" | undefined;
	    boxShadow?: string | undefined;
	    boxSizing?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "border-box" | "content-box" | undefined;
	    breakAfter?: "left" | "right" | "auto" | "inherit" | "initial" | "page" | "all" | "-moz-initial" | "revert" | "unset" | "always" | "avoid" | "avoid-column" | "avoid-page" | "avoid-region" | "column" | "recto" | "region" | "verso" | undefined;
	    breakBefore?: "left" | "right" | "auto" | "inherit" | "initial" | "page" | "all" | "-moz-initial" | "revert" | "unset" | "always" | "avoid" | "avoid-column" | "avoid-page" | "avoid-region" | "column" | "recto" | "region" | "verso" | undefined;
	    breakInside?: "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "avoid" | "avoid-column" | "avoid-page" | "avoid-region" | undefined;
	    captionSide?: "top" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "bottom" | "block-end" | "block-start" | "inline-end" | "inline-start" | undefined;
	    caretColor?: string | undefined;
	    clear?: "left" | "right" | "both" | "none" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "inline-end" | "inline-start" | undefined;
	    clipPath?: string | undefined;
	    color?: string | undefined;
	    colorAdjust?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "economy" | "exact" | undefined;
	    columnCount?: number | "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    columnFill?: "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "balance" | "balance-all" | undefined;
	    columnGap?: string | number | undefined;
	    columnRuleColor?: string | undefined;
	    columnRuleStyle?: string | undefined;
	    columnRuleWidth?: string | number | undefined;
	    columnSpan?: "none" | "inherit" | "initial" | "all" | "-moz-initial" | "revert" | "unset" | undefined;
	    columnWidth?: string | number | undefined;
	    contain?: string | undefined;
	    content?: string | undefined;
	    counterIncrement?: string | undefined;
	    counterReset?: string | undefined;
	    counterSet?: string | undefined;
	    cursor?: string | undefined;
	    direction?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "ltr" | "rtl" | undefined;
	    display?: string | undefined;
	    emptyCells?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "hide" | "show" | undefined;
	    filter?: string | undefined;
	    flexBasis?: string | number | undefined;
	    flexDirection?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "column" | "column-reverse" | "row" | "row-reverse" | undefined;
	    flexGrow?: number | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    flexShrink?: number | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    flexWrap?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "nowrap" | "wrap" | "wrap-reverse" | undefined;
	    float?: "left" | "right" | "none" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "inline-end" | "inline-start" | undefined;
	    fontFamily?: string | undefined;
	    fontFeatureSettings?: string | undefined;
	    fontKerning?: "none" | "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "normal" | undefined;
	    fontLanguageOverride?: string | undefined;
	    fontOpticalSizing?: "none" | "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    fontSize?: string | number | undefined;
	    fontSizeAdjust?: number | "none" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    fontStretch?: string | undefined;
	    fontStyle?: string | undefined;
	    fontSynthesis?: string | undefined;
	    fontVariant?: string | undefined;
	    fontVariantCaps?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "normal" | "all-petite-caps" | "all-small-caps" | "petite-caps" | "small-caps" | "titling-caps" | "unicase" | undefined;
	    fontVariantEastAsian?: string | undefined;
	    fontVariantLigatures?: string | undefined;
	    fontVariantNumeric?: string | undefined;
	    fontVariantPosition?: "sub" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "normal" | "super" | undefined;
	    fontVariationSettings?: string | undefined;
	    fontWeight?: number | "bold" | "lighter" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "normal" | "bolder" | undefined;
	    gridAutoColumns?: string | number | undefined;
	    gridAutoFlow?: string | undefined;
	    gridAutoRows?: string | number | undefined;
	    gridColumnEnd?: string | number | undefined;
	    gridColumnStart?: string | number | undefined;
	    gridRowEnd?: string | number | undefined;
	    gridRowStart?: string | number | undefined;
	    gridTemplateAreas?: string | undefined;
	    gridTemplateColumns?: string | number | undefined;
	    gridTemplateRows?: string | number | undefined;
	    hangingPunctuation?: string | undefined;
	    height?: string | number | undefined;
	    hyphens?: "none" | "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "manual" | undefined;
	    imageOrientation?: string | undefined;
	    imageRendering?: "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "-moz-crisp-edges" | "-webkit-optimize-contrast" | "crisp-edges" | "pixelated" | undefined;
	    imageResolution?: string | undefined;
	    initialLetter?: string | number | undefined;
	    inlineSize?: string | number | undefined;
	    inset?: string | number | undefined;
	    insetBlock?: string | number | undefined;
	    insetBlockEnd?: string | number | undefined;
	    insetBlockStart?: string | number | undefined;
	    insetInline?: string | number | undefined;
	    insetInlineEnd?: string | number | undefined;
	    insetInlineStart?: string | number | undefined;
	    isolation?: "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "isolate" | undefined;
	    justifyContent?: string | undefined;
	    justifyItems?: string | undefined;
	    justifySelf?: string | undefined;
	    left?: string | number | undefined;
	    letterSpacing?: string | number | undefined;
	    lineBreak?: "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "normal" | "strict" | "anywhere" | "loose" | undefined;
	    lineHeight?: string | number | undefined;
	    lineHeightStep?: string | number | undefined;
	    listStyleImage?: string | undefined;
	    listStylePosition?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "inside" | "outside" | undefined;
	    listStyleType?: string | undefined;
	    marginBlock?: string | number | undefined;
	    marginBlockEnd?: string | number | undefined;
	    marginBlockStart?: string | number | undefined;
	    marginBottom?: string | number | undefined;
	    marginInline?: string | number | undefined;
	    marginInlineEnd?: string | number | undefined;
	    marginInlineStart?: string | number | undefined;
	    marginLeft?: string | number | undefined;
	    marginRight?: string | number | undefined;
	    marginTop?: string | number | undefined;
	    maskBorderMode?: "alpha" | "luminance" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    maskBorderOutset?: string | number | undefined;
	    maskBorderRepeat?: string | undefined;
	    maskBorderSlice?: string | number | undefined;
	    maskBorderSource?: string | undefined;
	    maskBorderWidth?: string | number | undefined;
	    maskClip?: string | undefined;
	    maskComposite?: string | undefined;
	    maskImage?: string | undefined;
	    maskMode?: string | undefined;
	    maskOrigin?: string | undefined;
	    maskPosition?: string | number | undefined;
	    maskRepeat?: string | undefined;
	    maskSize?: string | number | undefined;
	    maskType?: "alpha" | "luminance" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    maxBlockSize?: string | number | undefined;
	    maxHeight?: string | number | undefined;
	    maxInlineSize?: string | number | undefined;
	    maxLines?: number | "none" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    maxWidth?: string | number | undefined;
	    minBlockSize?: string | number | undefined;
	    minHeight?: string | number | undefined;
	    minInlineSize?: string | number | undefined;
	    minWidth?: string | number | undefined;
	    mixBlendMode?: "darken" | "color" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "normal" | "color-burn" | "color-dodge" | "difference" | "exclusion" | "hard-light" | "hue" | "lighten" | "luminosity" | "multiply" | "overlay" | "saturation" | "screen" | "soft-light" | undefined;
	    motionDistance?: string | number | undefined;
	    motionPath?: string | undefined;
	    motionRotation?: string | undefined;
	    objectFit?: "fill" | "none" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "contain" | "cover" | "scale-down" | undefined;
	    objectPosition?: string | number | undefined;
	    offsetAnchor?: string | number | undefined;
	    offsetDistance?: string | number | undefined;
	    offsetPath?: string | undefined;
	    offsetRotate?: string | undefined;
	    offsetRotation?: string | undefined;
	    opacity?: string | number | undefined;
	    order?: number | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    orphans?: number | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    outlineColor?: string | undefined;
	    outlineOffset?: string | number | undefined;
	    outlineStyle?: string | undefined;
	    outlineWidth?: string | number | undefined;
	    overflow?: string | undefined;
	    overflowAnchor?: "none" | "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    overflowBlock?: "clip" | "auto" | "inherit" | "initial" | "hidden" | "-moz-initial" | "revert" | "unset" | "visible" | "scroll" | undefined;
	    overflowClipBox?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "content-box" | "padding-box" | undefined;
	    overflowInline?: "clip" | "auto" | "inherit" | "initial" | "hidden" | "-moz-initial" | "revert" | "unset" | "visible" | "scroll" | undefined;
	    overflowWrap?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "normal" | "anywhere" | "break-word" | undefined;
	    overflowX?: "auto" | "inherit" | "initial" | "hidden" | "-moz-initial" | "revert" | "unset" | "visible" | "scroll" | undefined;
	    overflowY?: "auto" | "inherit" | "initial" | "hidden" | "-moz-initial" | "revert" | "unset" | "visible" | "scroll" | undefined;
	    overscrollBehavior?: string | undefined;
	    overscrollBehaviorBlock?: "none" | "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "contain" | undefined;
	    overscrollBehaviorInline?: "none" | "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "contain" | undefined;
	    overscrollBehaviorX?: "none" | "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "contain" | undefined;
	    overscrollBehaviorY?: "none" | "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "contain" | undefined;
	    paddingBlock?: string | number | undefined;
	    paddingBlockEnd?: string | number | undefined;
	    paddingBlockStart?: string | number | undefined;
	    paddingBottom?: string | number | undefined;
	    paddingInline?: string | number | undefined;
	    paddingInlineEnd?: string | number | undefined;
	    paddingInlineStart?: string | number | undefined;
	    paddingLeft?: string | number | undefined;
	    paddingRight?: string | number | undefined;
	    paddingTop?: string | number | undefined;
	    pageBreakAfter?: "left" | "right" | "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "always" | "avoid" | "recto" | "verso" | undefined;
	    pageBreakBefore?: "left" | "right" | "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "always" | "avoid" | "recto" | "verso" | undefined;
	    pageBreakInside?: "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "avoid" | undefined;
	    paintOrder?: string | undefined;
	    perspective?: string | number | undefined;
	    perspectiveOrigin?: string | number | undefined;
	    placeContent?: string | undefined;
	    pointerEvents?: "fill" | "stroke" | "none" | "auto" | "inherit" | "initial" | "all" | "-moz-initial" | "revert" | "unset" | "visible" | "painted" | "visibleFill" | "visiblePainted" | "visibleStroke" | undefined;
	    position?: "fixed" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "-webkit-sticky" | "absolute" | "relative" | "static" | "sticky" | undefined;
	    quotes?: string | undefined;
	    resize?: "both" | "none" | "inherit" | "initial" | "inline" | "horizontal" | "vertical" | "-moz-initial" | "revert" | "unset" | "block" | undefined;
	    right?: string | number | undefined;
	    rotate?: string | undefined;
	    rowGap?: string | number | undefined;
	    rubyAlign?: "center" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "space-around" | "space-between" | "start" | undefined;
	    rubyMerge?: "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "collapse" | "separate" | undefined;
	    rubyPosition?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "over" | "under" | undefined;
	    scale?: string | number | undefined;
	    scrollBehavior?: "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "smooth" | undefined;
	    scrollMargin?: string | number | undefined;
	    scrollMarginBlock?: string | number | undefined;
	    scrollMarginBlockEnd?: string | number | undefined;
	    scrollMarginBlockStart?: string | number | undefined;
	    scrollMarginBottom?: string | number | undefined;
	    scrollMarginInline?: string | number | undefined;
	    scrollMarginInlineEnd?: string | number | undefined;
	    scrollMarginInlineStart?: string | number | undefined;
	    scrollMarginLeft?: string | number | undefined;
	    scrollMarginRight?: string | number | undefined;
	    scrollMarginTop?: string | number | undefined;
	    scrollPadding?: string | number | undefined;
	    scrollPaddingBlock?: string | number | undefined;
	    scrollPaddingBlockEnd?: string | number | undefined;
	    scrollPaddingBlockStart?: string | number | undefined;
	    scrollPaddingBottom?: string | number | undefined;
	    scrollPaddingInline?: string | number | undefined;
	    scrollPaddingInlineEnd?: string | number | undefined;
	    scrollPaddingInlineStart?: string | number | undefined;
	    scrollPaddingLeft?: string | number | undefined;
	    scrollPaddingRight?: string | number | undefined;
	    scrollPaddingTop?: string | number | undefined;
	    scrollSnapAlign?: string | undefined;
	    scrollSnapStop?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "normal" | "always" | undefined;
	    scrollSnapType?: string | undefined;
	    scrollbarColor?: string | undefined;
	    scrollbarWidth?: "none" | "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "thin" | undefined;
	    shapeImageThreshold?: string | number | undefined;
	    shapeMargin?: string | number | undefined;
	    shapeOutside?: string | undefined;
	    tabSize?: string | number | undefined;
	    tableLayout?: "fixed" | "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    textAlign?: "left" | "right" | "center" | "end" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "start" | "justify" | "match-parent" | undefined;
	    textAlignLast?: "left" | "right" | "center" | "end" | "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "start" | "justify" | undefined;
	    textCombineUpright?: string | undefined;
	    textDecorationColor?: string | undefined;
	    textDecorationLine?: string | undefined;
	    textDecorationSkip?: string | undefined;
	    textDecorationSkipInk?: "none" | "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    textDecorationStyle?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "dashed" | "dotted" | "double" | "solid" | "wavy" | undefined;
	    textDecorationThickness?: string | number | undefined;
	    textDecorationWidth?: string | number | undefined;
	    textEmphasisColor?: string | undefined;
	    textEmphasisPosition?: string | undefined;
	    textEmphasisStyle?: string | undefined;
	    textIndent?: string | number | undefined;
	    textJustify?: "none" | "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "inter-character" | "inter-word" | undefined;
	    textOrientation?: "inherit" | "initial" | "mixed" | "-moz-initial" | "revert" | "unset" | "sideways" | "upright" | undefined;
	    textOverflow?: string | undefined;
	    textRendering?: "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "geometricPrecision" | "optimizeLegibility" | "optimizeSpeed" | undefined;
	    textShadow?: string | undefined;
	    textSizeAdjust?: string | undefined;
	    textTransform?: "none" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "full-width" | "capitalize" | "full-size-kana" | "lowercase" | "uppercase" | undefined;
	    textUnderlineOffset?: string | number | undefined;
	    textUnderlinePosition?: string | undefined;
	    top?: string | number | undefined;
	    touchAction?: string | undefined;
	    transform?: string | undefined;
	    transformBox?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "border-box" | "fill-box" | "view-box" | undefined;
	    transformOrigin?: string | number | undefined;
	    transformStyle?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "flat" | "preserve-3d" | undefined;
	    transitionDelay?: string | undefined;
	    transitionDuration?: string | undefined;
	    transitionProperty?: string | undefined;
	    transitionTimingFunction?: string | undefined;
	    translate?: string | number | undefined;
	    unicodeBidi?: "embed" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "normal" | "isolate" | "-moz-isolate" | "-moz-isolate-override" | "-moz-plaintext" | "-webkit-isolate" | "bidi-override" | "isolate-override" | "plaintext" | undefined;
	    userSelect?: "text" | "none" | "auto" | "inherit" | "initial" | "all" | "element" | "-moz-initial" | "revert" | "unset" | "contain" | "-moz-none" | undefined;
	    verticalAlign?: string | number | undefined;
	    visibility?: "inherit" | "initial" | "hidden" | "-moz-initial" | "revert" | "unset" | "visible" | "collapse" | undefined;
	    whiteSpace?: "pre" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "normal" | "nowrap" | "-moz-pre-wrap" | "break-spaces" | "pre-line" | "pre-wrap" | undefined;
	    widows?: number | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    willChange?: string | undefined;
	    wordBreak?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "normal" | "break-word" | "break-all" | "keep-all" | undefined;
	    wordSpacing?: string | number | undefined;
	    wordWrap?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "normal" | "break-word" | undefined;
	    writingMode?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "horizontal-tb" | "sideways-lr" | "sideways-rl" | "vertical-lr" | "vertical-rl" | undefined;
	    zIndex?: number | "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    zoom?: string | number | undefined;
	    all?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    animation?: string | number | undefined;
	    background?: string | number | undefined;
	    border?: string | number | undefined;
	    borderBlock?: string | number | undefined;
	    borderBlockEnd?: string | number | undefined;
	    borderBlockStart?: string | number | undefined;
	    borderBottom?: string | number | undefined;
	    borderColor?: string | undefined;
	    borderImage?: string | number | undefined;
	    borderInline?: string | number | undefined;
	    borderInlineEnd?: string | number | undefined;
	    borderInlineStart?: string | number | undefined;
	    borderLeft?: string | number | undefined;
	    borderRadius?: string | number | undefined;
	    borderRight?: string | number | undefined;
	    borderStyle?: string | undefined;
	    borderTop?: string | number | undefined;
	    borderWidth?: string | number | undefined;
	    columnRule?: string | number | undefined;
	    columns?: string | number | undefined;
	    flex?: string | number | undefined;
	    flexFlow?: string | undefined;
	    font?: string | undefined;
	    gap?: string | number | undefined;
	    grid?: string | undefined;
	    gridArea?: string | number | undefined;
	    gridColumn?: string | number | undefined;
	    gridRow?: string | number | undefined;
	    gridTemplate?: string | undefined;
	    lineClamp?: number | "none" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    listStyle?: string | undefined;
	    margin?: string | number | undefined;
	    mask?: string | number | undefined;
	    maskBorder?: string | number | undefined;
	    motion?: string | number | undefined;
	    offset?: string | number | undefined;
	    outline?: string | number | undefined;
	    padding?: string | number | undefined;
	    placeItems?: string | undefined;
	    placeSelf?: string | undefined;
	    textDecoration?: string | number | undefined;
	    textEmphasis?: string | undefined;
	    transition?: string | undefined;
	    MozAnimationDelay?: string | undefined;
	    MozAnimationDirection?: string | undefined;
	    MozAnimationDuration?: string | undefined;
	    MozAnimationFillMode?: string | undefined;
	    MozAnimationIterationCount?: string | number | undefined;
	    MozAnimationName?: string | undefined;
	    MozAnimationPlayState?: string | undefined;
	    MozAnimationTimingFunction?: string | undefined;
	    MozAppearance?: "button" | "menuitem" | "none" | "inherit" | "initial" | "listbox" | "-moz-initial" | "revert" | "unset" | "button-bevel" | "checkbox" | "menulist" | "menulist-button" | "radio" | "searchfield" | "textfield" | "-moz-mac-unified-toolbar" | "-moz-win-borderless-glass" | "-moz-win-browsertabbar-toolbox" | "-moz-win-communications-toolbox" | "-moz-win-communicationstext" | "-moz-win-exclude-glass" | "-moz-win-glass" | "-moz-win-media-toolbox" | "-moz-win-mediatext" | "-moz-window-button-box" | "-moz-window-button-box-maximized" | "-moz-window-button-close" | "-moz-window-button-maximize" | "-moz-window-button-minimize" | "-moz-window-button-restore" | "-moz-window-frame-bottom" | "-moz-window-frame-left" | "-moz-window-frame-right" | "-moz-window-titlebar" | "-moz-window-titlebar-maximized" | "button-arrow-down" | "button-arrow-next" | "button-arrow-previous" | "button-arrow-up" | "button-focus" | "caret" | "checkbox-container" | "checkbox-label" | "checkmenuitem" | "dualbutton" | "groupbox" | "listitem" | "menuarrow" | "menubar" | "menucheckbox" | "menuimage" | "menuitemtext" | "menulist-text" | "menulist-textfield" | "menupopup" | "menuradio" | "menuseparator" | "meterbar" | "meterchunk" | "progressbar" | "progressbar-vertical" | "progresschunk" | "progresschunk-vertical" | "radio-container" | "radio-label" | "radiomenuitem" | "range" | "range-thumb" | "resizer" | "resizerpanel" | "scale-horizontal" | "scale-vertical" | "scalethumb-horizontal" | "scalethumb-vertical" | "scalethumbend" | "scalethumbstart" | "scalethumbtick" | "scrollbarbutton-down" | "scrollbarbutton-left" | "scrollbarbutton-right" | "scrollbarbutton-up" | "scrollbarthumb-horizontal" | "scrollbarthumb-vertical" | "scrollbartrack-horizontal" | "scrollbartrack-vertical" | "separator" | "sheet" | "spinner" | "spinner-downbutton" | "spinner-textfield" | "spinner-upbutton" | "splitter" | "statusbar" | "statusbarpanel" | "tab" | "tab-scroll-arrow-back" | "tab-scroll-arrow-forward" | "tabpanel" | "tabpanels" | "textfield-multiline" | "toolbar" | "toolbarbutton" | "toolbarbutton-dropdown" | "toolbargripper" | "toolbox" | "tooltip" | "treeheader" | "treeheadercell" | "treeheadersortarrow" | "treeitem" | "treeline" | "treetwisty" | "treetwistyopen" | "treeview" | undefined;
	    MozBackfaceVisibility?: "inherit" | "initial" | "hidden" | "-moz-initial" | "revert" | "unset" | "visible" | undefined;
	    MozBorderEndColor?: string | undefined;
	    MozBorderEndStyle?: "none" | "inherit" | "initial" | "hidden" | "-moz-initial" | "revert" | "unset" | "dashed" | "dotted" | "double" | "groove" | "inset" | "outset" | "ridge" | "solid" | undefined;
	    MozBorderEndWidth?: string | number | undefined;
	    MozBorderStartColor?: string | undefined;
	    MozBorderStartStyle?: "none" | "inherit" | "initial" | "hidden" | "-moz-initial" | "revert" | "unset" | "dashed" | "dotted" | "double" | "groove" | "inset" | "outset" | "ridge" | "solid" | undefined;
	    MozBoxSizing?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "border-box" | "content-box" | undefined;
	    MozColumnCount?: number | "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    MozColumnFill?: "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "balance" | "balance-all" | undefined;
	    MozColumnGap?: string | number | undefined;
	    MozColumnRuleColor?: string | undefined;
	    MozColumnRuleStyle?: string | undefined;
	    MozColumnRuleWidth?: string | number | undefined;
	    MozColumnWidth?: string | number | undefined;
	    MozContextProperties?: string | undefined;
	    MozFloatEdge?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "border-box" | "content-box" | "padding-box" | "margin-box" | undefined;
	    MozFontFeatureSettings?: string | undefined;
	    MozFontLanguageOverride?: string | undefined;
	    MozForceBrokenImageIcon?: number | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    MozHyphens?: "none" | "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "manual" | undefined;
	    MozImageRegion?: string | undefined;
	    MozMarginEnd?: string | number | undefined;
	    MozMarginStart?: string | number | undefined;
	    MozOrient?: "inherit" | "initial" | "inline" | "horizontal" | "vertical" | "-moz-initial" | "revert" | "unset" | "block" | undefined;
	    MozOutlineRadiusBottomleft?: string | number | undefined;
	    MozOutlineRadiusBottomright?: string | number | undefined;
	    MozOutlineRadiusTopleft?: string | number | undefined;
	    MozOutlineRadiusTopright?: string | number | undefined;
	    MozPaddingEnd?: string | number | undefined;
	    MozPaddingStart?: string | number | undefined;
	    MozPerspective?: string | number | undefined;
	    MozPerspectiveOrigin?: string | number | undefined;
	    MozStackSizing?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "ignore" | "stretch-to-fit" | undefined;
	    MozTabSize?: string | number | undefined;
	    MozTextSizeAdjust?: string | undefined;
	    MozTransformOrigin?: string | number | undefined;
	    MozTransformStyle?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "flat" | "preserve-3d" | undefined;
	    MozTransitionDelay?: string | undefined;
	    MozTransitionDuration?: string | undefined;
	    MozTransitionProperty?: string | undefined;
	    MozTransitionTimingFunction?: string | undefined;
	    MozUserFocus?: "none" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "normal" | "ignore" | "select-after" | "select-all" | "select-before" | "select-menu" | "select-same" | undefined;
	    MozUserModify?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "read-only" | "read-write" | "write-only" | undefined;
	    MozUserSelect?: "text" | "none" | "auto" | "inherit" | "initial" | "all" | "element" | "-moz-initial" | "revert" | "unset" | "contain" | "-moz-none" | undefined;
	    MozWindowDragging?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "drag" | "no-drag" | undefined;
	    msAccelerator?: "inherit" | "initial" | "true" | "false" | "-moz-initial" | "revert" | "unset" | undefined;
	    msAlignSelf?: string | undefined;
	    msBlockProgression?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "bt" | "lr" | "rl" | "tb" | undefined;
	    msContentZoomChaining?: "none" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "chained" | undefined;
	    msContentZoomLimitMax?: string | undefined;
	    msContentZoomLimitMin?: string | undefined;
	    msContentZoomSnapPoints?: string | undefined;
	    msContentZoomSnapType?: "none" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "mandatory" | "proximity" | undefined;
	    msContentZooming?: "none" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "zoom" | undefined;
	    msFilter?: string | undefined;
	    msFlexDirection?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "column" | "column-reverse" | "row" | "row-reverse" | undefined;
	    msFlexPositive?: number | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    msFlowFrom?: string | undefined;
	    msFlowInto?: string | undefined;
	    msGridColumns?: string | number | undefined;
	    msGridRows?: string | number | undefined;
	    msHighContrastAdjust?: "none" | "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    msHyphenateLimitChars?: string | number | undefined;
	    msHyphenateLimitLines?: number | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "no-limit" | undefined;
	    msHyphenateLimitZone?: string | number | undefined;
	    msHyphens?: "none" | "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "manual" | undefined;
	    msImeAlign?: "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "after" | undefined;
	    msLineBreak?: "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "normal" | "strict" | "anywhere" | "loose" | undefined;
	    msOrder?: number | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    msOverflowStyle?: "none" | "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "-ms-autohiding-scrollbar" | "scrollbar" | undefined;
	    msOverflowX?: "auto" | "inherit" | "initial" | "hidden" | "-moz-initial" | "revert" | "unset" | "visible" | "scroll" | undefined;
	    msOverflowY?: "auto" | "inherit" | "initial" | "hidden" | "-moz-initial" | "revert" | "unset" | "visible" | "scroll" | undefined;
	    msScrollChaining?: "none" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "chained" | undefined;
	    msScrollLimitXMax?: string | number | undefined;
	    msScrollLimitXMin?: string | number | undefined;
	    msScrollLimitYMax?: string | number | undefined;
	    msScrollLimitYMin?: string | number | undefined;
	    msScrollRails?: "none" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "railed" | undefined;
	    msScrollSnapPointsX?: string | undefined;
	    msScrollSnapPointsY?: string | undefined;
	    msScrollSnapType?: "none" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "mandatory" | "proximity" | undefined;
	    msScrollTranslation?: "none" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "vertical-to-horizontal" | undefined;
	    msScrollbar3dlightColor?: string | undefined;
	    msScrollbarArrowColor?: string | undefined;
	    msScrollbarBaseColor?: string | undefined;
	    msScrollbarDarkshadowColor?: string | undefined;
	    msScrollbarFaceColor?: string | undefined;
	    msScrollbarHighlightColor?: string | undefined;
	    msScrollbarShadowColor?: string | undefined;
	    msTextAutospace?: "none" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "ideograph-alpha" | "ideograph-numeric" | "ideograph-parenthesis" | "ideograph-space" | undefined;
	    msTextCombineHorizontal?: string | undefined;
	    msTextOverflow?: string | undefined;
	    msTouchAction?: string | undefined;
	    msTouchSelect?: "none" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "grippers" | undefined;
	    msTransform?: string | undefined;
	    msTransformOrigin?: string | number | undefined;
	    msTransitionDelay?: string | undefined;
	    msTransitionDuration?: string | undefined;
	    msTransitionProperty?: string | undefined;
	    msTransitionTimingFunction?: string | undefined;
	    msUserSelect?: "text" | "none" | "inherit" | "initial" | "element" | "-moz-initial" | "revert" | "unset" | undefined;
	    msWordBreak?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "normal" | "break-word" | "break-all" | "keep-all" | undefined;
	    msWrapFlow?: "both" | "end" | "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "start" | "clear" | "maximum" | undefined;
	    msWrapMargin?: string | number | undefined;
	    msWrapThrough?: "none" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "wrap" | undefined;
	    msWritingMode?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "horizontal-tb" | "sideways-lr" | "sideways-rl" | "vertical-lr" | "vertical-rl" | undefined;
	    OObjectFit?: "fill" | "none" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "contain" | "cover" | "scale-down" | undefined;
	    OObjectPosition?: string | number | undefined;
	    OTabSize?: string | number | undefined;
	    OTextOverflow?: string | undefined;
	    OTransformOrigin?: string | number | undefined;
	    WebkitAlignContent?: string | undefined;
	    WebkitAlignItems?: string | undefined;
	    WebkitAlignSelf?: string | undefined;
	    WebkitAnimationDelay?: string | undefined;
	    WebkitAnimationDirection?: string | undefined;
	    WebkitAnimationDuration?: string | undefined;
	    WebkitAnimationFillMode?: string | undefined;
	    WebkitAnimationIterationCount?: string | number | undefined;
	    WebkitAnimationName?: string | undefined;
	    WebkitAnimationPlayState?: string | undefined;
	    WebkitAnimationTimingFunction?: string | undefined;
	    WebkitAppearance?: "button" | "meter" | "textarea" | "none" | "inherit" | "initial" | "listbox" | "-moz-initial" | "revert" | "unset" | "button-bevel" | "checkbox" | "menulist" | "menulist-button" | "progress-bar" | "push-button" | "radio" | "searchfield" | "slider-horizontal" | "square-button" | "textfield" | "caret" | "listitem" | "menulist-text" | "menulist-textfield" | "default-button" | "inner-spin-button" | "media-controls-background" | "media-controls-fullscreen-background" | "media-current-time-display" | "media-enter-fullscreen-button" | "media-exit-fullscreen-button" | "media-fullscreen-button" | "media-mute-button" | "media-overlay-play-button" | "media-play-button" | "media-seek-back-button" | "media-seek-forward-button" | "media-slider" | "media-sliderthumb" | "media-time-remaining-display" | "media-toggle-closed-captions-button" | "media-volume-slider" | "media-volume-slider-container" | "media-volume-sliderthumb" | "progress-bar-value" | "searchfield-cancel-button" | "searchfield-decoration" | "searchfield-results-button" | "searchfield-results-decoration" | "slider-vertical" | "sliderthumb-horizontal" | "sliderthumb-vertical" | undefined;
	    WebkitBackdropFilter?: string | undefined;
	    WebkitBackfaceVisibility?: "inherit" | "initial" | "hidden" | "-moz-initial" | "revert" | "unset" | "visible" | undefined;
	    WebkitBackgroundClip?: string | undefined;
	    WebkitBackgroundOrigin?: string | undefined;
	    WebkitBackgroundSize?: string | number | undefined;
	    WebkitBorderBeforeColor?: string | undefined;
	    WebkitBorderBeforeStyle?: string | undefined;
	    WebkitBorderBeforeWidth?: string | number | undefined;
	    WebkitBorderBottomLeftRadius?: string | number | undefined;
	    WebkitBorderBottomRightRadius?: string | number | undefined;
	    WebkitBorderImageSlice?: string | number | undefined;
	    WebkitBorderTopLeftRadius?: string | number | undefined;
	    WebkitBorderTopRightRadius?: string | number | undefined;
	    WebkitBoxDecorationBreak?: "slice" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "clone" | undefined;
	    WebkitBoxReflect?: string | number | undefined;
	    WebkitBoxShadow?: string | undefined;
	    WebkitBoxSizing?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "border-box" | "content-box" | undefined;
	    WebkitClipPath?: string | undefined;
	    WebkitColorAdjust?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "economy" | "exact" | undefined;
	    WebkitColumnCount?: number | "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    WebkitColumnFill?: "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "balance" | "balance-all" | undefined;
	    WebkitColumnGap?: string | number | undefined;
	    WebkitColumnRuleColor?: string | undefined;
	    WebkitColumnRuleStyle?: string | undefined;
	    WebkitColumnRuleWidth?: string | number | undefined;
	    WebkitColumnSpan?: "none" | "inherit" | "initial" | "all" | "-moz-initial" | "revert" | "unset" | undefined;
	    WebkitColumnWidth?: string | number | undefined;
	    WebkitFilter?: string | undefined;
	    WebkitFlexBasis?: string | number | undefined;
	    WebkitFlexDirection?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "column" | "column-reverse" | "row" | "row-reverse" | undefined;
	    WebkitFlexGrow?: number | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    WebkitFlexShrink?: number | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    WebkitFlexWrap?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "nowrap" | "wrap" | "wrap-reverse" | undefined;
	    WebkitFontFeatureSettings?: string | undefined;
	    WebkitFontKerning?: "none" | "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "normal" | undefined;
	    WebkitFontVariantLigatures?: string | undefined;
	    WebkitHyphens?: "none" | "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "manual" | undefined;
	    WebkitJustifyContent?: string | undefined;
	    WebkitLineBreak?: "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "normal" | "strict" | "anywhere" | "loose" | undefined;
	    WebkitLineClamp?: number | "none" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    WebkitMarginEnd?: string | number | undefined;
	    WebkitMarginStart?: string | number | undefined;
	    WebkitMaskAttachment?: string | undefined;
	    WebkitMaskClip?: string | undefined;
	    WebkitMaskComposite?: string | undefined;
	    WebkitMaskImage?: string | undefined;
	    WebkitMaskOrigin?: string | undefined;
	    WebkitMaskPosition?: string | number | undefined;
	    WebkitMaskPositionX?: string | number | undefined;
	    WebkitMaskPositionY?: string | number | undefined;
	    WebkitMaskRepeat?: string | undefined;
	    WebkitMaskRepeatX?: "repeat" | "space" | "inherit" | "initial" | "round" | "-moz-initial" | "revert" | "unset" | "no-repeat" | undefined;
	    WebkitMaskRepeatY?: "repeat" | "space" | "inherit" | "initial" | "round" | "-moz-initial" | "revert" | "unset" | "no-repeat" | undefined;
	    WebkitMaskSize?: string | number | undefined;
	    WebkitMaxInlineSize?: string | number | undefined;
	    WebkitOrder?: number | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    WebkitOverflowScrolling?: "auto" | "inherit" | "initial" | "touch" | "-moz-initial" | "revert" | "unset" | undefined;
	    WebkitPaddingEnd?: string | number | undefined;
	    WebkitPaddingStart?: string | number | undefined;
	    WebkitPerspective?: string | number | undefined;
	    WebkitPerspectiveOrigin?: string | number | undefined;
	    WebkitScrollSnapType?: string | undefined;
	    WebkitShapeMargin?: string | number | undefined;
	    WebkitTapHighlightColor?: string | undefined;
	    WebkitTextCombine?: string | undefined;
	    WebkitTextDecorationColor?: string | undefined;
	    WebkitTextDecorationLine?: string | undefined;
	    WebkitTextDecorationSkip?: string | undefined;
	    WebkitTextDecorationStyle?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "dashed" | "dotted" | "double" | "solid" | "wavy" | undefined;
	    WebkitTextEmphasisColor?: string | undefined;
	    WebkitTextEmphasisPosition?: string | undefined;
	    WebkitTextEmphasisStyle?: string | undefined;
	    WebkitTextFillColor?: string | undefined;
	    WebkitTextOrientation?: "inherit" | "initial" | "mixed" | "-moz-initial" | "revert" | "unset" | "sideways" | "upright" | undefined;
	    WebkitTextSizeAdjust?: string | undefined;
	    WebkitTextStrokeColor?: string | undefined;
	    WebkitTextStrokeWidth?: string | number | undefined;
	    WebkitTouchCallout?: "default" | "none" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    WebkitTransform?: string | undefined;
	    WebkitTransformOrigin?: string | number | undefined;
	    WebkitTransformStyle?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "flat" | "preserve-3d" | undefined;
	    WebkitTransitionDelay?: string | undefined;
	    WebkitTransitionDuration?: string | undefined;
	    WebkitTransitionProperty?: string | undefined;
	    WebkitTransitionTimingFunction?: string | undefined;
	    WebkitUserModify?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "read-only" | "read-write" | "read-write-plaintext-only" | undefined;
	    WebkitUserSelect?: "text" | "none" | "auto" | "inherit" | "initial" | "all" | "element" | "-moz-initial" | "revert" | "unset" | "contain" | "-moz-none" | undefined;
	    WebkitWritingMode?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "horizontal-tb" | "sideways-lr" | "sideways-rl" | "vertical-lr" | "vertical-rl" | undefined;
	    MozAnimation?: string | number | undefined;
	    MozBorderImage?: string | number | undefined;
	    MozColumnRule?: string | number | undefined;
	    MozColumns?: string | number | undefined;
	    MozTransition?: string | undefined;
	    msContentZoomLimit?: string | undefined;
	    msContentZoomSnap?: string | undefined;
	    msFlex?: string | number | undefined;
	    msScrollLimit?: string | undefined;
	    msScrollSnapX?: string | undefined;
	    msScrollSnapY?: string | undefined;
	    msTransition?: string | undefined;
	    WebkitAnimation?: string | number | undefined;
	    WebkitBorderBefore?: string | number | undefined;
	    WebkitBorderImage?: string | number | undefined;
	    WebkitBorderRadius?: string | number | undefined;
	    WebkitColumnRule?: string | number | undefined;
	    WebkitColumns?: string | number | undefined;
	    WebkitFlex?: string | number | undefined;
	    WebkitFlexFlow?: string | undefined;
	    WebkitMask?: string | number | undefined;
	    WebkitTextEmphasis?: string | undefined;
	    WebkitTextStroke?: string | number | undefined;
	    WebkitTransition?: string | undefined;
	    boxAlign?: "center" | "end" | "baseline" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "stretch" | "start" | undefined;
	    boxDirection?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "normal" | "reverse" | undefined;
	    boxFlex?: number | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    boxFlexGroup?: number | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    boxLines?: "inherit" | "initial" | "single" | "-moz-initial" | "revert" | "unset" | "multiple" | undefined;
	    boxOrdinalGroup?: number | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    boxOrient?: "inherit" | "initial" | "horizontal" | "vertical" | "-moz-initial" | "revert" | "unset" | "block-axis" | "inline-axis" | undefined;
	    boxPack?: "center" | "end" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "start" | "justify" | undefined;
	    clip?: string | undefined;
	    fontVariantAlternates?: string | undefined;
	    gridColumnGap?: string | number | undefined;
	    gridGap?: string | number | undefined;
	    gridRowGap?: string | number | undefined;
	    imeMode?: "auto" | "inherit" | "initial" | "disabled" | "-moz-initial" | "revert" | "unset" | "normal" | "active" | "inactive" | undefined;
	    offsetBlock?: string | number | undefined;
	    offsetBlockEnd?: string | number | undefined;
	    offsetBlockStart?: string | number | undefined;
	    offsetInline?: string | number | undefined;
	    offsetInlineEnd?: string | number | undefined;
	    offsetInlineStart?: string | number | undefined;
	    scrollSnapCoordinate?: string | number | undefined;
	    scrollSnapDestination?: string | number | undefined;
	    scrollSnapPointsX?: string | undefined;
	    scrollSnapPointsY?: string | undefined;
	    scrollSnapTypeX?: "none" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "mandatory" | "proximity" | undefined;
	    scrollSnapTypeY?: "none" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "mandatory" | "proximity" | undefined;
	    scrollbarTrackColor?: string | undefined;
	    textCombineHorizontal?: string | undefined;
	    KhtmlBoxAlign?: "center" | "end" | "baseline" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "stretch" | "start" | undefined;
	    KhtmlBoxDirection?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "normal" | "reverse" | undefined;
	    KhtmlBoxFlex?: number | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    KhtmlBoxFlexGroup?: number | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    KhtmlBoxLines?: "inherit" | "initial" | "single" | "-moz-initial" | "revert" | "unset" | "multiple" | undefined;
	    KhtmlBoxOrdinalGroup?: number | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    KhtmlBoxOrient?: "inherit" | "initial" | "horizontal" | "vertical" | "-moz-initial" | "revert" | "unset" | "block-axis" | "inline-axis" | undefined;
	    KhtmlBoxPack?: "center" | "end" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "start" | "justify" | undefined;
	    KhtmlLineBreak?: "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "normal" | "strict" | "anywhere" | "loose" | undefined;
	    KhtmlOpacity?: string | number | undefined;
	    KhtmlUserSelect?: "text" | "none" | "auto" | "inherit" | "initial" | "all" | "element" | "-moz-initial" | "revert" | "unset" | "contain" | "-moz-none" | undefined;
	    MozBackgroundClip?: string | undefined;
	    MozBackgroundInlinePolicy?: "slice" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "clone" | undefined;
	    MozBackgroundOrigin?: string | undefined;
	    MozBackgroundSize?: string | number | undefined;
	    MozBinding?: string | undefined;
	    MozBorderBottomColors?: string | undefined;
	    MozBorderLeftColors?: string | undefined;
	    MozBorderRadius?: string | number | undefined;
	    MozBorderRadiusBottomleft?: string | number | undefined;
	    MozBorderRadiusBottomright?: string | number | undefined;
	    MozBorderRadiusTopleft?: string | number | undefined;
	    MozBorderRadiusTopright?: string | number | undefined;
	    MozBorderRightColors?: string | undefined;
	    MozBorderTopColors?: string | undefined;
	    MozBoxAlign?: "center" | "end" | "baseline" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "stretch" | "start" | undefined;
	    MozBoxDirection?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "normal" | "reverse" | undefined;
	    MozBoxFlex?: number | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    MozBoxOrdinalGroup?: number | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    MozBoxOrient?: "inherit" | "initial" | "horizontal" | "vertical" | "-moz-initial" | "revert" | "unset" | "block-axis" | "inline-axis" | undefined;
	    MozBoxPack?: "center" | "end" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "start" | "justify" | undefined;
	    MozBoxShadow?: string | undefined;
	    MozOpacity?: string | number | undefined;
	    MozOutline?: string | number | undefined;
	    MozOutlineColor?: string | undefined;
	    MozOutlineRadius?: string | number | undefined;
	    MozOutlineStyle?: string | undefined;
	    MozOutlineWidth?: string | number | undefined;
	    MozTextAlignLast?: "left" | "right" | "center" | "end" | "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "start" | "justify" | undefined;
	    MozTextBlink?: "blink" | "none" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    MozTextDecorationColor?: string | undefined;
	    MozTextDecorationLine?: string | undefined;
	    MozTextDecorationStyle?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "dashed" | "dotted" | "double" | "solid" | "wavy" | undefined;
	    MozUserInput?: "none" | "auto" | "inherit" | "initial" | "disabled" | "-moz-initial" | "revert" | "unset" | "enabled" | undefined;
	    MozWindowShadow?: "menu" | "default" | "none" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "sheet" | "tooltip" | undefined;
	    msImeMode?: "auto" | "inherit" | "initial" | "disabled" | "-moz-initial" | "revert" | "unset" | "normal" | "active" | "inactive" | undefined;
	    msScrollbarTrackColor?: string | undefined;
	    OAnimation?: string | number | undefined;
	    OAnimationDelay?: string | undefined;
	    OAnimationDirection?: string | undefined;
	    OAnimationDuration?: string | undefined;
	    OAnimationFillMode?: string | undefined;
	    OAnimationIterationCount?: string | number | undefined;
	    OAnimationName?: string | undefined;
	    OAnimationPlayState?: string | undefined;
	    OAnimationTimingFunction?: string | undefined;
	    OBackgroundSize?: string | number | undefined;
	    OBorderImage?: string | number | undefined;
	    OTransform?: string | undefined;
	    OTransition?: string | undefined;
	    OTransitionDelay?: string | undefined;
	    OTransitionDuration?: string | undefined;
	    OTransitionProperty?: string | undefined;
	    OTransitionTimingFunction?: string | undefined;
	    WebkitBoxAlign?: "center" | "end" | "baseline" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "stretch" | "start" | undefined;
	    WebkitBoxDirection?: "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "normal" | "reverse" | undefined;
	    WebkitBoxFlex?: number | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    WebkitBoxFlexGroup?: number | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    WebkitBoxLines?: "inherit" | "initial" | "single" | "-moz-initial" | "revert" | "unset" | "multiple" | undefined;
	    WebkitBoxOrdinalGroup?: number | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    WebkitBoxOrient?: "inherit" | "initial" | "horizontal" | "vertical" | "-moz-initial" | "revert" | "unset" | "block-axis" | "inline-axis" | undefined;
	    WebkitBoxPack?: "center" | "end" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "start" | "justify" | undefined;
	    WebkitScrollSnapPointsX?: string | undefined;
	    WebkitScrollSnapPointsY?: string | undefined;
	    alignmentBaseline?: "alphabetic" | "hanging" | "ideographic" | "mathematical" | "auto" | "baseline" | "before-edge" | "text-before-edge" | "middle" | "central" | "after-edge" | "text-after-edge" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    baselineShift?: string | number | undefined;
	    clipRule?: "inherit" | "initial" | "nonzero" | "evenodd" | "-moz-initial" | "revert" | "unset" | undefined;
	    colorInterpolation?: "auto" | "inherit" | "initial" | "sRGB" | "linearRGB" | "-moz-initial" | "revert" | "unset" | undefined;
	    colorRendering?: "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "optimizeSpeed" | "optimizeQuality" | undefined;
	    dominantBaseline?: "alphabetic" | "hanging" | "ideographic" | "mathematical" | "auto" | "text-before-edge" | "middle" | "central" | "text-after-edge" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "no-change" | "reset-size" | "use-script" | undefined;
	    fill?: string | undefined;
	    fillOpacity?: number | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    fillRule?: "inherit" | "initial" | "nonzero" | "evenodd" | "-moz-initial" | "revert" | "unset" | undefined;
	    floodColor?: string | undefined;
	    floodOpacity?: number | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    glyphOrientationVertical?: string | number | undefined;
	    lightingColor?: string | undefined;
	    marker?: string | undefined;
	    markerEnd?: string | undefined;
	    markerMid?: string | undefined;
	    markerStart?: string | undefined;
	    shapeRendering?: "auto" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "geometricPrecision" | "optimizeSpeed" | "crispEdges" | undefined;
	    stopColor?: string | undefined;
	    stopOpacity?: number | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    stroke?: string | undefined;
	    strokeDasharray?: string | number | undefined;
	    strokeDashoffset?: string | number | undefined;
	    strokeLinecap?: "inherit" | "initial" | "butt" | "round" | "square" | "-moz-initial" | "revert" | "unset" | undefined;
	    strokeLinejoin?: "inherit" | "initial" | "round" | "miter" | "bevel" | "-moz-initial" | "revert" | "unset" | undefined;
	    strokeMiterlimit?: number | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    strokeOpacity?: number | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | undefined;
	    strokeWidth?: string | number | undefined;
	    textAnchor?: "end" | "middle" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "start" | undefined;
	    vectorEffect?: "none" | "inherit" | "initial" | "-moz-initial" | "revert" | "unset" | "non-scaling-stroke" | undefined;
	};

}
declare module '@elastic/eui/src/components/table/table_footer_cell' {
	import { FunctionComponent, TdHTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { HorizontalAlignment } from '@elastic/eui/src/services';
	export type EuiTableFooterCellProps = CommonProps & TdHTMLAttributes<HTMLTableCellElement> & {
	    align?: HorizontalAlignment;
	    width?: string | number;
	};
	export const EuiTableFooterCell: FunctionComponent<EuiTableFooterCellProps>;

}
declare module '@elastic/eui/src/components/table/table_header' {
	import { FunctionComponent, ReactNode, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiTableHeaderProps = CommonProps & HTMLAttributes<HTMLElement> & {
	    /**
	     * Children must be valid DOM structure residing within `<thead>`.
	     * Use `<td> | <th>` by default, or `<tr><th/></tr>` when `wrapWithTableRow=false`
	     */
	    children?: ReactNode;
	    /**
	     * Automatically adds a wrapping `<tr>` element around the children
	     */
	    wrapWithTableRow?: boolean;
	};
	export const EuiTableHeader: FunctionComponent<EuiTableHeaderProps>;

}
declare module '@elastic/eui/src/components/table/table_header_button' {
	import { ButtonHTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { IconType } from '@elastic/eui/src/components/icon';
	export type EuiTableHeaderButtonProps = CommonProps & ButtonHTMLAttributes<HTMLButtonElement> & {
	    iconType?: IconType;
	};
	export const EuiTableHeaderButton: FunctionComponent<EuiTableHeaderButtonProps>;

}
declare module '@elastic/eui/src/components/table/table_header_cell' {
	import { FunctionComponent, ThHTMLAttributes } from 'react';
	import { CommonProps, NoArgCallback } from '@elastic/eui/src/components/common';
	import { HorizontalAlignment } from '@elastic/eui/src/services';
	export type TableHeaderCellScope = 'col' | 'row' | 'colgroup' | 'rowgroup';
	export type EuiTableHeaderCellProps = CommonProps & Omit<ThHTMLAttributes<HTMLTableHeaderCellElement>, 'align' | 'scope'> & {
	    align?: HorizontalAlignment;
	    isSortAscending?: boolean;
	    isSorted?: boolean;
	    /**
	     * Mobile options for displaying differently at small screens
	     */
	    mobileOptions?: {
	        /**
	         * If false, will not render the column at all for mobile
	         */
	        show?: boolean;
	        /**
	         * Only show for mobile? If true, will not render the column at all
	         * for desktop
	         */
	        only?: boolean;
	    };
	    onSort?: NoArgCallback<void>;
	    scope?: TableHeaderCellScope;
	    width?: string | number;
	    description?: string;
	    /**
	     * Shows the sort indicator but removes the button
	     */
	    readOnly?: boolean;
	};
	export const EuiTableHeaderCell: FunctionComponent<EuiTableHeaderCellProps>;

}
declare module '@elastic/eui/src/components/table/table_header_cell_checkbox' {
	import { FunctionComponent, ThHTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiTableHeaderCellCheckboxScope = 'col' | 'row' | 'colgroup' | 'rowgroup';
	export interface EuiTableHeaderCellCheckboxProps {
	    width?: string | number;
	    scope?: EuiTableHeaderCellCheckboxScope;
	}
	export const EuiTableHeaderCellCheckbox: FunctionComponent<CommonProps & ThHTMLAttributes<HTMLTableHeaderCellElement> & EuiTableHeaderCellCheckboxProps>;

}
declare module '@elastic/eui/src/components/table/mobile/table_header_mobile' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export const EuiTableHeaderMobile: FunctionComponent<CommonProps & HTMLAttributes<HTMLDivElement>>;

}
declare module '@elastic/eui/src/components/table/mobile/table_sort_mobile_item' {
	import { FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export interface EuiTableSortMobileItemProps extends CommonProps {
	    /**
	     * Callback to know when an item has been clicked
	     */
	    onSort?: () => void;
	    /**
	     * Indicates current option is the sorted on column
	     */
	    isSorted?: boolean;
	    /**
	     * Indicates which direction the current column is sorted on
	     */
	    isSortAscending?: boolean;
	    ariaLabel?: string;
	}
	export const EuiTableSortMobileItem: FunctionComponent<EuiTableSortMobileItemProps>;

}
declare module '@elastic/eui/src/components/table/mobile/table_sort_mobile' {
	import { Component, ReactNode, Key } from 'react';
	import { PopoverAnchorPosition } from '@elastic/eui/src/components/popover';
	interface ItemProps {
	    name: ReactNode;
	    key?: Key;
	    onSort?: () => void;
	    isSorted?: boolean;
	    isSortAscending?: boolean;
	}
	export interface EuiTableSortMobileProps {
	    className?: string;
	    anchorPosition?: PopoverAnchorPosition;
	    items?: ItemProps[];
	}
	interface State {
	    isPopoverOpen: boolean;
	}
	export class EuiTableSortMobile extends Component<EuiTableSortMobileProps, State> {
	    state: {
	        isPopoverOpen: boolean;
	    };
	    onButtonClick: () => void;
	    closePopover: () => void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/table/table_row' {
	import { FunctionComponent, HTMLAttributes, KeyboardEventHandler, MouseEventHandler } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export interface EuiTableRowProps {
	    /**
	     * Indicates if the table has a single column of checkboxes for selecting
	     * rows (affects mobile only)
	     */
	    isSelectable?: boolean;
	    /**
	     * Indicates the current row has been selected
	     */
	    isSelected?: boolean;
	    /**
	     * Indicates if the table has a dedicated column for icon-only actions
	     * (affects mobile only)
	     */
	    hasActions?: boolean;
	    /**
	     * Indicates if the row will have an expanded row
	     */
	    isExpandable?: boolean;
	    /**
	     * Indicates if the row will be the expanded row
	     */
	    isExpandedRow?: boolean;
	    onClick?: MouseEventHandler<HTMLTableRowElement> & KeyboardEventHandler<HTMLTableRowElement>;
	} type Props = CommonProps & HTMLAttributes<HTMLTableRowElement> & EuiTableRowProps;
	export const EuiTableRow: FunctionComponent<Props>;
	export {};

}
declare module '@elastic/eui/src/components/table/table_row_cell' {
	import { CSSProperties, FunctionComponent, ReactNode, TdHTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { HorizontalAlignment } from '@elastic/eui/src/services';
	interface EuiTableRowCellSharedPropsShape {
	    /**
	     * Horizontal alignment of the text in the cell
	     */
	    align?: HorizontalAlignment;
	    /**
	     * _Should only be used for action cells_
	     */
	    showOnHover?: boolean;
	    /**
	     * Setting `textOnly` to `false` will break words unnecessarily on FF and
	     * IE.  To combat this problem on FF, wrap contents with the css utility
	     * `.eui-textBreakWord`.
	     */
	    textOnly?: boolean;
	    /**
	     * Don't allow line breaks within cells
	     */
	    truncateText?: boolean;
	    width?: CSSProperties['width'];
	}
	export interface EuiTableRowCellMobileOptionsShape extends EuiTableRowCellSharedPropsShape {
	    /**
	     * If false, will not render the cell at all for mobile
	     */
	    show?: boolean;
	    /**
	     * Only show for mobile? If true, will not render the column at all for desktop
	     */
	    only?: boolean;
	    /**
	     * Custom render/children if different from desktop
	     */
	    render?: ReactNode;
	    /**
	     * The column's header for use in mobile view (automatically passed down
	     * when using `EuiBasicTable`).
	     * Or pass `false` to not show a header at all.
	     */
	    header?: ReactNode | boolean;
	    /**
	     * Increase text size compared to rest of cells
	     */
	    enlarge?: boolean;
	    /**
	     * Applies the value to the width of the cell in mobile view (typically 50%)
	     */
	    width?: CSSProperties['width'];
	}
	export interface EuiTableRowCellProps extends EuiTableRowCellSharedPropsShape {
	    /**
	     * Vertical alignment of the content in the cell
	     */
	    valign?: TdHTMLAttributes<HTMLTableCellElement>['valign'];
	    /**
	     * Indicates whether the cell should be marked as the heading for its row
	     */
	    setScopeRow?: boolean;
	    /**
	     * Indicates if the column is dedicated to icon-only actions (currently
	     * affects mobile only)
	     */
	    hasActions?: boolean;
	    /**
	     * Indicates if the column is dedicated as the expandable row toggle
	     */
	    isExpander?: boolean;
	    /**
	     * Mobile options for displaying differently at small screens;
	     * See #EuiTableRowCellMobileOptionsShape
	     */
	    mobileOptions?: EuiTableRowCellMobileOptionsShape;
	} type Props = CommonProps & Omit<TdHTMLAttributes<HTMLTableCellElement>, 'valign'> & EuiTableRowCellProps;
	export const EuiTableRowCell: FunctionComponent<Props>;
	export {};

}
declare module '@elastic/eui/src/components/table/table_row_cell_checkbox' {
	import { FunctionComponent, TdHTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export const EuiTableRowCellCheckbox: FunctionComponent<CommonProps & TdHTMLAttributes<HTMLTableCellElement>>;

}
declare module '@elastic/eui/src/components/table' {
	export { EuiTable, EuiTableProps } from '@elastic/eui/src/components/table/table';
	export { EuiTableBody, EuiTableBodyProps } from '@elastic/eui/src/components/table/table_body';
	export { EuiTableFooter } from '@elastic/eui/src/components/table/table_footer';
	export { EuiTableFooterCell, EuiTableFooterCellProps, } from '@elastic/eui/src/components/table/table_footer_cell';
	export { EuiTableHeader, EuiTableHeaderProps } from '@elastic/eui/src/components/table/table_header';
	export { EuiTableHeaderButton, EuiTableHeaderButtonProps, } from '@elastic/eui/src/components/table/table_header_button';
	export { EuiTableHeaderCell, EuiTableHeaderCellProps, } from '@elastic/eui/src/components/table/table_header_cell';
	export { EuiTableHeaderCellCheckbox, EuiTableHeaderCellCheckboxProps, } from '@elastic/eui/src/components/table/table_header_cell_checkbox';
	export { EuiTablePagination, EuiTablePaginationProps, } from '@elastic/eui/src/components/table/table_pagination';
	export { EuiTableHeaderMobile } from '@elastic/eui/src/components/table/mobile/table_header_mobile';
	export { EuiTableSortMobile, EuiTableSortMobileProps, } from '@elastic/eui/src/components/table/mobile/table_sort_mobile';
	export { EuiTableSortMobileItem, EuiTableSortMobileItemProps, } from '@elastic/eui/src/components/table/mobile/table_sort_mobile_item';
	export { EuiTableRow, EuiTableRowProps } from '@elastic/eui/src/components/table/table_row';
	export { EuiTableRowCell, EuiTableRowCellProps } from '@elastic/eui/src/components/table/table_row_cell';
	export { EuiTableRowCellCheckbox } from '@elastic/eui/src/components/table/table_row_cell_checkbox';

}
declare module '@elastic/eui/src/components/tour/tour_step_indicator' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; const statusToClassNameMap: {
	    complete: string;
	    incomplete: string;
	    active: string;
	};
	export const STATUS: ("active" | "incomplete" | "complete")[];
	export type EuiTourStepStatus = keyof typeof statusToClassNameMap;
	export interface EuiTourStepIndicatorProps extends CommonProps, HTMLAttributes<HTMLLIElement> {
	    number: number;
	    status: EuiTourStepStatus;
	}
	export const EuiTourStepIndicator: FunctionComponent<EuiTourStepIndicatorProps>;
	export {};

}
declare module '@elastic/eui/src/components/tour/tour_step' {
	import { CSSProperties, FunctionComponent, ReactElement, ReactNode } from 'react';
	import { CommonProps, NoArgCallback } from '@elastic/eui/src/components/common';
	import { EuiPopoverProps } from '@elastic/eui/src/components/popover'; type PopoverOverrides = 'button' | 'closePopover'; type EuiPopoverPartials = Partial<Pick<EuiPopoverProps, PopoverOverrides>>;
	export interface EuiTourStepProps extends CommonProps, Omit<EuiPopoverProps, PopoverOverrides>, EuiPopoverPartials {
	    /**
	     * Element to which the tour step popover attaches when open
	     */
	    children: ReactElement;
	    /**
	     * Contents of the tour step popover
	     */
	    content: ReactNode;
	    /**
	     * Step will display if set to `true`
	     */
	    isStepOpen?: boolean;
	    /**
	     * Change the default min width of the popover panel
	     */
	    minWidth?: CSSProperties['minWidth'];
	    /**
	     * Change the default max width of the popover panel
	     */
	    maxWidth?: CSSProperties['maxWidth'];
	    /**
	     * Function to call for 'Skip tour' and 'End tour' actions
	     */
	    onFinish: NoArgCallback<void>;
	    /**
	     * The number of the step within the parent tour. 1-based indexing.
	     */
	    step: number;
	    /**
	     * The total number of steps in the tour
	     */
	    stepsTotal: number;
	    /**
	     * Optional, standard DOM `style` attribute. Passed to the EuiPopover panel.
	     */
	    style?: CSSProperties;
	    /**
	     * Smaller title text that appears atop each step in the tour. The subtitle gets wrapped in the appropriate heading level.
	     */
	    subtitle?: ReactNode;
	    /**
	     * Larger title text specific to this step. The title gets wrapped in the appropriate heading level.
	     */
	    title: ReactNode;
	    /**
	     * Extra visual indication of step location
	     */
	    decoration?: 'none' | 'beacon';
	    /**
	     * Element to replace the 'Skip tour' link in the footer
	     */
	    footerAction?: ReactElement;
	}
	export const EuiTourStep: FunctionComponent<EuiTourStepProps>;
	export {};

}
declare module '@elastic/eui/src/components/tour/types' {
	export interface EuiTourState {
	    currentTourStep: number;
	    isTourActive: boolean;
	    tourPopoverWidth: number;
	    tourSubtitle: string;
	}
	interface ActionFinish {
	    type: 'EUI_TOUR_FINISH';
	    payload: {
	        resetTour?: boolean;
	    };
	}
	interface ActionReset {
	    type: 'EUI_TOUR_RESET';
	}
	interface ActionDecrement {
	    type: 'EUI_TOUR_PREVIOUS';
	}
	interface ActionIncrement {
	    type: 'EUI_TOUR_NEXT';
	}
	interface ActionGotoStep {
	    type: 'EUI_TOUR_GOTO';
	    payload: {
	        step: number;
	        isTourActive?: boolean;
	    };
	}
	export type EuiTourAction = ActionFinish | ActionReset | ActionDecrement | ActionIncrement | ActionGotoStep;
	export interface EuiTourActions {
	    finishTour: (resetTour?: boolean) => void;
	    resetTour: () => void;
	    decrementStep: () => void;
	    incrementStep: () => void;
	    goToStep: (step: number, isTourActive?: boolean) => void;
	}
	export {};

}
declare module '@elastic/eui/src/components/tour/useEuiTour' {
	import { EuiTourStepProps } from '@elastic/eui/src/components/tour/tour_step';
	import { EuiTourActions, EuiTourState } from '@elastic/eui/src/components/tour/types';
	export type EuiStatelessTourStep = Omit<EuiTourStepProps, keyof EuiTourState> & Partial<EuiTourState>;
	export const useEuiTour: (stepsArray: EuiStatelessTourStep[], initialState: EuiTourState) => [EuiTourStepProps[], EuiTourActions, EuiTourState];

}
declare module '@elastic/eui/src/components/tour/tour' {
	import { FunctionComponent, ReactElement } from 'react';
	import { EuiStatelessTourStep } from '@elastic/eui/src/components/tour/useEuiTour';
	import { EuiTourStepProps } from '@elastic/eui/src/components/tour/tour_step';
	import { EuiTourActions, EuiTourState } from '@elastic/eui/src/components/tour/types';
	export interface EuiTourProps {
	    children: (steps: EuiTourStepProps[], actions: EuiTourActions, state: EuiTourState) => ReactElement;
	    steps: EuiStatelessTourStep[];
	    initialState: EuiTourState;
	}
	export const EuiTour: FunctionComponent<EuiTourProps>;

}
declare module '@elastic/eui/src/components/tour' {
	export { EuiTour, EuiTourProps } from '@elastic/eui/src/components/tour/tour';
	export { EuiTourStep, EuiTourStepProps } from '@elastic/eui/src/components/tour/tour_step';
	export { EuiTourStepIndicator, EuiTourStepIndicatorProps, } from '@elastic/eui/src/components/tour/tour_step_indicator';
	export { useEuiTour, EuiStatelessTourStep } from '@elastic/eui/src/components/tour/useEuiTour';
	export * from '@elastic/eui/src/components/tour/types';

}
declare module '@elastic/eui/src/components/basic_table/action_types' {
	import { ReactElement, ReactNode } from 'react';
	import { EuiIconType } from '@elastic/eui/src/components/icon/icon';
	import { EuiButtonIconColor } from '@elastic/eui/src/components/button/button_icon/button_icon';
	import { EuiButtonEmptyColor } from '@elastic/eui/src/components/button/button_empty';
	import { ExclusiveUnion } from '@elastic/eui/src/components/common'; type IconFunction<T> = (item: T) => EuiIconType; type ButtonColor = EuiButtonIconColor | EuiButtonEmptyColor; type EuiButtonIconColorFunction<T> = (item: T) => ButtonColor;
	export interface DefaultItemActionBase<T> {
	    /**
	     * The display name of the action (will be the button caption)
	     */
	    name: ReactNode | ((item: T) => ReactNode);
	    /**
	     * Describes the action (will be the button title)
	     */
	    description: string;
	    /**
	     * A handler function to execute the action
	     */
	    onClick?: (item: T) => void;
	    href?: string;
	    target?: string;
	    /**
	     * A callback function that determines whether the action is available
	     */
	    available?: (item: T) => boolean;
	    /**
	     * A callback function that determines whether the action is enabled
	     */
	    enabled?: (item: T) => boolean;
	    isPrimary?: boolean;
	    'data-test-subj'?: string;
	}
	export interface DefaultItemEmptyButtonAction<T> extends DefaultItemActionBase<T> {
	    /**
	     * The type of action
	     */
	    type?: 'button';
	    color?: EuiButtonEmptyColor | EuiButtonIconColorFunction<T>;
	}
	export interface DefaultItemIconButtonAction<T> extends DefaultItemActionBase<T> {
	    type: 'icon';
	    /**
	     * Associates an icon with the button
	     */
	    icon: EuiIconType | IconFunction<T>;
	    /**
	     * Defines the color of the button
	     */
	    color?: EuiButtonIconColor | EuiButtonIconColorFunction<T>;
	}
	export type DefaultItemAction<T> = ExclusiveUnion<DefaultItemEmptyButtonAction<T>, DefaultItemIconButtonAction<T>>;
	export interface CustomItemAction<T> {
	    /**
	     * The function that renders the action. Note that the returned node is expected to have `onFocus` and `onBlur` functions
	     */
	    render: (item: T, enabled: boolean) => ReactElement;
	    /**
	     * A callback that defines whether the action is available
	     */
	    available?: (item: T) => boolean;
	    /**
	     * A callback that defines whether the action is enabled
	     */
	    enabled?: (item: T) => boolean;
	    isPrimary?: boolean;
	}
	export type Action<T> = DefaultItemAction<T> | CustomItemAction<T>;
	export const isCustomItemAction: (action: DefaultItemAction<any> | CustomItemAction<any>) => action is CustomItemAction<any>;
	export {};

}
declare module '@elastic/eui/src/components/basic_table/pagination_bar' {
	
	import { ItemsPerPageChangeHandler, PageChangeHandler } from '@elastic/eui/src/components/table/table_pagination/table_pagination';
	export interface Pagination {
	    /**
	     * The current page (zero-based) index
	     */
	    pageIndex: number;
	    /**
	     * The maximum number of items that can be shown in a single page
	     */
	    pageSize: number;
	    /**
	     * The total number of items the page is "sliced" of
	     */
	    totalItemCount: number;
	    /**
	     * Configures the page size dropdown options
	     */
	    pageSizeOptions?: number[];
	    /**
	     * Hides the page size dropdown
	     */
	    hidePerPageOptions?: boolean;
	}
	export interface PaginationBarProps {
	    pagination: Pagination;
	    onPageSizeChange: ItemsPerPageChangeHandler;
	    onPageChange: PageChangeHandler;
	    /**
	     * id of the table being controlled
	     */
	    'aria-controls'?: string;
	    'aria-label'?: string;
	}
	export const defaults: {
	    pageSizeOptions: number[];
	};
	export const PaginationBar: ({ pagination, onPageSizeChange, onPageChange, "aria-controls": ariaControls, "aria-label": ariaLabel, }: PaginationBarProps) => JSX.Element;

}
declare module '@elastic/eui/src/components/basic_table/table_types' {
	import { ReactElement, ReactNode, TdHTMLAttributes } from 'react';
	import { Direction, HorizontalAlignment } from '@elastic/eui/src/services';
	import { Pagination } from '@elastic/eui/src/components/basic_table/pagination_bar';
	import { Action } from '@elastic/eui/src/components/basic_table/action_types';
	import { Primitive } from '@elastic/eui/src/services/sort/comparators';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiTableRowCellMobileOptionsShape } from '@elastic/eui/src/components/table/table_row_cell';
	export type ItemId<T> = string | number | ((item: T) => string);
	export type ItemIdResolved = string | number;
	export type EuiTableDataType = 'auto' | 'string' | 'number' | 'boolean' | 'date';
	export interface EuiTableFooterProps<T> {
	    items: T[];
	    pagination?: Pagination;
	}
	export interface EuiTableFieldDataColumnType<T> extends CommonProps, TdHTMLAttributes<HTMLTableDataCellElement> {
	    /**
	     * A field of the item (may be a nested field)
	     */
	    field: keyof T | (string & {});
	    /**
	     * The display name of the column
	     */
	    name: ReactNode;
	    /**
	     * A description of the column (will be presented as a title over the column header)
	     */
	    description?: string;
	    /**
	     * Describes the data types of the displayed value (serves as a rendering hint for the table)
	     */
	    dataType?: EuiTableDataType;
	    /**
	     * A CSS width property. Hints for the required width of the column (e.g. "30%", "100px", etc..)
	     */
	    width?: string;
	    /**
	     * Defines whether the user can sort on this column. If a function is provided, this function returns the value to sort against
	     */
	    sortable?: boolean | ((item: T) => Primitive);
	    isExpander?: boolean;
	    textOnly?: boolean;
	    /**
	     * Defines the horizontal alignment of the column
	     */
	    align?: HorizontalAlignment;
	    /**
	     * Indicates whether this column should truncate its content when it doesn't fit
	     */
	    truncateText?: boolean;
	    mobileOptions?: Omit<EuiTableRowCellMobileOptionsShape, 'render'> & {
	        render?: (item: T) => ReactNode;
	    };
	    /**
	     * Describe a custom renderer function for the content
	     */
	    render?: (value: any, record: T) => ReactNode;
	    /**
	     * Content to display in the footer beneath this column
	     */
	    footer?: string | ReactElement | ((props: EuiTableFooterProps<T>) => ReactNode);
	    /**
	     * Disables the user's ability to change the sort but still shows the current direction
	     */
	    readOnly?: boolean;
	}
	export interface EuiTableComputedColumnType<T> extends CommonProps, TdHTMLAttributes<HTMLTableDataCellElement> {
	    /**
	     * A function that computes the value for each item and renders it
	     */
	    render: (record: T) => ReactNode;
	    /**
	     * The display name of the column
	     */
	    name?: ReactNode;
	    /**
	     * A description of the column (will be presented as a title over the column header
	     */
	    description?: string;
	    /**
	     * If provided, allows this column to be sorted on. Must return the value to sort against.
	     */
	    sortable?: (item: T) => Primitive;
	    /**
	     * A CSS width property. Hints for the required width of the column
	     */
	    width?: string;
	    /**
	     * Indicates whether this column should truncate its content when it doesn't fit
	     */
	    truncateText?: boolean;
	    isExpander?: boolean;
	    align?: HorizontalAlignment;
	    /**
	     * Disables the user's ability to change the sort but still shows the current direction
	     */
	    readOnly?: boolean;
	}
	export interface EuiTableActionsColumnType<T> {
	    /**
	     * An array of one of the objects: #DefaultItemAction or #CustomItemAction
	     */
	    actions: Array<Action<T>>;
	    /**
	     * The display name of the column
	     */
	    name?: ReactNode;
	    /**
	     * A description of the column (will be presented as a title over the column header
	     */
	    description?: string;
	    /**
	     * A CSS width property. Hints for the required width of the column
	     */
	    width?: string;
	}
	export interface EuiTableSortingType<T> {
	    /**
	     * Indicates the property/field to sort on
	     */
	    sort?: {
	        field: keyof T;
	        direction: Direction;
	    };
	    /**
	     * Enables/disables unsorting of table columns. Supported by EuiInMemoryTable.
	     */
	    allowNeutralSort?: boolean;
	    /**
	     * Enables the default sorting ability for each column.
	     */
	    enableAllColumns?: boolean;
	    /**
	     * Disables the user's ability to change the sort but still shows the current direction
	     */
	    readOnly?: boolean;
	}
	export interface EuiTableSelectionType<T> {
	    /**
	     * A callback that will be called whenever the item selection changes
	     */
	    onSelectionChange?: (selection: T[]) => void;
	    /**
	     * A callback that is called per item to indicate whether it is selectable
	     */
	    selectable?: (item: T) => boolean;
	    /**
	     * A callback that is called per item to retrieve a message for its selectable state.We display these messages as a tooltip on an unselectable checkbox
	     */
	    selectableMessage?: (selectable: boolean, item: T) => string;
	    initialSelected?: T[];
	}

}
declare module '@elastic/eui/src/components/basic_table/collapsed_item_actions' {
	import { Component, FocusEvent } from 'react';
	import { Action } from '@elastic/eui/src/components/basic_table/action_types';
	import { ItemIdResolved } from '@elastic/eui/src/components/basic_table/table_types';
	export interface CollapsedItemActionsProps<T> {
	    actions: Array<Action<T>>;
	    item: T;
	    itemId: ItemIdResolved;
	    actionEnabled: (action: Action<T>) => boolean;
	    className?: string;
	    onFocus?: (event: FocusEvent) => void;
	    onBlur?: () => void;
	}
	interface CollapsedItemActionsState {
	    popoverOpen: boolean;
	}
	export class CollapsedItemActions<T> extends Component<CollapsedItemActionsProps<T>, CollapsedItemActionsState> {
	    private popoverDiv;
	    state: {
	        popoverOpen: boolean;
	    };
	    togglePopover: () => void;
	    closePopover: () => void;
	    onPopoverBlur: () => void;
	    registerPopoverDiv: (popoverDiv: HTMLDivElement) => void;
	    componentWillUnmount(): void;
	    onClickItem: (onClickAction: (() => void) | undefined) => void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/basic_table/default_item_action' {
	import { ReactElement } from 'react';
	import { DefaultItemAction as Action } from '@elastic/eui/src/components/basic_table/action_types';
	export interface DefaultItemActionProps<T> {
	    action: Action<T>;
	    enabled: boolean;
	    item: T;
	    className?: string;
	}
	export const DefaultItemAction: <T extends {}>({ action, enabled, item, className, }: DefaultItemActionProps<T>) => ReactElement;

}
declare module '@elastic/eui/src/components/basic_table/custom_item_action' {
	import { Component } from 'react';
	import { CustomItemAction as Action } from '@elastic/eui/src/components/basic_table/action_types';
	export interface CustomItemActionProps<T> {
	    action: Action<T>;
	    enabled: boolean;
	    item: T;
	    className: string;
	    index?: number;
	}
	interface CustomItemActionState {
	    hasFocus: boolean;
	}
	export class CustomItemAction<T> extends Component<CustomItemActionProps<T>, CustomItemActionState> {
	    private mounted;
	    constructor(props: CustomItemActionProps<T>);
	    componentDidMount(): void;
	    componentWillUnmount(): void;
	    onFocus: () => void;
	    onBlur: () => void;
	    hasFocus: () => boolean;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/basic_table/expanded_item_actions' {
	import { ReactElement } from 'react';
	import { Action } from '@elastic/eui/src/components/basic_table/action_types';
	import { ItemIdResolved } from '@elastic/eui/src/components/basic_table/table_types';
	export interface ExpandedItemActionsProps<T> {
	    actions: Array<Action<T>>;
	    itemId: ItemIdResolved;
	    item: T;
	    actionEnabled: (action: Action<T>) => boolean;
	    className?: string;
	}
	export const ExpandedItemActions: <T extends {}>({ actions, itemId, item, actionEnabled, className, }: ExpandedItemActionsProps<T>) => ReactElement;

}
declare module '@elastic/eui/src/components/basic_table/basic_table' {
	import { Component, HTMLAttributes, ReactNode } from 'react';
	import { Direction } from '@elastic/eui/src/services';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiTableProps } from '@elastic/eui/src/components/table';
	import { Pagination } from '@elastic/eui/src/components/basic_table/pagination_bar';
	import { EuiTableActionsColumnType, EuiTableComputedColumnType, EuiTableDataType, EuiTableFieldDataColumnType, ItemId, EuiTableSelectionType, EuiTableSortingType, ItemIdResolved } from '@elastic/eui/src/components/basic_table/table_types';
	interface ItemIdToExpandedRowMap {
	    [id: string]: ReactNode;
	}
	export function getItemId<T>(item: T, itemId?: ItemId<T>): any;
	export type EuiBasicTableColumn<T> = EuiTableFieldDataColumnType<T> | EuiTableComputedColumnType<T> | EuiTableActionsColumnType<T>;
	export interface Criteria<T> {
	    /**
	     * If the shown items represents a page (slice) into a bigger set, this describes this page
	     */
	    page?: {
	        index: number;
	        size: number;
	    };
	    /**
	     * If the shown items are sorted, this describes the sort criteria
	     */
	    sort?: {
	        field: keyof T;
	        direction: Direction;
	    };
	}
	export interface CriteriaWithPagination<T> extends Criteria<T> {
	    /**
	     * If the shown items represents a page (slice) into a bigger set, this describes this page
	     */
	    page: {
	        index: number;
	        size: number;
	    };
	} type CellPropsCallback<T> = (item: T, column: EuiBasicTableColumn<T>) => object; type RowPropsCallback<T> = (item: T) => object;
	interface BasicTableProps<T> extends Omit<EuiTableProps, 'onChange'> {
	    /**
	     * Describes how to extract a unique ID from each item, used for selections & expanded rows
	     */
	    itemId?: ItemId<T>;
	    /**
	     * Row expansion uses the itemId prop to identify each row
	     */
	    itemIdToExpandedRowMap?: ItemIdToExpandedRowMap;
	    /**
	     * A list of objects to who in the table - an item per row
	     */
	    items: T[];
	    /**
	     * Applied to `EuiTableRowCell`
	     */
	    cellProps?: object | CellPropsCallback<T>;
	    /**
	     * An array of one of the objects: #EuiTableFieldDataColumnType, #EuiTableComputedColumnType or #EuiTableActionsColumnType.
	     */
	    columns: Array<EuiBasicTableColumn<T>>;
	    /**
	     * Error message to display
	     */
	    error?: string;
	    /**
	     * Describes the content of the table. If not specified, the caption will be "This table contains {itemCount} rows."
	     */
	    tableCaption?: string;
	    /**
	     * Indicates which column should be used as the identifying cell in each row. Should match a "field" prop in FieldDataColumn
	     */
	    rowHeader?: string;
	    hasActions?: boolean;
	    isExpandable?: boolean;
	    isSelectable?: boolean;
	    /**
	     * Provides an infinite loading indicator
	     */
	    loading?: boolean;
	    /**
	     * Message to display if table is empty
	     */
	    noItemsMessage?: ReactNode;
	    /**
	     * Called whenever pagination or sorting changes (this property is required when either pagination or sorting is configured). See #Criteria or #CriteriaWithPagination
	     */
	    onChange?: (criteria: Criteria<T>) => void;
	    /**
	     * Configures #Pagination
	     */
	    pagination?: undefined;
	    /**
	     * If true, will convert table to cards in mobile view
	     */
	    responsive?: boolean;
	    /**
	     * Applied to `EuiTableRow`
	     */
	    rowProps?: object | RowPropsCallback<T>;
	    /**
	     * Configures #EuiTableSelectionType
	     */
	    selection?: EuiTableSelectionType<T>;
	    /**
	     * Configures #EuiTableSortingType
	     */
	    sorting?: EuiTableSortingType<T>;
	    /**
	     * Sets the table-layout CSS property. Note that auto tableLayout prevents truncateText from working properly.
	     */
	    tableLayout?: 'fixed' | 'auto';
	    /**
	     * Applied to table cells => Any cell using render function will set this to be false, leading to unnecessary word breaks. Apply textOnly: true in order to ensure it breaks properly
	     */
	    textOnly?: boolean;
	} type BasicTableWithPaginationProps<T> = Omit<BasicTableProps<T>, 'pagination' | 'onChange'> & {
	    pagination: Pagination;
	    onChange?: (criteria: CriteriaWithPagination<T>) => void;
	};
	export type EuiBasicTableProps<T> = CommonProps & Omit<HTMLAttributes<HTMLDivElement>, 'onChange'> & (BasicTableProps<T> | BasicTableWithPaginationProps<T>);
	interface State<T> {
	    initialSelectionRendered: boolean;
	    selection: T[];
	}
	export class EuiBasicTable<T = any> extends Component<EuiBasicTableProps<T>, State<T>> {
	    static defaultProps: {
	        responsive: boolean;
	        tableLayout: string;
	        noItemsMessage: JSX.Element;
	    };
	    static getDerivedStateFromProps<T>(nextProps: EuiBasicTableProps<T>, prevState: State<T>): {
	        selection: T[];
	    } | null;
	    private cleanups;
	    private tbody;
	    constructor(props: EuiBasicTableProps<T>);
	    componentDidMount(): void;
	    componentDidUpdate(prevProps: EuiBasicTableProps<T>): void;
	    componentWillUnmount(): void;
	    getInitialSelection(): void;
	    setSelection(newSelection: T[]): void;
	    private setTbody;
	    private addLoadingListeners;
	    private removeLoadingListeners;
	    buildCriteria(props: EuiBasicTableProps<T>): Criteria<T>;
	    changeSelection(selection: T[]): void;
	    clearSelection(): void;
	    onPageSizeChange(size: number): void;
	    onPageChange(index: number): void;
	    onColumnSortChange(column: EuiBasicTableColumn<T>): void;
	    tableId: string;
	    render(): JSX.Element;
	    renderTable(): JSX.Element;
	    renderTableMobileSort(): JSX.Element | null;
	    renderTableCaption(): JSX.Element;
	    selectAllIdGenerator: (idSuffix?: string) => string;
	    renderSelectAll: (isMobile: boolean) => JSX.Element | undefined;
	    renderTableHead(): JSX.Element;
	    renderTableFooter(): JSX.Element | null;
	    renderTableBody(): JSX.Element;
	    renderErrorBody(error: string): JSX.Element;
	    renderEmptyBody(): JSX.Element;
	    renderItemRow(item: T, rowIndex: number): JSX.Element;
	    renderItemSelectionCell(itemId: ItemId<T>, item: T, selected: boolean): JSX.Element;
	    renderItemActionsCell(itemId: ItemIdResolved, item: T, column: EuiTableActionsColumnType<T>, columnIndex: number): JSX.Element;
	    renderItemFieldDataCell(itemId: ItemId<T>, item: T, column: EuiTableFieldDataColumnType<T>, columnIndex: number, setScopeRow: boolean): JSX.Element;
	    renderItemComputedCell(itemId: ItemId<T>, item: T, column: EuiTableComputedColumnType<T>, columnIndex: number): JSX.Element;
	    renderItemCell(item: T, column: EuiBasicTableColumn<T>, key: string | number, content: ReactNode, setScopeRow: boolean): JSX.Element;
	    resolveColumnSortDirection: (column: EuiBasicTableColumn<T>) => "desc" | "asc" | undefined;
	    resolveColumnOnSort: (column: EuiBasicTableColumn<T>) => (() => void) | undefined;
	    getRendererForDataType(dataType?: EuiTableDataType): (value: any) => string;
	    getAlignForDataType(dataType?: EuiTableDataType): import ("@elastic/eui/src/components/button/button_content").ButtonContentIconSide;
	    renderPaginationBar(): JSX.Element | undefined;
	}
	export {};

}
declare module '@elastic/eui/src/components/basic_table/in_memory_table' {
	import React, { Component, ReactNode } from 'react';
	import { EuiBasicTable, Criteria, EuiBasicTableProps, CriteriaWithPagination } from '@elastic/eui/src/components/basic_table/basic_table';
	import { PropertySort } from '@elastic/eui/src/services';
	import { Direction } from '@elastic/eui/src/services/sort';
	import { Query } from '@elastic/eui/src/components/search_bar';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiSearchBarProps } from '@elastic/eui/src/components/search_bar/search_bar';
	import { SchemaType } from '@elastic/eui/src/components/search_bar/search_box';
	interface onChangeArgument {
	    query: Query | null;
	    queryText: string;
	    error: Error | null;
	}
	export type Search = boolean | EuiSearchBarProps;
	interface PaginationOptions {
	    pageSizeOptions?: number[];
	    hidePerPageOptions?: boolean;
	    initialPageIndex?: number;
	    initialPageSize?: number;
	    pageIndex?: number;
	    pageSize?: number;
	} type Pagination = boolean | PaginationOptions;
	interface SortingOptions {
	    sort: PropertySort;
	} type Sorting = boolean | SortingOptions; type InMemoryTableProps<T> = Omit<EuiBasicTableProps<T>, 'pagination' | 'sorting' | 'noItemsMessage'> & {
	    message?: ReactNode;
	    /**
	     * Configures #Search.
	     */
	    search?: Search;
	    pagination?: undefined;
	    sorting?: Sorting;
	    /**
	     * Set `allowNeutralSort` to false to force column sorting. Defaults to true.
	     */
	    allowNeutralSort?: boolean;
	    /**
	     * Callback for when table pagination or sorting is changed. This is meant to be informational only, and not used to set any state as the in-memory table already manages this state. See #Criteria or #CriteriaWithPagination.
	     */
	    onTableChange?: (nextValues: Criteria<T>) => void;
	    executeQueryOptions?: {
	        defaultFields?: string[];
	        isClauseMatcher?: (...args: any) => boolean;
	        explain?: boolean;
	    };
	    /**
	     * Insert content between the search bar and table components.
	     */
	    childrenBetween?: ReactNode;
	}; type InMemoryTablePropsWithPagination<T> = Omit<InMemoryTableProps<T>, 'pagination' | 'onTableChange'> & {
	    pagination: Pagination;
	    onTableChange?: (nextValues: CriteriaWithPagination<T>) => void;
	};
	export type EuiInMemoryTableProps<T> = CommonProps & (InMemoryTableProps<T> | InMemoryTablePropsWithPagination<T>);
	interface State<T> {
	    prevProps: {
	        items: T[];
	        sortName: ReactNode;
	        sortDirection?: Direction;
	        search?: Search;
	    };
	    search?: Search;
	    query: Query | null;
	    pageIndex: number;
	    pageSize?: number;
	    pageSizeOptions?: number[];
	    sortName: ReactNode;
	    sortDirection?: Direction;
	    allowNeutralSort: boolean;
	    hidePerPageOptions: boolean | undefined;
	}
	export class EuiInMemoryTable<T> extends Component<EuiInMemoryTableProps<T>, State<T>> {
	    static defaultProps: {
	        responsive: boolean;
	        tableLayout: string;
	    };
	    tableRef: React.RefObject<EuiBasicTable>;
	    static getDerivedStateFromProps<T>(nextProps: EuiInMemoryTableProps<T>, prevState: State<T>): State<T> | null;
	    constructor(props: EuiInMemoryTableProps<T>);
	    setSelection(newSelection: T[]): void;
	    onTableChange: ({ page, sort }: Criteria<T>) => void;
	    onQueryChange: ({ query, queryText, error }: onChangeArgument) => void;
	    renderSearchBar(): JSX.Element | undefined;
	    resolveSearchSchema(): SchemaType;
	    getItemSorter(): (a: T, b: T) => number;
	    getItems(): {
	        items: T[];
	        totalItemCount: number;
	    };
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/basic_table' {
	export { EuiBasicTable, EuiBasicTableProps, EuiBasicTableColumn, Criteria, CriteriaWithPagination, } from '@elastic/eui/src/components/basic_table/basic_table';
	export { EuiInMemoryTable, EuiInMemoryTableProps, Search, } from '@elastic/eui/src/components/basic_table/in_memory_table';
	export { EuiTableDataType, EuiTableFooterProps, EuiTableFieldDataColumnType, EuiTableComputedColumnType, EuiTableActionsColumnType, EuiTableSelectionType, EuiTableSortingType, } from '@elastic/eui/src/components/basic_table/table_types';
	export { Pagination } from '@elastic/eui/src/components/basic_table/pagination_bar';
	export { DefaultItemAction, CustomItemAction } from '@elastic/eui/src/components/basic_table/action_types';

}
declare module '@elastic/eui/src/components/text_diff/text_diff' {
	import { HTMLAttributes, ElementType } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	interface Props {
	    /**
	     * The starting string
	     */
	    beforeText: string;
	    /**
	     * The string used to compare against `beforeText`
	     */
	    afterText: string;
	    /**
	     * HTML element to wrap insertion differences.
	     * Defaults to `ins`
	     */
	    insertComponent?: ElementType;
	    /**
	     * HTML element to wrap deletion differences.
	     * Defaults to `del`
	     */
	    deleteComponent?: ElementType;
	    /**
	     * HTML element to wrap text with no differences.
	     * Doesn't wrap with anything by default
	     */
	    sameComponent?: ElementType;
	    /**
	     * Time in milliseconds. Passing a timeout of value '0' disables the timeout state
	     */
	    timeout?: number;
	}
	export type EuiTextDiffProps = CommonProps & Props & HTMLAttributes<HTMLElement>;
	export const useEuiTextDiff: ({ className, insertComponent, deleteComponent, sameComponent, beforeText, afterText, timeout, ...rest }: EuiTextDiffProps) => (JSX.Element | [0 | 1 | -1, string][])[];
	export {};

}
declare module '@elastic/eui/src/components/text_diff' {
	export { useEuiTextDiff, EuiTextDiffProps } from '@elastic/eui/src/components/text_diff/text_diff';

}
declare module '@elastic/eui/src/components/toast/toast' {
	import { FunctionComponent, HTMLAttributes, ReactNode } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { IconType } from '@elastic/eui/src/components/icon'; type ToastColor = 'primary' | 'success' | 'warning' | 'danger';
	export const COLORS: ("primary" | "success" | "warning" | "danger")[];
	export interface EuiToastProps extends CommonProps, Omit<HTMLAttributes<HTMLDivElement>, 'title'> {
	    title?: ReactNode;
	    color?: ToastColor;
	    iconType?: IconType;
	    onClose?: () => void;
	}
	export const EuiToast: FunctionComponent<EuiToastProps>;
	export {};

}
declare module '@elastic/eui/src/services/time/timer' {
	export class Timer {
	    id: any;
	    callback: undefined | (() => void);
	    finishTime: number | undefined;
	    timeRemaining: number | undefined;
	    constructor(callback: () => void, timeMs: number);
	    pause: () => void;
	    resume: () => void;
	    clear: () => void;
	    finish: () => void;
	}

}
declare module '@elastic/eui/src/services/time' {
	export { Timer } from '@elastic/eui/src/services/time/timer';

}
declare module '@elastic/eui/src/components/toast/global_toast_list_item' {
	import { FunctionComponent, ReactElement } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export interface EuiGlobalToastListItemProps {
	    isDismissed?: boolean;
	    /**
	     * ReactElement to render as this component's content
	     */
	    children?: ReactElement;
	}
	export const EuiGlobalToastListItem: FunctionComponent<CommonProps & EuiGlobalToastListItemProps>;

}
declare module '@elastic/eui/src/components/toast/global_toast_list' {
	import { Component, ReactChild } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { Timer } from '@elastic/eui/src/services/time';
	import { EuiToastProps } from '@elastic/eui/src/components/toast/toast'; type ToastSide = 'right' | 'left';
	export const SIDES: import ("@elastic/eui/src/components/button/button_content").ButtonContentIconSide[];
	export const TOAST_FADE_OUT_MS = 250;
	export interface Toast extends EuiToastProps {
	    id: string;
	    text?: ReactChild;
	    toastLifeTimeMs?: number;
	}
	export interface EuiGlobalToastListProps extends CommonProps {
	    toasts: Toast[];
	    dismissToast: (this: EuiGlobalToastList, toast: Toast) => void;
	    toastLifeTimeMs: number;
	    /**
	     * Determines which side of the browser window the toasts should appear
	     */
	    side?: ToastSide;
	}
	interface State {
	    toastIdToDismissedMap: {
	        [toastId: string]: boolean;
	    };
	}
	export class EuiGlobalToastList extends Component<EuiGlobalToastListProps, State> {
	    state: State;
	    dismissTimeoutIds: number[];
	    toastIdToTimerMap: {
	        [toastId: string]: Timer;
	    };
	    isScrollingToBottom: boolean;
	    isScrolledToBottom: boolean;
	    isUserInteracting: boolean;
	    isScrollingAnimationFrame: number;
	    startScrollingAnimationFrame: number;
	    listElement: Element | null;
	    static defaultProps: {
	        toasts: never[];
	        side: string;
	    };
	    startScrollingToBottom(): void;
	    onMouseEnter: () => void;
	    onMouseLeave: () => void;
	    onScroll: () => void;
	    scheduleAllToastsForDismissal: () => void;
	    scheduleToastForDismissal: (toast: Toast) => void;
	    dismissToast: (toast: Toast) => void;
	    componentDidMount(): void;
	    componentDidUpdate(prevProps: EuiGlobalToastListProps): void;
	    componentWillUnmount(): void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui/src/components/toast' {
	export { EuiToast } from '@elastic/eui/src/components/toast/toast';
	export { EuiGlobalToastList, EuiGlobalToastListProps, Toast as EuiGlobalToastListToast, } from '@elastic/eui/src/components/toast/global_toast_list';
	export { EuiGlobalToastListItem, EuiGlobalToastListItemProps, } from '@elastic/eui/src/components/toast/global_toast_list_item';

}
declare module '@elastic/eui/src/components/resizable_container/types' {
	import { KeyboardEvent, MouseEvent, TouchEvent } from 'react';
	export type PanelModeType = 'collapsible' | 'main' | 'custom';
	export type PanelPosition = 'first' | 'middle' | 'last';
	export type PanelDirection = 'left' | 'right';
	export interface EuiResizablePanelController {
	    id: string;
	    size: number;
	    getSizePx: () => number;
	    minSize: string[];
	    mode?: PanelModeType;
	    isCollapsed: boolean;
	    prevSize: number;
	    position: PanelPosition;
	}
	export interface EuiResizableButtonController {
	    id: string;
	    ref: HTMLElement;
	    isDisabled: boolean;
	    isFocused: boolean;
	}
	export interface EuiResizableContainerRegistry {
	    panels: {
	        [key: string]: EuiResizablePanelController;
	    };
	    resizers: {
	        [key: string]: EuiResizableButtonController;
	    };
	}
	export type EuiResizableButtonMouseEvent = MouseEvent<HTMLButtonElement> | TouchEvent<HTMLButtonElement>;
	export type EuiResizableButtonKeyDownEvent = KeyboardEvent<HTMLButtonElement>;
	export interface EuiResizableContainerState {
	    isDragging: boolean;
	    currentResizerPos: number;
	    prevPanelId: string | null;
	    nextPanelId: string | null;
	    containerSize: number;
	    isHorizontal?: boolean;
	    panels: EuiResizableContainerRegistry['panels'];
	    resizers: EuiResizableContainerRegistry['resizers'];
	}
	export interface ActionToggleOptions {
	    direction: PanelDirection;
	}
	interface ActionReset {
	    type: 'EUI_RESIZABLE_RESET';
	}
	interface ActionInit {
	    type: 'EUI_RESIZABLE_CONTAINER_INIT';
	    payload: {
	        isHorizontal: boolean;
	    };
	}
	export interface ActionDragStart {
	    type: 'EUI_RESIZABLE_DRAG_START';
	    payload: {
	        prevPanelId: string;
	        nextPanelId: string;
	        position: number;
	    };
	}
	export interface ActionDragMove {
	    type: 'EUI_RESIZABLE_DRAG_MOVE';
	    payload: {
	        prevPanelId: string;
	        nextPanelId: string;
	        position: number;
	    };
	}
	export interface ActionKeyMove {
	    type: 'EUI_RESIZABLE_KEY_MOVE';
	    payload: {
	        prevPanelId: string;
	        nextPanelId: string;
	        direction: 'forward' | 'backward';
	    };
	}
	export interface ActionResize {
	    type: 'EUI_RESIZABLE_RESIZE';
	    payload: {};
	}
	export interface ActionToggle {
	    type: 'EUI_RESIZABLE_TOGGLE';
	    payload: {
	        panelId: string;
	        options: ActionToggleOptions;
	    };
	}
	interface ActionRegisterPanel {
	    type: 'EUI_RESIZABLE_PANEL_REGISTER';
	    payload: {
	        panel: EuiResizablePanelController;
	    };
	}
	interface ActionDeregisterPanel {
	    type: 'EUI_RESIZABLE_PANEL_DEREGISTER';
	    payload: {
	        panelId: EuiResizablePanelController['id'];
	    };
	}
	interface ActionRegisterResizer {
	    type: 'EUI_RESIZABLE_BUTTON_REGISTER';
	    payload: {
	        resizer: EuiResizableButtonController;
	    };
	}
	interface ActionDeregisterResizer {
	    type: 'EUI_RESIZABLE_BUTTON_DEREGISTER';
	    payload: {
	        resizerId: EuiResizableButtonController['id'];
	    };
	}
	export interface ActionFocus {
	    type: 'EUI_RESIZABLE_BUTTON_FOCUS';
	    payload: {
	        resizerId: EuiResizableButtonController['id'];
	    };
	}
	interface ActionBlur {
	    type: 'EUI_RESIZABLE_BUTTON_BLUR';
	}
	interface ActionOnChange {
	    type: 'EUI_RESIZABLE_ONCHANGE';
	}
	export type EuiResizableContainerAction = ActionReset | ActionInit | ActionRegisterPanel | ActionDeregisterPanel | ActionRegisterResizer | ActionDeregisterResizer | ActionDragStart | ActionDragMove | ActionKeyMove | ActionResize | ActionToggle | ActionFocus | ActionBlur | ActionOnChange;
	export interface EuiResizableContainerActions {
	    reset: () => void;
	    initContainer: (isHorizontal: boolean) => void;
	    registerPanel: (panel: EuiResizablePanelController) => void;
	    deregisterPanel: (panelId: EuiResizablePanelController['id']) => void;
	    registerResizer: (resizer: EuiResizableButtonController) => void;
	    deregisterResizer: (resizerId: EuiResizableButtonController['id']) => void;
	    dragStart: ({ prevPanelId, nextPanelId, position, }: ActionDragStart['payload']) => void;
	    dragMove: ({ prevPanelId, nextPanelId, position, }: ActionDragMove['payload']) => void;
	    keyMove: ({ prevPanelId, nextPanelId, direction, }: ActionKeyMove['payload']) => void;
	    resizerFocus: (resizerId: ActionFocus['payload']['resizerId']) => void;
	    resizerBlur: () => void;
	    togglePanel: (panelId: ActionToggle['payload']['panelId'], options: ActionToggle['payload']['options']) => void;
	}
	export {};

}
declare module '@elastic/eui/src/components/resizable_container/context' {
	
	import { EuiResizableContainerRegistry } from '@elastic/eui/src/components/resizable_container/types';
	interface ContainerContextProps {
	    registry?: EuiResizableContainerRegistry;
	}
	interface ContextProviderProps extends Required<ContainerContextProps> {
	    /**
	     * ReactNode to render as this component's content
	     */
	    children: any;
	}
	export function EuiResizableContainerContextProvider({ children, registry, }: ContextProviderProps): JSX.Element;
	export const useEuiResizableContainerContext: () => ContainerContextProps;
	export {};

}
declare module '@elastic/eui/src/components/resizable_container/resizable_button' {
	import { FunctionComponent, ButtonHTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiResizableButtonController, EuiResizableButtonMouseEvent, EuiResizableButtonKeyDownEvent } from '@elastic/eui/src/components/resizable_container/types';
	interface EuiResizableButtonControls {
	    onKeyDown: (eve: EuiResizableButtonKeyDownEvent) => void;
	    onMouseDown: (eve: EuiResizableButtonMouseEvent) => void;
	    onTouchStart: (eve: EuiResizableButtonMouseEvent) => void;
	    onFocus: (id: string) => void;
	    onBlur: () => void;
	    registration: {
	        register: (resizer: EuiResizableButtonController) => void;
	        deregister: (resizerId: EuiResizableButtonController['id']) => void;
	    };
	    isHorizontal: boolean;
	}
	export interface EuiResizableButtonProps extends Omit<ButtonHTMLAttributes<HTMLButtonElement>, keyof EuiResizableButtonControls>, CommonProps, Partial<EuiResizableButtonControls> {
	}
	export const EuiResizableButton: FunctionComponent<EuiResizableButtonProps>;
	export function euiResizableButtonWithControls(controls: EuiResizableButtonControls): (props: CommonProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/resizable_container/resizable_collapse_button' {
	import { FunctionComponent } from 'react';
	import { EuiButtonIconPropsForButton } from '@elastic/eui/src/components/button';
	import { ToggleOptions } from '@elastic/eui/src/components/resizable_container/resizable_panel';
	import { EuiResizableContainerProps } from '@elastic/eui/src/components/resizable_container/resizable_container';
	export type EuiResizableCollapseButtonProps = Omit<EuiButtonIconPropsForButton, 'iconType'> & {
	    /**
	     * Position of the toggle button.
	     * Enums based on the `direction` of the EuiResizableContainer
	     */
	    internalPosition?: ToggleOptions['position'];
	    /**
	     * Position of the toggle button.
	     * Enums based on the `direction` of the EuiResizableContainer
	     */
	    externalPosition?: 'before' | 'after';
	    /**
	     * Same direction derived from EuiResizableContainer
	     */
	    direction?: EuiResizableContainerProps['direction'];
	    /**
	     *
	     */
	    isVisible?: boolean;
	    isCollapsed?: boolean;
	};
	export const EuiResizableCollapseButton: FunctionComponent<EuiResizableCollapseButtonProps>;

}
declare module '@elastic/eui/src/components/resizable_container/resizable_panel' {
	import { CSSProperties, ReactNode, FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { PanelPaddingSize, _EuiPanelProps } from '@elastic/eui/src/components/panel/panel';
	import { EuiResizablePanelController, ActionToggleOptions, PanelModeType } from '@elastic/eui/src/components/resizable_container/types';
	export interface ToggleOptions {
	    'data-test-subj'?: string;
	    className?: string;
	    /**
	     * Position of the toggle button.
	     * Enums based on the `direction` of the EuiResizableContainer
	     */
	    position?: 'top' | 'middle' | 'bottom' | 'left' | 'right';
	}
	export type ModeOptions = PanelModeType | [PanelModeType, Partial<ToggleOptions>];
	export type ToggleCollapseCallback = (panelId: EuiResizablePanelController['id'], options: ActionToggleOptions) => void;
	export const getModeType: (mode?: "main" | "collapsible" | "custom" | [PanelModeType, Partial<ToggleOptions>] | undefined) => "main" | "collapsible" | "custom" | undefined;
	export const getToggleOptions: (mode?: "main" | "collapsible" | "custom" | [PanelModeType, Partial<ToggleOptions>] | undefined) => {
	    'data-test-subj': string | undefined;
	    className: string | null;
	    position: string;
	};
	export interface EuiResizablePanelControls {
	    isHorizontal: boolean;
	    registration: {
	        register: (panel: EuiResizablePanelController) => void;
	        deregister: (panelId: EuiResizablePanelController['id']) => void;
	    };
	    /**
	     * #ToggleCollapseCallback
	     */
	    onToggleCollapsed?: ToggleCollapseCallback;
	    onToggleCollapsedInternal: ToggleCollapseCallback;
	}
	export interface EuiResizablePanelProps extends _EuiPanelProps, CommonProps, Partial<EuiResizablePanelControls> {
	    /**
	     * Specify a desired minimum panel size in pixels or percents,
	     * for example "300px" or "30%"
	     * The actual minimum size will be calculated,
	     * using the larger of this prop and the panelProps.paddingSize
	     */
	    minSize?: string;
	    /**
	     * Specify id of panel if you want to track panel size in "onPanelWidthChange" callback
	     */
	    id?: string;
	    /**
	     * Initial size of the panel in percents
	     * Specify this prop if you don't need to handle the panel size from outside
	     */
	    initialSize?: number;
	    /**
	     * Size of the panel in percents.
	     * Specify this prop if you want to control the size from outside, the panel will ignore the "initialSize"
	     */
	    size?: number;
	    /**
	     * Add Eui scroll and overflow for the panel
	     */
	    scrollable?: boolean;
	    mode?: ModeOptions;
	    /**
	     * ReactNode to render as this component's content
	     */
	    children: ReactNode;
	    /**
	     * Custom CSS properties applied to the wrapping `.euiResizablePanel` div
	     */
	    style?: CSSProperties;
	    /**
	     * Props to add to the wrapping `.euiResizablePanel` div
	     */
	    wrapperProps?: HTMLAttributes<HTMLDivElement>;
	    /**
	     * Padding to add directly to the wrapping `.euiResizablePanel` div
	     * Gives space around the actual panel.
	     */
	    wrapperPadding?: PanelPaddingSize;
	}
	export const EuiResizablePanel: FunctionComponent<EuiResizablePanelProps>;
	export function euiResizablePanelWithControls(controls: EuiResizablePanelControls): (props: EuiResizablePanelProps) => JSX.Element;

}
declare module '@elastic/eui/src/components/resizable_container/helpers' {
	import { MouseEvent as ReactMouseEvent, TouchEvent as ReactTouchEvent } from 'react';
	import { EuiResizableContainerRegistry, EuiResizableContainerState, EuiResizableContainerActions } from '@elastic/eui/src/components/resizable_container/types';
	interface Params {
	    initialState: EuiResizableContainerState;
	    containerRef: React.RefObject<HTMLDivElement>;
	    onPanelWidthChange?: ({}: {
	        [key: string]: number;
	    }) => any;
	}
	export const pxToPercent: (proportion: number, whole: number) => number;
	export const sizesOnly: (panelObject: EuiResizableContainerRegistry['panels']) => {
	    [key: string]: number;
	};
	export const getPanelMinSize: (panelMinSize: string[], containerSize: number) => number;
	export const getPosition: (event: ReactMouseEvent | ReactTouchEvent, isHorizontal: boolean) => number;
	export const useContainerCallbacks: ({ initialState, containerRef, onPanelWidthChange, }: Params) => [EuiResizableContainerActions, EuiResizableContainerState];
	export {};

}
declare module '@elastic/eui/src/components/resizable_container/resizable_container' {
	import { ReactNode, CSSProperties, FunctionComponent, HTMLAttributes, ComponentType } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiResizableButtonProps } from '@elastic/eui/src/components/resizable_container/resizable_button';
	import { EuiResizablePanelProps, ToggleCollapseCallback } from '@elastic/eui/src/components/resizable_container/resizable_panel';
	import { EuiResizableContainerActions } from '@elastic/eui/src/components/resizable_container/types'; const containerDirections: {
	    vertical: string;
	    horizontal: string;
	};
	export interface EuiResizableContainerProps extends HTMLAttributes<HTMLDivElement>, CommonProps {
	    /**
	     * Specify the container direction
	     */
	    direction?: keyof typeof containerDirections;
	    /**
	     * Pure function which accepts Panel and Resizer components in arguments
	     * and returns a component tree
	     */
	    children: (Panel: ComponentType<EuiResizablePanelProps>, Resizer: ComponentType<EuiResizableButtonProps>, actions: Partial<EuiResizableContainerActions>) => ReactNode;
	    /**
	     * Pure function which accepts an object where keys are IDs of panels, which sizes were changed,
	     * and values are actual sizes in percents
	     */
	    onPanelWidthChange?: ({}: {
	        [key: string]: number;
	    }) => any;
	    onToggleCollapsed?: ToggleCollapseCallback;
	    style?: CSSProperties;
	}
	export const EuiResizableContainer: FunctionComponent<EuiResizableContainerProps>;
	export {};

}
declare module '@elastic/eui/src/components/resizable_container' {
	export { EuiResizableContainer, EuiResizableContainerProps, } from '@elastic/eui/src/components/resizable_container/resizable_container';

}
declare module '@elastic/eui/src/components' {
	export * from '@elastic/eui/src/components/accessibility';
	export * from '@elastic/eui/src/components/accordion';
	export * from '@elastic/eui/src/components/aspect_ratio';
	export * from '@elastic/eui/src/components/auto_sizer';
	export * from '@elastic/eui/src/components/avatar';
	export * from '@elastic/eui/src/components/badge';
	export * from '@elastic/eui/src/components/beacon';
	export * from '@elastic/eui/src/components/bottom_bar';
	export * from '@elastic/eui/src/components/breadcrumbs';
	export * from '@elastic/eui/src/components/button';
	export * from '@elastic/eui/src/components/call_out';
	export * from '@elastic/eui/src/components/card';
	export * from '@elastic/eui/src/components/code';
	export * from '@elastic/eui/src/components/collapsible_nav';
	export * from '@elastic/eui/src/components/color_picker';
	export * from '@elastic/eui/src/components/combo_box';
	export * from '@elastic/eui/src/components/comment_list';
	export * from '@elastic/eui/src/components/context';
	export * from '@elastic/eui/src/components/context_menu';
	export * from '@elastic/eui/src/components/control_bar';
	export * from '@elastic/eui/src/components/copy';
	export * from '@elastic/eui/src/components/datagrid';
	export * from '@elastic/eui/src/components/date_picker';
	export * from '@elastic/eui/src/components/delay_hide';
	export * from '@elastic/eui/src/components/delay_render';
	export * from '@elastic/eui/src/components/description_list';
	export * from '@elastic/eui/src/components/drag_and_drop';
	export * from '@elastic/eui/src/components/empty_prompt';
	export * from '@elastic/eui/src/components/error_boundary';
	export * from '@elastic/eui/src/components/expression';
	export * from '@elastic/eui/src/components/filter_group';
	export * from '@elastic/eui/src/components/facet';
	export * from '@elastic/eui/src/components/flex';
	export * from '@elastic/eui/src/components/flyout';
	export * from '@elastic/eui/src/components/focus_trap';
	export * from '@elastic/eui/src/components/form';
	export * from '@elastic/eui/src/components/header';
	export * from '@elastic/eui/src/components/health';
	export * from '@elastic/eui/src/components/highlight';
	export * from '@elastic/eui/src/components/horizontal_rule';
	export * from '@elastic/eui/src/components/icon';
	export * from '@elastic/eui/src/components/image';
	export * from '@elastic/eui/src/components/inner_text';
	export * from '@elastic/eui/src/components/i18n';
	export * from '@elastic/eui/src/components/loading';
	export * from '@elastic/eui/src/components/key_pad_menu';
	export * from '@elastic/eui/src/components/link';
	export * from '@elastic/eui/src/components/list_group';
	export * from '@elastic/eui/src/components/markdown_editor';
	export * from '@elastic/eui/src/components/mark';
	export * from '@elastic/eui/src/components/modal';
	export * from '@elastic/eui/src/components/observer/mutation_observer';
	export * from '@elastic/eui/src/components/notification';
	export * from '@elastic/eui/src/components/outside_click_detector';
	export * from '@elastic/eui/src/components/overlay_mask';
	export * from '@elastic/eui/src/components/page';
	export * from '@elastic/eui/src/components/pagination';
	export * from '@elastic/eui/src/components/panel';
	export * from '@elastic/eui/src/components/popover';
	export * from '@elastic/eui/src/components/portal';
	export * from '@elastic/eui/src/components/progress';
	export * from '@elastic/eui/src/components/provider';
	export * from '@elastic/eui/src/components/tree_view';
	export * from '@elastic/eui/src/components/observer/resize_observer';
	export * from '@elastic/eui/src/components/search_bar';
	export * from '@elastic/eui/src/components/selectable';
	export * from '@elastic/eui/src/components/side_nav';
	export * from '@elastic/eui/src/components/spacer';
	export * from '@elastic/eui/src/components/stat';
	export * from '@elastic/eui/src/components/steps';
	export * from '@elastic/eui/src/components/suggest';
	export * from '@elastic/eui/src/components/table';
	export * from '@elastic/eui/src/components/token';
	export * from '@elastic/eui/src/components/tour';
	export * from '@elastic/eui/src/components/basic_table';
	export * from '@elastic/eui/src/components/tabs';
	export * from '@elastic/eui/src/components/text';
	export * from '@elastic/eui/src/components/text_diff';
	export * from '@elastic/eui/src/components/title';
	export * from '@elastic/eui/src/components/toast';
	export * from '@elastic/eui/src/components/tool_tip';
	export * from '@elastic/eui/src/components/responsive';
	export * from '@elastic/eui/src/components/resizable_container';
	export * from '@elastic/eui/src/components/common';

}
declare module '@elastic/eui/src/utils/prop_types/is' {
	export const is: <T>(expectedValue: any) => {
	    (props: T, propName: keyof T, componentName: string): Error | null;
	    isRequired(props: T, propName: keyof T, componentName: string): Error | null;
	};

}
declare module '@elastic/eui/src/utils/prop_types/with_required_prop' {
	/**
	 * PropType validation that, if the property is present,
	 * validates against a proptype and verifies that another property exists
	 *
	 * example:
	 * ExampleComponent.propTypes = {
	 *   items: PropTypes.array,
	 *   itemId: withRequiredProp(PropTypes.string, 'items', 'itemId is required to extract the ID from an item')
	 * }
	 *
	 * this validator warns if ExampleComponent is passed an `items` prop but not `itemId`
	 */
	export const withRequiredProp: (proptype: any, requiredPropName: string, messageDescription?: string | undefined) => (...args: any[]) => any;

}
declare module '@elastic/eui/src/utils/prop_types' {
	export const EuiPropTypes: {
	    is: <T>(expectedValue: any) => {
	        (props: T, propName: keyof T, componentName: string): Error | null;
	        isRequired(props: T, propName: keyof T, componentName: string): Error | null;
	    };
	    withRequiredProp: (proptype: any, requiredPropName: string, messageDescription?: string | undefined) => (...args: any[]) => any;
	};

}
declare module '@elastic/eui/src/utils' {
	export * from '@elastic/eui/src/utils/prop_types';

}
declare module '@elastic/eui' {
	export * from '@elastic/eui/src/components';
	export * from '@elastic/eui/src/services';
	export * from '@elastic/eui/src/utils';
	export * from '@elastic/eui/src/themes';
	export * from '@elastic/eui/src/global_styling';

}
declare module '@elastic/eui/src/components/icon/assets/videoPlayer' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/accessibility' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/aggregate' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/alert' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/analyzeEvent' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/analyze_event' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/annotation' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/apm_trace' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_add_data' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_advanced_settings' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_agent' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_apm' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_app_search' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_auditbeat' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_canvas' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_code' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_console' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_cross_cluster_replication' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_dashboard' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_devtools' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_discover' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_ems' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_filebeat' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_fleet' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_gis' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_graph' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_grok' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_heartbeat' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_index_management' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_index_pattern' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_index_rollup' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_lens' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_logs' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_management' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_metricbeat' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_metrics' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_ml' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_monitoring' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_notebook' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_packetbeat' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_pipeline' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_recently_viewed' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_reporting' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_saved_objects' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_search_profiler' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_security' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_security_analytics' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_spaces' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_sql' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_timelion' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_upgrade_assistant' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_uptime' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_users_roles' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_visualize' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_watches' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/app_workplace_search' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/apps' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/arrowEnd' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/arrowStart' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/arrow_down' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/arrow_left' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/arrow_right' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/arrow_up' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/asterisk' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/beaker' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/bell' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/bellSlash' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/bolt' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/boxes_horizontal' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/boxes_vertical' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/branch' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/broom' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/brush' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/bug' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/bullseye' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/calendar' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/check' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/checkInCircleFilled' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/cheer' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/clock' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/cloudDrizzle' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/cloudStormy' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/cloudSunny' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/color' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/compute' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/console' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/continuityAbove' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/continuityAboveBelow' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/continuityBelow' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/continuityWithin' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/controls_horizontal' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/controls_vertical' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/copy' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/copy_clipboard' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/cross' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/crossInACircleFilled' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/crosshairs' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/currency' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/cut' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/database' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/document' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/documentEdit' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/documentation' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/documents' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/dot' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/doubleArrowLeft' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/doubleArrowRight' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/download' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/editorDistributeHorizontal' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/editorDistributeVertical' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/editorItemAlignBottom' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/editorItemAlignCenter' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/editorItemAlignLeft' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/editorItemAlignMiddle' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/editorItemAlignRight' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/editorItemAlignTop' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/editorPositionBottomLeft' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/editorPositionBottomRight' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/editorPositionTopLeft' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/editorPositionTopRight' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/editor_align_center' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/editor_align_left' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/editor_align_right' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/editor_bold' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/editor_code_block' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/editor_comment' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/editor_heading' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/editor_italic' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/editor_link' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/editor_ordered_list' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/editor_redo' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/editor_strike' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/editor_table' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/editor_underline' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/editor_undo' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/editor_unordered_list' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/email' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/eql' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/eraser' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/exit' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/expand' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/expandMini' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/export' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/eye' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/eye_closed' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/face_happy' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/face_neutral' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/face_sad' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/filter' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/flag' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/fold' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/folder_check' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/folder_closed' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/folder_exclamation' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/folder_open' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/frameNext' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/framePrevious' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/fullScreenExit' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/full_screen' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/function' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/gear' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/glasses' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/globe' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/grab' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/grab_horizontal' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/grid' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/heart' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/heatmap' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/help' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/home' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/iInCircle' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/image' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/import' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/index_close' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/index_edit' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/index_flush' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/index_mapping' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/index_open' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/index_runtime' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/index_settings' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/inputOutput' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/inspect' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/invert' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/ip' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/keyboard_shortcut' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/kql_field' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/kql_function' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/kql_operand' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/kql_selector' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/kql_value' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/layers' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/lettering' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/link' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/list' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/list_add' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/lock' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/lockOpen' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_aerospike' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_apache' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_app_search' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_aws' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_aws_mono' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_azure' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_azure_mono' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_beats' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_business_analytics' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_ceph' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_cloud' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_cloud_ece' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_code' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_codesandbox' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_couchbase' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_docker' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_dropwizard' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_elastic' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_elastic_stack' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_elasticsearch' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_enterprise_search' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_etcd' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_gcp' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_gcp_mono' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_github' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_gmail' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_golang' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_google_g' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_haproxy' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_ibm' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_ibm_mono' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_kafka' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_kibana' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_kubernetes' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_logging' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_logstash' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_maps' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_memcached' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_metrics' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_mongodb' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_mysql' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_nginx' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_observability' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_osquery' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_php' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_postgres' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_prometheus' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_rabbitmq' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_redis' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_security' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_site_search' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_sketch' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_slack' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_uptime' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_webhook' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_windows' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logo_workplace_search' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logstash_filter' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logstash_if' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logstash_input' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logstash_output' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/logstash_queue' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/magnet' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/magnifyWithExclamation' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/magnifyWithMinus' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/magnifyWithPlus' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/map_marker' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/memory' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/menu' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/menuDown' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/menuLeft' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/menuRight' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/menuUp' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/merge' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/minimize' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/minus' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/minus_in_circle' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/minus_in_circle_filled' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/ml_classification_job' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/ml_create_advanced_job' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/ml_create_multi_metric_job' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/ml_create_population_job' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/ml_create_single_metric_job' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/ml_data_visualizer' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/ml_outlier_detection_job' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/ml_regression_job' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/mobile' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/moon' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/nested' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/node' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/number' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/offline' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/online' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/package' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/pageSelect' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/pagesSelect' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/paint' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/paper_clip' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/partial' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/pause' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/payment' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/pencil' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/percent' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/pin' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/pin_filled' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/play' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/playFilled' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/plus' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/plus_in_circle' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/plus_in_circle_filled' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/popout' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/push' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/question_in_circle' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/quote' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/refresh' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/reporter' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/return_key' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/save' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/scale' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/search' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/securitySignal' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/securitySignalDetected' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/securitySignalResolved' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/shard' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/share' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/snowflake' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/sortLeft' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/sortRight' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/sort_down' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/sort_up' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/sortable' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/starPlusEmpty' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/starPlusFilled' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/star_empty' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/star_empty_space' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/star_filled' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/star_filled_space' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/star_minus_empty' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/star_minus_filled' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/stats' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/stop' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/stop_filled' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/stop_slash' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/storage' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/string' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/submodule' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/sun' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/swatch_input' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/symlink' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tableOfContents' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/table_density_compact' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/table_density_expanded' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/table_density_normal' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tag' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tear' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/temperature' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/timeRefresh' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/timeline' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/timeslider' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenAlias' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenAnnotation' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenArray' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenBinary' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenBoolean' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenClass' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenCompletionSuggester' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenConstant' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenDate' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenDenseVector' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenElement' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenEnum' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenEnumMember' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenEvent' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenException' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenField' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenFile' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenFlattened' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenFunction' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenGeo' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenHistogram' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenIP' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenInterface' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenJoin' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenKey' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenKeyword' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenMethod' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenModule' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenNamespace' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenNested' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenNull' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenNumber' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenObject' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenOperator' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenPackage' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenParameter' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenPercolator' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenProperty' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenRange' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenRankFeature' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenRankFeatures' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenRepo' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenSearchType' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenShape' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenString' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenStruct' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenSymbol' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenTag' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenText' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenTokenCount' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/tokenVariable' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/training' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/trash' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/unfold' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/unlink' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/user' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/users' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/vector' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/vis_area' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/vis_area_stacked' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/vis_bar_horizontal' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/vis_bar_horizontal_stacked' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/vis_bar_vertical' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/vis_bar_vertical_stacked' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/vis_gauge' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/vis_goal' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/vis_line' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/vis_map_coordinate' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/vis_map_region' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/vis_metric' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/vis_pie' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/vis_table' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/vis_tag_cloud' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/vis_text' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/vis_timelion' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/vis_vega' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/vis_visual_builder' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/wordWrap' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/wordWrapDisabled' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
declare module '@elastic/eui/src/components/icon/assets/wrench' {
	import * as React from 'react';
	interface SVGRProps {
	    title?: string;
	    titleId?: string;
	}
	export const icon: ({ title, titleId, ...props }: React.SVGProps<SVGSVGElement> & SVGRProps) => JSX.Element;
	export {};

}
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */
/* eslint-disable import/no-duplicates */

declare module 'remark-emoji' {
  import { Plugin } from 'unified';
  const RemarkEmoji: Plugin;
  export = RemarkEmoji;
}

declare module 'mdast-util-to-hast/lib/all' {
  // eslint-disable-next-line import/no-unresolved
  import { Node } from 'unist';
  import { H } from 'mdast-util-to-hast';

  const all: (h: H, node: Node) => Node[];
  export = all;
}
declare module '@elastic/eui/src/components/table/mobile' {
	export { EuiTableHeaderMobile } from '@elastic/eui/src/components/table/mobile/table_header_mobile';
	export { EuiTableSortMobile, EuiTableSortMobileProps, } from '@elastic/eui/src/components/table/mobile/table_sort_mobile';
	export { EuiTableSortMobileItem, EuiTableSortMobileItemProps, } from '@elastic/eui/src/components/table/mobile/table_sort_mobile_item';

}
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

declare module 'text-diff' {
  interface ConstructorProps {
    timeout: number;
  }

  type DiffElement = [-1 | 0 | 1, string];

  class Diff {
    constructor({ timeout }: ConstructorProps);
    main: (initialText: string, currentText: string) => DiffElement[];
  }
  export = Diff;
}
declare module '@elastic/eui/src/global_styling/variables/_colors_vis' {
	export const colorVis: {
	    euiColorVis0: string;
	    euiColorVis1: string;
	    euiColorVis2: string;
	    euiColorVis3: string;
	    euiColorVis4: string;
	    euiColorVis5: string;
	    euiColorVis6: string;
	    euiColorVis7: string;
	    euiColorVis8: string;
	    euiColorVis9: string;
	    euiColorVis0_behindText: string;
	    euiColorVis1_behindText: string;
	    euiColorVis2_behindText: string;
	    euiColorVis3_behindText: string;
	    euiColorVis4_behindText: string;
	    euiColorVis5_behindText: string;
	    euiColorVis6_behindText: string;
	    euiColorVis7_behindText: string;
	    euiColorVis8_behindText: string;
	    euiColorVis9_behindText: string;
	};

}
declare module '@elastic/eui/src/global_styling/variables/_z_index' {
	/**
	 * NOTE: These were quick conversions of their Sass counterparts.
	 *       They have yet to be used/tested.
	 */
	export interface EuiThemeZIndex {
	    level0: number;
	    level1: number;
	    level2: number;
	    level3: number;
	    level4: number;
	    level5: number;
	    level6: number;
	    level7: number;
	    level8: number;
	    level9: number;
	}
	export const zIndex: EuiThemeZIndex;

}
declare module '@elastic/eui/src/global_styling/variables/text' {
	import { CSSProperties } from 'react';
	import { _EuiThemeFontScale } from '@elastic/eui/src/global_styling/variables/_typography';
	/**
	 * NOTE: These were quick conversions of their Sass counterparts.
	 *       They have yet to be used/tested.
	 */
	export type EuiThemeFontSize = {
	    [mapType in _EuiThemeFontScale]: {
	        fontSize: CSSProperties['fontSize'];
	        lineHeight: CSSProperties['lineHeight'];
	    };
	};
	export const fontSize: EuiThemeFontSize;

}
declare module '@elastic/eui/src/global_styling/variables/title' {
	import { CSSProperties } from 'react';
	import { _EuiThemeFontScale } from '@elastic/eui/src/global_styling/variables/_typography';
	/**
	 * NOTE: These were quick conversions of their Sass counterparts.
	 *       They have yet to be used/tested.
	 */
	export type EuiThemeTitle = {
	    [size in _EuiThemeFontScale]: {
	        color: string;
	        fontSize: string;
	        fontWeight: CSSProperties['fontWeight'];
	        letterSpacing?: string;
	        lineHeight: string;
	    };
	};
	export const title: EuiThemeTitle;

}
declare module '@elastic/eui/src/themes/amsterdam/global_styling/variables/_states' {
	import { _EuiThemeFocus } from '@elastic/eui/src/global_styling/variables/_states';
	/**
	 * NOTE: These were quick conversions of their Sass counterparts.
	 *       They have yet to be used/tested.
	 */
	export const focus_ams: _EuiThemeFocus;

}
declare module '@elastic/eui/src/themes/amsterdam/global_styling/variables/title' {
	/**
	 * NOTE: These were quick conversions of their Sass counterparts.
	 *       They have yet to be used/tested.
	 */
	import { EuiThemeTitle } from '@elastic/eui/src/global_styling/variables/title';
	export const title_ams: EuiThemeTitle;

}



declare module '@elastic/eui' {
  export type EuiTokensObject = {
    "euiAccordion.isLoading": any;
"euiBasicTable.noItemsMessage": any;
"euiBasicTable.tableCaptionWithPagination": any;
"euiBasicTable.tableAutoCaptionWithPagination": any;
"euiBasicTable.tableSimpleAutoCaptionWithPagination": any;
"euiBasicTable.tableAutoCaptionWithoutPagination": any;
"euiBasicTable.selectAllRows": any;
"euiBasicTable.selectThisRow": any;
"euiBasicTable.tablePagination": any;
"euiCollapsedItemActions.allActions": any;
"euiBottomBar.screenReaderHeading": any;
"euiBottomBar.customScreenReaderAnnouncement": any;
"euiBottomBar.screenReaderAnnouncement": any;
"euiBreadcrumbs.collapsedBadge.ariaLabel": any;
"euiBreadcrumbs.nav.ariaLabel": any;
"euiCardSelect.selected": any;
"euiCardSelect.unavailable": any;
"euiCardSelect.select": any;
"euiCodeBlock.copyButton": any;
"euiCodeBlock.fullscreenCollapse": any;
"euiCodeBlock.fullscreenExpand": any;
"euiColorPickerSwatch.ariaLabel": any;
"euiColorPicker.popoverLabel": any;
"euiColorPicker.colorLabel": any;
"euiColorPicker.colorErrorMessage": any;
"euiColorPicker.transparent": any;
"euiColorPicker.alphaLabel": any;
"euiColorPicker.openLabel": any;
"euiColorPicker.closeLabel": any;
"euiColorStopThumb.buttonAriaLabel": any;
"euiColorStopThumb.buttonTitle": any;
"euiColorStopThumb.screenReaderAnnouncement": any;
"euiColorStopThumb.stopLabel": any;
"euiColorStopThumb.stopErrorMessage": any;
"euiColorStopThumb.removeLabel": any;
"euiColorStops.screenReaderAnnouncement": any;
"euiHue.label": any;
"euiSaturation.ariaLabel": any;
"euiSaturation.screenReaderInstructions": any;
"euiComboBoxPill.removeSelection": any;
"euiComboBoxOptionsList.loadingOptions": any;
"euiComboBoxOptionsList.delimiterMessage": any;
"euiComboBoxOptionsList.alreadyAdded": any;
"euiComboBoxOptionsList.createCustomOption": any;
"euiComboBoxOptionsList.noMatchingOptions": any;
"euiComboBoxOptionsList.noAvailableOptions": any;
"euiComboBoxOptionsList.allOptionsSelected": any;
"euiControlBar.screenReaderHeading": any;
"euiControlBar.customScreenReaderAnnouncement": any;
"euiControlBar.screenReaderAnnouncement": any;
"euiDataGridCellButtons.expandButtonTitle": any;
"euiDataGridCell.position": any;
"euiColumnActions.hideColumn": any;
"euiColumnActions.moveLeft": any;
"euiColumnActions.moveRight": any;
"euiColumnActions.sort": any;
"euiDataGridHeaderCell.headerActions": any;
"euiColumnSelector.button": any;
"euiColumnSelector.buttonActiveSingular": any;
"euiColumnSelector.buttonActivePlural": any;
"euiColumnSelector.search": any;
"euiColumnSelector.searchcolumns": any;
"euiColumnSelector.selectAll": any;
"euiColumnSelector.hideAll": any;
"euiColumnSortingDraggable.defaultSortAsc": any;
"euiColumnSortingDraggable.defaultSortDesc": any;
"euiColumnSortingDraggable.activeSortLabel": any;
"euiColumnSortingDraggable.removeSortLabel": any;
"euiColumnSortingDraggable.toggleLegend": any;
"euiColumnSorting.button": any;
"euiColumnSorting.buttonActive": any;
"euiColumnSorting.emptySorting": any;
"euiColumnSorting.pickFields": any;
"euiColumnSorting.sortFieldAriaLabel": any;
"euiColumnSorting.clearAll": any;
"euiDataGridToolbar.fullScreenButton": any;
"euiDataGridToolbar.fullScreenButtonActive": any;
"euiDisplaySelector.buttonText": any;
"euiDisplaySelector.resetButtonText": any;
"euiDisplaySelector.densityLabel": any;
"euiDisplaySelector.labelCompact": any;
"euiDisplaySelector.labelNormal": any;
"euiDisplaySelector.labelExpanded": any;
"euiDisplaySelector.rowHeightLabel": any;
"euiDisplaySelector.labelSingle": any;
"euiDisplaySelector.labelAuto": any;
"euiDisplaySelector.labelCustom": any;
"euiDisplaySelector.lineCountLabel": any;
"euiDataGrid.ariaLabel": any;
"euiDataGrid.ariaLabelledBy": any;
"euiDataGrid.screenReaderNotice": any;
"euiDataGridPagination.detailedPaginationLabel": any;
"euiDataGridPagination.paginationLabel": any;
"euiDataGridSchema.booleanSortTextAsc": any;
"euiDataGridSchema.booleanSortTextDesc": any;
"euiDataGridSchema.currencySortTextAsc": any;
"euiDataGridSchema.currencySortTextDesc": any;
"euiDataGridSchema.dateSortTextAsc": any;
"euiDataGridSchema.dateSortTextDesc": any;
"euiDataGridSchema.numberSortTextAsc": any;
"euiDataGridSchema.numberSortTextDesc": any;
"euiDataGridSchema.jsonSortTextAsc": any;
"euiDataGridSchema.jsonSortTextDesc": any;
"euiAutoRefresh.autoRefreshLabel": any;
"euiAutoRefresh.buttonLabelOff": any;
"euiAutoRefresh.buttonLabelOn": any;
"euiRefreshInterval.fullDescriptionOff": any;
"euiRefreshInterval.fullDescriptionOn": any;
"euiRefreshInterval.legend": any;
"euiDatePopoverButton.invalidTitle": any;
"euiDatePopoverButton.outdatedTitle": any;
"euiRelativeTab.numberInputError": any;
"euiRelativeTab.numberInputLabel": any;
"euiRelativeTab.dateInputError": any;
"euiRelativeTab.unitInputLabel": any;
"euiRelativeTab.relativeDate": any;
"euiRelativeTab.fullDescription": any;
"euiRelativeTab.roundingLabel": any;
"euiCommonlyUsedTimeRanges.legend": any;
"euiQuickSelect.legendText": any;
"euiQuickSelect.quickSelectTitle": any;
"euiQuickSelect.previousLabel": any;
"euiQuickSelect.nextLabel": any;
"euiQuickSelect.tenseLabel": any;
"euiQuickSelect.valueLabel": any;
"euiQuickSelect.unitLabel": any;
"euiQuickSelect.applyButton": any;
"euiQuickSelect.fullDescription": any;
"euiRecentlyUsed.legend": any;
"euiSuperUpdateButton.refreshButtonLabel": any;
"euiSuperUpdateButton.updatingButtonLabel": any;
"euiSuperUpdateButton.updateButtonLabel": any;
"euiSuperUpdateButton.cannotUpdateTooltip": any;
"euiSuperUpdateButton.clickToApplyTooltip": any;
"euiErrorBoundary.error": any;
"euiFilterButton.filterBadgeActiveAriaLabel": any;
"euiFilterButton.filterBadgeAvailableAriaLabel": any;
"euiFlyout.closeAriaLabel": any;
"euiFieldPassword.showPassword": any;
"euiFieldPassword.maskPassword": any;
"euiFilePicker.promptText": any;
"euiFilePicker.filesSelected": any;
"euiFilePicker.clearSelectedFiles": any;
"euiFilePicker.removeSelected": any;
"euiFormControlLayoutClearButton.label": any;
"euiForm.addressFormErrors": any;
"euiSuperSelectControl.selectAnOption": any;
"euiSuperSelect.screenReaderAnnouncement": any;
"euiHeaderLinks.openNavigationMenu": any;
"euiHeaderLinks.appNavigation": any;
"euiImage.closeImage": any;
"euiImage.openImage": any;
"euiLink.external.ariaLabel": any;
"euiLink.newTarget.screenReaderOnlyText": any;
"euiPinnableListGroup.pinExtraActionLabel": any;
"euiPinnableListGroup.pinnedExtraActionLabel": any;
"euiMarkdownEditorFooter.uploadingFiles": any;
"euiMarkdownEditorFooter.openUploadModal": any;
"euiMarkdownEditorFooter.unsupportedFileType": any;
"euiMarkdownEditorFooter.supportedFileTypes": any;
"euiMarkdownEditorFooter.showSyntaxErrors": any;
"euiMarkdownEditorFooter.showMarkdownHelp": any;
"euiMarkdownEditorFooter.syntaxTitle": any;
"euiMarkdownEditorFooter.errorsTitle": any;
"euiMarkdownEditorFooter.mdSyntaxLink": any;
"euiMarkdownEditorFooter.syntaxModalDescriptionPrefix": any;
"euiMarkdownEditorFooter.syntaxModalDescriptionSuffix": any;
"euiMarkdownEditorFooter.closeButton": any;
"euiMarkdownEditorFooter.syntaxPopoverDescription": any;
"euiMarkdownEditorToolbar.editor": any;
"euiMarkdownEditorToolbar.previewMarkdown": any;
"euiModal.closeModal": any;
"euiNotificationEventMessages.accordionButtonText": any;
"euiNotificationEventMessages.accordionAriaLabelButtonText": any;
"euiNotificationEventMessages.accordionHideText": any;
"euiNotificationEventMeta.contextMenuButton": any;
"euiNotificationEventReadButton.markAsReadAria": any;
"euiNotificationEventReadButton.markAsUnreadAria": any;
"euiNotificationEventReadButton.markAsRead": any;
"euiNotificationEventReadButton.markAsUnread": any;
"euiNotificationEventReadIcon.readAria": any;
"euiNotificationEventReadIcon.unreadAria": any;
"euiNotificationEventReadIcon.read": any;
"euiNotificationEventReadIcon.unread": any;
"euiPaginationButtonArrow.firstPage": any;
"euiPaginationButtonArrow.previousPage": any;
"euiPaginationButtonArrow.nextPage": any;
"euiPaginationButtonArrow.lastPage": any;
"euiPaginationButton.longPageString": any;
"euiPaginationButton.shortPageString": any;
"euiPagination.pageOfTotalCompressed": any;
"euiPagination.firstRangeAriaLabel": any;
"euiPagination.lastRangeAriaLabel": any;
"euiPagination.last": any;
"euiPagination.page": any;
"euiPagination.of": any;
"euiPagination.collection": any;
"euiPagination.fromEndLabel": any;
"euiPopover.screenReaderAnnouncement": any;
"euiProgress.valueText": any;
"euiResizableButton.horizontalResizerAriaLabel": any;
"euiResizableButton.verticalResizerAriaLabel": any;
"euiResizablePanel.toggleButtonAriaLabel": any;
"euiSelectableListItem.includedOption": any;
"euiSelectableListItem.includedOptionInstructions": any;
"euiSelectableListItem.excludedOption": any;
"euiSelectableListItem.excludedOptionInstructions": any;
"euiSelectableTemplateSitewide.searchPlaceholder": any;
"euiSelectableTemplateSitewide.loadingResults": any;
"euiSelectableTemplateSitewide.noResults": any;
"euiSelectableTemplateSitewide.onFocusBadgeGoTo": any;
"euiSelectable.loadingOptions": any;
"euiSelectable.noMatchingOptions": any;
"euiSelectable.noAvailableOptions": any;
"euiSelectable.placeholderName": any;
"euiStat.loadingText": any;
"euiStepStrings.step": any;
"euiStepStrings.simpleStep": any;
"euiStepStrings.complete": any;
"euiStepStrings.simpleComplete": any;
"euiStepStrings.warning": any;
"euiStepStrings.simpleWarning": any;
"euiStepStrings.errors": any;
"euiStepStrings.simpleErrors": any;
"euiStepStrings.incomplete": any;
"euiStepStrings.simpleIncomplete": any;
"euiStepStrings.disabled": any;
"euiStepStrings.simpleDisabled": any;
"euiStepStrings.loading": any;
"euiStepStrings.simpleLoading": any;
"euiStepStrings.current": any;
"euiStepStrings.simpleCurrent": any;
"euiTableSortMobile.sorting": any;
"euiTableHeaderCell.titleTextWithDesc": any;
"euiTablePagination.rowsPerPage": any;
"euiTablePagination.rowsPerPageOption": any;
"euiToast.dismissToast": any;
"euiToast.newNotification": any;
"euiToast.notification": any;
"euiTourStepIndicator.isActive": any;
"euiTourStepIndicator.isComplete": any;
"euiTourStepIndicator.isIncomplete": any;
"euiTourStepIndicator.ariaLabel": any;
"euiTourStep.endTour": any;
"euiTourStep.skipTour": any;
"euiTourStep.closeTour": any;
"euiTreeView.listNavigationInstructions": any;
"euiTreeView.ariaLabel": any;
  }
}
  