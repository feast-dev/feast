{"version":3,"file":"index.es.mjs","sources":["lib/selectors-ast-from-selectors-string.js","lib/custom-selectors-from-root.js","lib/transform-selectors-by-custom-selectors.js","lib/transform-rules.js","lib/import-from.js","lib/export-to.js","index.js"],"sourcesContent":["import parser from 'postcss-selector-parser';\n\n/* Return a Selectors AST from a Selectors String\n/* ========================================================================== */\n\nexport default selectorString => {\n\tlet selectorAST;\n\n\tparser(selectors => {\n\t\tselectorAST = selectors\n\t}).processSync(selectorString);\n\n\treturn selectorAST;\n};\n","import getASTFromSelectors from './selectors-ast-from-selectors-string';\n\n// return custom selectors from the css root, conditionally removing them\nexport default (root, opts) => {\n\t// initialize custom selectors\n\tconst customSelectors = {};\n\n\t// for each custom selector atrule that is a child of the css root\n\troot.nodes.slice().forEach(node => {\n\t\tif (isCustomSelector(node)) {\n\t\t\t// extract the name and selectors from the params of the custom selector\n\t\t\tconst [, name, selectors] = node.params.match(customSelectorParamsRegExp);\n\n\t\t\t// write the parsed selectors to the custom selector\n\t\t\tcustomSelectors[name] = getASTFromSelectors(selectors);\n\n\t\t\t// conditionally remove the custom selector atrule\n\t\t\tif (!Object(opts).preserve) {\n\t\t\t\tnode.remove();\n\t\t\t}\n\t\t}\n\t});\n\n\treturn customSelectors;\n};\n\n// match the custom selector name\nconst customSelectorNameRegExp = /^custom-selector$/i;\n\n// match the custom selector params\nconst customSelectorParamsRegExp = /^(:--[A-z][\\w-]*)\\s+([\\W\\w]+)\\s*$/;\n\n// whether the atrule is a custom selector\nconst isCustomSelector = node => node.type === 'atrule' && customSelectorNameRegExp.test(node.name) && customSelectorParamsRegExp.test(node.params);\n","// return transformed selectors, replacing custom pseudo selectors with custom selectors\nexport default function transformSelectorList(selectorList, customSelectors) {\n\tlet index = selectorList.nodes.length - 1;\n\n\twhile (index >= 0) {\n\t\tconst transformedSelectors = transformSelector(selectorList.nodes[index], customSelectors);\n\n\t\tif (transformedSelectors.length) {\n\t\t\tselectorList.nodes.splice(index, 1, ...transformedSelectors);\n\t\t}\n\n\t\t--index;\n\t}\n\n\treturn selectorList;\n}\n\n// return custom pseudo selectors replaced with custom selectors\nfunction transformSelector(selector, customSelectors) {\n\tconst transpiledSelectors = [];\n\n\tfor (const index in selector.nodes) {\n\t\tconst { value, nodes } = selector.nodes[index];\n\n\t\tif (value in customSelectors) {\n\t\t\tfor (const replacementSelector of customSelectors[value].nodes) {\n\t\t\t\tconst selectorClone = selector.clone();\n\n\t\t\t\tselectorClone.nodes.splice(index, 1, ...replacementSelector.clone().nodes.map(node => {\n\t\t\t\t\t// use spacing from the current usage\n\t\t\t\t\tnode.spaces = { ...selector.nodes[index].spaces };\n\n\t\t\t\t\treturn node;\n\t\t\t\t}));\n\n\t\t\t\tconst retranspiledSelectors = transformSelector(selectorClone, customSelectors);\n\n\t\t\t\tadjustNodesBySelectorEnds(selectorClone.nodes, Number(index));\n\n\t\t\t\tif (retranspiledSelectors.length) {\n\t\t\t\t\ttranspiledSelectors.push(...retranspiledSelectors);\n\t\t\t\t} else {\n\t\t\t\t\ttranspiledSelectors.push(selectorClone);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn transpiledSelectors;\n\t\t} else if (nodes && nodes.length) {\n\t\t\ttransformSelectorList(selector.nodes[index], customSelectors);\n\t\t}\n\t}\n\n\treturn transpiledSelectors;\n}\n\n// match selectors by difficult-to-separate ends\nconst withoutSelectorStartMatch = /^(tag|universal)$/;\nconst withoutSelectorEndMatch = /^(class|id|pseudo|tag|universal)$/;\n\nconst isWithoutSelectorStart = node => withoutSelectorStartMatch.test(Object(node).type);\nconst isWithoutSelectorEnd = node => withoutSelectorEndMatch.test(Object(node).type);\n\n// adjust nodes by selector ends (so that .class:--h1 becomes h1.class rather than .classh1)\nconst adjustNodesBySelectorEnds = (nodes, index) => {\n\tif (index && isWithoutSelectorStart(nodes[index]) && isWithoutSelectorEnd(nodes[index - 1])) {\n\t\tlet safeIndex = index - 1;\n\n\t\twhile (safeIndex && isWithoutSelectorEnd(nodes[safeIndex])) {\n\t\t\t--safeIndex;\n\t\t}\n\n\t\tif (safeIndex < index) {\n\t\t\tconst node = nodes.splice(index, 1)[0];\n\n\t\t\tnodes.splice(safeIndex, 0, node);\n\n\t\t\tnodes[safeIndex].spaces.before = nodes[safeIndex + 1].spaces.before;\n\t\t\tnodes[safeIndex + 1].spaces.before = '';\n\n\t\t\tif (nodes[index]) {\n\t\t\t\tnodes[index].spaces.after = nodes[safeIndex].spaces.after;\n\t\t\t\tnodes[safeIndex].spaces.after = '';\n\t\t\t}\n\t\t}\n\t}\n};\n\n","import parser from 'postcss-selector-parser';\nimport transformSelectorsByCustomSelectors from './transform-selectors-by-custom-selectors';\n\n// transform custom pseudo selectors with custom selectors\nexport default (root, customSelectors, opts) => {\n\troot.walkRules(customPseudoRegExp, rule => {\n\t\tconst selector = parser(selectors => {\n\t\t\ttransformSelectorsByCustomSelectors(selectors, customSelectors, opts)\n\t\t}).processSync(rule.selector);\n\n\t\tif (opts.preserve) {\n\t\t\trule.cloneBefore({ selector });\n\t\t} else {\n\t\t\trule.selector = selector;\n\t\t}\n\t});\n};\n\nconst customPseudoRegExp = /:--[A-z][\\w-]*/;\n","import fs from 'fs';\nimport path from 'path';\nimport postcss from 'postcss';\nimport getSelectorsAstFromSelectorsString from './selectors-ast-from-selectors-string';\nimport getCustomSelectors from './custom-selectors-from-root';\n\n/* Import Custom Selectors from CSS AST\n/* ========================================================================== */\n\nfunction importCustomSelectorsFromCSSAST(root) {\n\treturn getCustomSelectors(root);\n}\n\n/* Import Custom Selectors from CSS File\n/* ========================================================================== */\n\nasync function importCustomSelectorsFromCSSFile(from) {\n\tconst css = await readFile(path.resolve(from));\n\tconst root = postcss.parse(css, { from: path.resolve(from) });\n\n\treturn importCustomSelectorsFromCSSAST(root);\n}\n\n/* Import Custom Selectors from Object\n/* ========================================================================== */\n\nfunction importCustomSelectorsFromObject(object) {\n\tconst customSelectors = Object.assign(\n\t\t{},\n\t\tObject(object).customSelectors || Object(object)['custom-selectors']\n\t);\n\n\tfor (const key in customSelectors) {\n\t\tcustomSelectors[key] = getSelectorsAstFromSelectorsString(customSelectors[key]);\n\t}\n\n\treturn customSelectors;\n}\n\n/* Import Custom Selectors from JSON file\n/* ========================================================================== */\n\nasync function importCustomSelectorsFromJSONFile(from) {\n\tconst object = await readJSON(path.resolve(from));\n\n\treturn importCustomSelectorsFromObject(object);\n}\n\n/* Import Custom Selectors from JS file\n/* ========================================================================== */\n\nasync function importCustomSelectorsFromJSFile(from) {\n\tconst object = await import(path.resolve(from));\n\n\treturn importCustomSelectorsFromObject(object);\n}\n\n/* Import Custom Selectors from Sources\n/* ========================================================================== */\n\nexport default function importCustomSelectorsFromSources(sources) {\n\treturn sources.map(source => {\n\t\tif (source instanceof Promise) {\n\t\t\treturn source;\n\t\t} else if (source instanceof Function) {\n\t\t\treturn source();\n\t\t}\n\n\t\t// read the source as an object\n\t\tconst opts = source === Object(source) ? source : { from: String(source) };\n\n\t\t// skip objects with custom selectors\n\t\tif (Object(opts).customSelectors || Object(opts)['custom-selectors']) {\n\t\t\treturn opts\n\t\t}\n\n\t\t// source pathname\n\t\tconst from = String(opts.from || '');\n\n\t\t// type of file being read from\n\t\tconst type = (opts.type || path.extname(from).slice(1)).toLowerCase();\n\n\t\treturn { type, from };\n\t}).reduce(async (customSelectorsPromise, source) => {\n\t\tconst customSelectors = await customSelectorsPromise\n\t\tconst { type, from } = await source;\n\n\t\tif (type === 'ast') {\n\t\t\treturn Object.assign(customSelectors, importCustomSelectorsFromCSSAST(from));\n\t\t}\n\n\t\tif (type === 'css') {\n\t\t\treturn Object.assign(customSelectors, await importCustomSelectorsFromCSSFile(from));\n\t\t}\n\n\t\tif (type === 'js') {\n\t\t\treturn Object.assign(customSelectors, await importCustomSelectorsFromJSFile(from));\n\t\t}\n\n\t\tif (type === 'json') {\n\t\t\treturn Object.assign(customSelectors, await importCustomSelectorsFromJSONFile(from));\n\t\t}\n\n\t\treturn Object.assign(customSelectors, importCustomSelectorsFromObject(await source));\n\t}, Promise.resolve({}));\n}\n\n/* Helper utilities\n/* ========================================================================== */\n\nconst readFile = from => new Promise((resolve, reject) => {\n\tfs.readFile(from, 'utf8', (error, result) => {\n\t\tif (error) {\n\t\t\treject(error);\n\t\t} else {\n\t\t\tresolve(result);\n\t\t}\n\t});\n});\n\nconst readJSON = async from => JSON.parse(await readFile(from));\n","import fs from 'fs';\nimport path from 'path';\n\n/* Import Custom Selectors from CSS File\n/* ========================================================================== */\n\nasync function exportCustomSelectorsToCssFile(to, customSelectors) {\n\tconst cssContent = Object.keys(customSelectors).reduce((cssLines, name) => {\n\t\tcssLines.push(`@custom-selector ${name} ${customSelectors[name]};`);\n\n\t\treturn cssLines;\n\t}, []).join('\\n');\n\tconst css = `${cssContent}\\n`;\n\n\tawait writeFile(to, css);\n}\n\n/* Import Custom Selectors from JSON file\n/* ========================================================================== */\n\nasync function exportCustomSelectorsToJsonFile(to, customSelectors) {\n\tconst jsonContent = JSON.stringify({\n\t\t'custom-selectors': customSelectors\n\t}, null, '  ');\n\tconst json = `${jsonContent}\\n`;\n\n\tawait writeFile(to, json);\n}\n\n/* Import Custom Selectors from Common JS file\n/* ========================================================================== */\n\nasync function exportCustomSelectorsToCjsFile(to, customSelectors) {\n\tconst jsContents = Object.keys(customSelectors).reduce((jsLines, name) => {\n\t\tjsLines.push(`\\t\\t'${escapeForJS(name)}': '${escapeForJS(customSelectors[name])}'`);\n\n\t\treturn jsLines;\n\t}, []).join(',\\n');\n\tconst js = `module.exports = {\\n\\tcustomSelectors: {\\n${jsContents}\\n\\t}\\n};\\n`;\n\n\tawait writeFile(to, js);\n}\n\n/* Import Custom Selectors from Module JS file\n/* ========================================================================== */\n\nasync function exportCustomSelectorsToMjsFile(to, customSelectors) {\n\tconst mjsContents = Object.keys(customSelectors).reduce((mjsLines, name) => {\n\t\tmjsLines.push(`\\t'${escapeForJS(name)}': '${escapeForJS(customSelectors[name])}'`);\n\n\t\treturn mjsLines;\n\t}, []).join(',\\n');\n\tconst mjs = `export const customSelectors = {\\n${mjsContents}\\n};\\n`;\n\n\tawait writeFile(to, mjs);\n}\n\n/* Export Custom Selectors to Destinations\n/* ========================================================================== */\n\nexport default function exportCustomSelectorsToDestinations(customSelectors, destinations) {\n\treturn Promise.all(destinations.map(async destination => {\n\t\tif (destination instanceof Function) {\n\t\t\tawait destination(defaultCustomSelectorsToJSON(customSelectors));\n\t\t} else {\n\t\t\t// read the destination as an object\n\t\t\tconst opts = destination === Object(destination) ? destination : { to: String(destination) };\n\n\t\t\t// transformer for custom selectors into a JSON-compatible object\n\t\t\tconst toJSON = opts.toJSON || defaultCustomSelectorsToJSON;\n\n\t\t\tif ('customSelectors' in opts) {\n\t\t\t\t// write directly to an object as customSelectors\n\t\t\t\topts.customSelectors = toJSON(customSelectors);\n\t\t\t} else if ('custom-selectors' in opts) {\n\t\t\t\t// write directly to an object as custom-selectors\n\t\t\t\topts['custom-selectors'] = toJSON(customSelectors);\n\t\t\t} else {\n\t\t\t\t// destination pathname\n\t\t\t\tconst to = String(opts.to || '');\n\n\t\t\t\t// type of file being written to\n\t\t\t\tconst type = (opts.type || path.extname(opts.to).slice(1)).toLowerCase();\n\n\t\t\t\t// transformed custom selectors\n\t\t\t\tconst customSelectorsJSON = toJSON(customSelectors);\n\n\t\t\t\tif (type === 'css') {\n\t\t\t\t\tawait exportCustomSelectorsToCssFile(to, customSelectorsJSON);\n\t\t\t\t}\n\n\t\t\t\tif (type === 'js') {\n\t\t\t\t\tawait exportCustomSelectorsToCjsFile(to, customSelectorsJSON);\n\t\t\t\t}\n\n\t\t\t\tif (type === 'json') {\n\t\t\t\t\tawait exportCustomSelectorsToJsonFile(to, customSelectorsJSON);\n\t\t\t\t}\n\n\t\t\t\tif (type === 'mjs') {\n\t\t\t\t\tawait exportCustomSelectorsToMjsFile(to, customSelectorsJSON);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}));\n}\n\n/* Helper utilities\n/* ========================================================================== */\n\nconst defaultCustomSelectorsToJSON = customSelectors => {\n\treturn Object.keys(customSelectors).reduce((customSelectorsJSON, key) => {\n\t\tcustomSelectorsJSON[key] = String(customSelectors[key]);\n\n\t\treturn customSelectorsJSON;\n\t}, {});\n};\n\nconst writeFile = (to, text) => new Promise((resolve, reject) => {\n\tfs.writeFile(to, text, error => {\n\t\tif (error) {\n\t\t\treject(error);\n\t\t} else {\n\t\t\tresolve();\n\t\t}\n\t});\n});\n\nconst escapeForJS = string => string.replace(/\\\\([\\s\\S])|(')/g, '\\\\$1$2').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r');\n","import getCustomSelectors from './lib/custom-selectors-from-root';\nimport transformRules from './lib/transform-rules';\nimport importCustomSelectorsFromSources from './lib/import-from';\nimport exportCustomSelectorsToDestinations from './lib/export-to';\n\nconst postcssCustomSelectors = (opts) => {\n\t// whether to preserve custom selectors and rules using them\n\tconst preserve = Boolean(Object(opts).preserve);\n\n\t// sources to import custom selectors from\n\tconst importFrom = [].concat(Object(opts).importFrom || []);\n\n\t// destinations to export custom selectors to\n\tconst exportTo = [].concat(Object(opts).exportTo || []);\n\n\t// promise any custom selectors are imported\n\tconst customSelectorsPromise = importCustomSelectorsFromSources(importFrom);\n\treturn {\n\t\tpostcssPlugin: 'postcss-custom-selectors',\n\t\tasync Once(root) {\n\t\t\tconst customProperties = Object.assign(\n\t\t\t\t{},\n\t\t\t\tawait customSelectorsPromise,\n\t\t\t\tgetCustomSelectors(root, { preserve })\n\t\t\t);\n\n\t\t\tawait exportCustomSelectorsToDestinations(customProperties, exportTo);\n\n\t\t\ttransformRules(root, customProperties, { preserve });\n\t\t},\n\t}\n};\n\npostcssCustomSelectors.postcss = true;\n\nexport default postcssCustomSelectors;\n"],"names":["selectorString","selectorAST","parser","selectors","processSync","root","opts","customSelectors","nodes","slice","forEach","node","isCustomSelector","name","params","match","customSelectorParamsRegExp","getASTFromSelectors","Object","preserve","remove","customSelectorNameRegExp","type","test","transformSelectorList","selectorList","index","length","transformedSelectors","transformSelector","splice","selector","transpiledSelectors","value","replacementSelector","selectorClone","clone","map","spaces","retranspiledSelectors","adjustNodesBySelectorEnds","Number","push","withoutSelectorStartMatch","withoutSelectorEndMatch","isWithoutSelectorStart","isWithoutSelectorEnd","safeIndex","before","after","walkRules","customPseudoRegExp","rule","transformSelectorsByCustomSelectors","cloneBefore","importCustomSelectorsFromCSSAST","getCustomSelectors","importCustomSelectorsFromCSSFile","from","css","readFile","path","resolve","postcss","parse","importCustomSelectorsFromObject","object","assign","key","getSelectorsAstFromSelectorsString","importCustomSelectorsFromJSONFile","readJSON","importCustomSelectorsFromJSFile","importCustomSelectorsFromSources","sources","source","Promise","Function","String","extname","toLowerCase","reduce","customSelectorsPromise","reject","fs","error","result","JSON","exportCustomSelectorsToCssFile","to","cssContent","keys","cssLines","join","writeFile","exportCustomSelectorsToJsonFile","jsonContent","stringify","json","exportCustomSelectorsToCjsFile","jsContents","jsLines","escapeForJS","js","exportCustomSelectorsToMjsFile","mjsContents","mjsLines","mjs","exportCustomSelectorsToDestinations","destinations","all","destination","defaultCustomSelectorsToJSON","toJSON","customSelectorsJSON","text","string","replace","postcssCustomSelectors","Boolean","importFrom","concat","exportTo","postcssPlugin","Once","customProperties","transformRules"],"mappings":"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"}