prowjob_namespace: default
pod_namespace: test-pods

plank:
  allow_cancellations: true
  job_url_prefix: http://prow.feast.ai/view/gcs
  report_template: '[Full PR test history](https://prow.feast.ai/pr-history?org={{.Spec.Refs.Org}}&repo={{.Spec.Refs.Repo}}&pr={{with index .Spec.Refs.Pulls 0}}{{.Number}}{{end}})'
  default_decoration_config:
    timeout: 7200000000000    # 2h
    grace_period: 15000000000 # 15s
    utility_images:
      clonerefs: gcr.io/k8s-prow/clonerefs:v20190221-d14461a
      initupload: gcr.io/k8s-prow/initupload:v20190221-d14461a
      entrypoint: gcr.io/k8s-prow/entrypoint:v20190221-d14461a
      sidecar: gcr.io/k8s-prow/sidecar:v20190221-d14461a
    gcs_configuration:
      bucket: feast-templocation-kf-feast
      path_strategy: explicit
    gcs_credentials_secret: prow-service-account

deck:
  tide_update_period: 1s
  spyglass:
    size_limit: 100e+6 # 100MB
    viewers:
      "started.json|finished.json": ["metadata"]
      "build-log.txt": ["buildlog"]
      "report.xml": ["junit"]
      "artifacts/.*\\.xml": ["junit"]
      "surefire-reports/.*\\.xml": ["junit"]

tide:
  queries:
  - repos:
    - gojek/feast
    labels:
    - lgtm
    - approved
    missingLabels:
    - do-not-merge
    - do-not-merge/hold
    - do-not-merge/invalid-owners-file
    - do-not-merge/work-in-progress
    - needs-rebase
  merge_method:
    gojek/feast: squash
  blocker_label: merge-blocker
  squash_label: tide/squash

# presubmits list Prow jobs that run on pull requests
presubmits:
  gojek/feast:
  - name: unit-test-core
    decorate: true
    always_run: true
    spec:
      containers:
      - image: maven:3.6-jdk-8
        command: [".prow/scripts/run_unit_test.sh", "--component", "core"]

  - name: unit-test-ingestion
    decorate: true
    always_run: true
    spec:
      containers:
      - image: maven:3.6-jdk-8
        command: [".prow/scripts/run_unit_test.sh", "--component", "ingestion"]

  - name: unit-test-serving
    decorate: true
    always_run: true
    spec:
      containers:
      - image: maven:3.6-jdk-8
        command: [".prow/scripts/run_unit_test.sh", "--component", "serving"]

  - name: unit-test-cli
    decorate: true
    always_run: true
    spec:
      containers:
      - image: golang:1.12
        env:
        - name: GO111MODULE
          value: "on"
        command: [".prow/scripts/run_unit_test.sh", "--component", "cli"]

  - name: unit-test-python-sdk
    decorate: true
    always_run: true
    spec:
      volumes:
      - name: service-account
        secret:
          secretName: prow-service-account
      containers:
      - image: python:3.6
        volumeMounts:
        - name: service-account
          mountPath: /etc/service-account
          readOnly: true
        env:
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /etc/service-account/service-account.json
        command: [".prow/scripts/run_unit_test.sh", "--component", "python-sdk"]

  - name: integration-test
    decorate: true
    always_run: true
    spec:
      volumes:
      - name: docker-socket-volume
        hostPath:
          path: /var/run/docker.sock
          type: File
      - name: service-account
        secret:
          secretName: prow-service-account
      nodeSelector:
        os: ubuntu
      containers:
      - image: google/cloud-sdk
        # securityContext and docker socket vol mounts are needed because we are building
        # Docker images in this job
        securityContext:
          privileged: true
        volumeMounts:
        - name: docker-socket-volume
          mountPath: /var/run/docker.sock
        - name: service-account
          mountPath: /etc/service-account
          readOnly: true
        command:
        - bash
        - -c
        - |
          export FEAST_HOME=${PWD}
          export FEAST_IMAGE_REGISTRY=us.gcr.io
          export FEAST_IMAGE_TAG=${PULL_PULL_SHA}
          export FEAST_WAREHOUSE_DATASET=feast_build_${BUILD_ID}
          export FEAST_CORE_URL=build-${BUILD_ID:0:5}.drone.feast.ai:80
          export FEAST_SERVING_URL=build-${BUILD_ID:0:5}.drone.feast.ai:80
          export FEAST_RELEASE_NAME=feast-${BUILD_ID:0:5}
          export BATCH_IMPORT_DATA_GCS_PATH=gs://feast-templocation-kf-feast/build_${BUILD_ID:0:5}/integration-tests/testdata/feature_values/ingestion_1.csv
          export KAFKA_BROKERS=10.128.0.201:9092
          export KAFKA_TOPICS=feast_build_${BUILD_ID:0:5}

          . .prow/scripts/prepare_integration_test.sh
          .prow/scripts/install_feast_and_run_e2e_test.sh
          TEST_EXIT_CODE=$?
          .prow/scripts/cleanup_feast_installation.sh
          
          exit ${TEST_EXIT_CODE}

# TODO: do a release when a git tag is pushed
# postsubmits list Prow jobs that run on every push 
#
# postsubmits:
#   gojek/feast:
