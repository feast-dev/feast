# redis configures Redis that is installed as part of Feast Serving.
# Refer to https://github.com/helm/charts/tree/99430c4afdc88213c1ca08f40eeb03868ffcc9d7/stable/redis
# for additional configuration
redis:
  # enabled specifies whether Redis should be installed as part of Feast Serving.
  #
  # If enabled, "redis_config" in store.yaml will be overwritten by Helm
  # to the configuration in this Redis installation.
  enabled: false
  # usePassword specifies if password is required to access Redis. Note that
  # Feast 0.3 does not support Redis with password.
  usePassword: false
  # cluster configuration for Redis.
  cluster:
    # enabled specifies if Redis should be installed in cluster mode.
    enabled: false

# core configures Feast Core in the same parent feast chart that this Feast
# Serving connects to.
core:
  # enabled specifies that Feast Serving will use Feast Core installed
  # in the same parent feast chart. If enabled, Helm will overwrite
  # "feast.core-host" in application.yaml with the correct value.
  enabled: true

# replicaCount is the number of pods that will be created.
replicaCount: 1

# image configures the Docker image for Feast Serving
image:
  repository: gcr.io/kf-feast/feast-serving
  pullPolicy: IfNotPresent

# application.yaml is the main configuration for Feast Serving application.
#
# Feast Core is a Spring Boot app which uses this yaml configuration file.
# Refer to https://github.com/gojek/feast/blob/79eb4ab5fa3d37102c1dca9968162a98690526ba/serving/src/main/resources/application.yml
# for a complete list and description of the configuration.
#
# Note that some properties defined in application.yaml may be overridden by
# Helm under certain conditions. For example, if core is enabled, then
# "feast.core-host" will be overridden. Also, if "type: BIGQUERY" is specified
# in store.yaml, "feast.jobs.store-options" will be overridden as well with
# the default option supported in Feast 0.3.
application.yaml:
  feast:
    version: 0.3
    core-host: localhost
    core-grpc-port: 6565
    tracing:
      enabled: false
      tracer-name: jaeger
      service-name: feast-serving
    store:
      config-path: /etc/feast/feast-serving/store.yaml
      redis-pool-max-size: 128
      redis-pool-max-idle: 64
    jobs:
      staging-location: ""
      store-type: ""
      store-options: {}
  grpc:
    port: 6566
    enable-reflection: true
  server:
    port: 8080

# store.yaml is the configuration for Feast Store.
#
# Refer to this link for description:
# https://github.com/gojek/feast/blob/79eb4ab5fa3d37102c1dca9968162a98690526ba/protos/feast/core/Store.proto
#
# Use the correct store configuration depending on whether the installed
# Feast Serving is "online" or "batch", by uncommenting the correct store.yaml.
#
# Note that if "redis.enabled: true" and "type: REDIS" in store.yaml,
# Helm will override "redis_config" with configuration of Redis installed
# in this chart.
#
# Note that if "type: BIGQUERY" in store.yaml, Helm assumes Feast Online serving
# is also installed with Redis store. Helm will then override "feast.jobs.store-options"
# in application.yaml with the installed Redis store configuration. This is
# because in Feast 0.3, Redis job store is required.
#
# store.yaml:
#   name: online
#   type: REDIS
#   redis_config:
#     host: localhost
#     port: 6379
#   subscriptions:
#   - project: "*"
#     name: "*"
#     version: "*"
#
# store.yaml:
#   name: bigquery
#   type: BIGQUERY
#   bigquery_config:
#     project_id: PROJECT_ID
#     dataset_id: DATASET_ID
#   subscriptions:
#   - project: "*"
#     name: "*"
#     version: "*"

springConfigProfiles: {}
#  db: |
#    spring:
#      datasource:
#        driverClassName: org.postgresql.Driver
#        url: jdbc:postgresql://${DB_HOST:127.0.0.1}:${DB_PORT:5432}/${DB_DATABASE:postgres}
springConfigProfilesActive: ""
# springConfigMountPath is the directory path where application.yaml and
# store.yaml will be mounted in the container.
springConfigMountPath: /etc/feast/feast-serving

# gcpServiceAccount is the service account that Feast Serving will use.
gcpServiceAccount:
  # useExistingSecret specifies Feast to use an existing secret containing Google
  # Cloud service account JSON key file.
  useExistingSecret: false
  existingSecret:
    # name is the secret name of the existing secret for the service account.
    name: feast-gcp-service-account
    # key is the secret key of the existing secret for the service account.
    # key is normally derived from the file name of the JSON key file.
    key: key.json
  # mountPath is the directory path where the JSON key file will be mounted.
  # the value of "existingSecret.key" is file name of the service account file.
  mountPath: /etc/gcloud/service-accounts

# Project ID picked up by the Cloud SDK (e.g. BigQuery run against this project)
gcpProjectId: ""

# Path to Jar file in the Docker image.
# If using gcr.io/kf-feast/feast-serving this should not need to be changed.
jarPath: /opt/feast/feast-serving.jar

# jvmOptions are options that will be passed to the Java Virtual Machine (JVM)
# running Feast Core.
#
# For example, it is good practice to set min and max heap size in JVM.
# https://stackoverflow.com/questions/6902135/side-effect-for-increasing-maxpermsize-and-max-heap-size
#
# Refer to https://docs.oracle.com/cd/E22289_01/html/821-1274/configuring-the-default-jvm-and-java-arguments.html
# to see other JVM options that can be set.
#
jvmOptions: []
# - -Xms768m
# - -Xmx768m

logType: JSON
logLevel: warn

livenessProbe:
  enabled: false
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5

readinessProbe:
  enabled: false
  initialDelaySeconds: 15
  periodSeconds: 10
  timeoutSeconds: 10
  successThreshold: 1
  failureThreshold: 5

service:
  type: ClusterIP
  http:
    port: 80
    targetPort: 8080
    # nodePort is the port number that each cluster node will listen to
    # https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    #
    # nodePort:
  grpc:
    port: 6566
    targetPort: 6566
    # nodePort is the port number that each cluster node will listen to
    # https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    #
    # nodePort:

ingress:
  grpc:
    enabled: false
    class: nginx
    hosts: []
    annotations: {}
    https:
      enabled: true
      secretNames: {}
    whitelist: ""
    auth:
      enabled: false
  http:
    enabled: false
    class: nginx
    hosts: []
    annotations: {}
    https:
      enabled: true
      secretNames: {}
    whitelist: ""
    auth:
      enabled: false
      authUrl: http://auth-server.auth-ns.svc.cluster.local/auth

prometheus:
  enabled: true

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  #
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}
