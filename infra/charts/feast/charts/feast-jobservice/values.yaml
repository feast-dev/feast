# replicaCount -- Number of pods that will be created
replicaCount: 1

image:
  # image.repository -- Docker image repository
  repository: gcr.io/kf-feast/feast-jobservice
  # image.tag -- Image tag
  tag: develop
  # image.pullPolicy -- Image pull policy
  pullPolicy: IfNotPresent

gcpServiceAccount:
  # gcpServiceAccount.enabled -- Flag to use [service account](https://cloud.google.com/iam/docs/creating-managing-service-account-keys) JSON key
  enabled: false
  existingSecret:
    # gcpServiceAccount.existingSecret.name -- Name of the existing secret containing the service account
    name: feast-gcp-service-account
    # gcpServiceAccount.existingSecret.key -- Key in the secret data (file name of the service account)
    key: credentials.json

# gcpProjectId -- Project ID to use when using Google Cloud services such as BigQuery, Cloud Storage and Dataflow
gcpProjectId: ""

sparkOperator:
  # sparkOperator.enabled -- Flag to create and mount custom job template on the jobservice deployment as configmap
  enabled: false
  # sparkOperator.jobTemplate -- Content of the job template, in yaml format
  jobTemplate: {}

prometheus:
  # prometheus.enabled -- Flag to enable scraping of metrics
  enabled: true

livenessProbe:
  # livenessProbe.enabled -- Flag to enabled the probe
  enabled: true
  # livenessProbe.initialDelaySeconds -- Delay before the probe is initiated
  initialDelaySeconds: 60
  # livenessProbe.periodSeconds -- How often to perform the probe
  periodSeconds: 10
  # livenessProbe.timeoutSeconds -- When the probe times out
  timeoutSeconds: 5
  # livenessProbe.successThreshold -- Min consecutive success for the probe to be considered successful
  successThreshold: 1
  # livenessProbe.failureThreshold -- Min consecutive failures for the probe to be considered failed
  failureThreshold: 5

readinessProbe:
  # readinessProbe.enabled -- Flag to enabled the probe
  enabled: true
  # readinessProbe.initialDelaySeconds -- Delay before the probe is initiated
  initialDelaySeconds: 20
  # readinessProbe.periodSeconds -- How often to perform the probe
  periodSeconds: 10
  # readinessProbe.timeoutSeconds -- When the probe times out
  timeoutSeconds: 10
  # readinessProbe.successThreshold -- Min consecutive success for the probe to be considered successful
  successThreshold: 1
  # readinessProbe.failureThreshold -- Min consecutive failures for the probe to be considered failed
  failureThreshold: 5

service:
  # service.type -- Kubernetes service type
  type: ClusterIP
  http:
    # service.http.port -- Service port for HTTP requests
    port: 80
    # service.http.targetPort -- Container port serving HTTP requests and Prometheus metrics
    targetPort: 8080
    # service.http.nodePort -- Port number that each cluster node will listen to
    nodePort:
  grpc:
    # service.grpc.port -- Service port for GRPC requests
    port: 6568
    # service.grpc.targetPort -- Container port serving GRPC requests
    targetPort: 6568
    # service.grpc.nodePort -- Port number that each cluster node will listen to
    nodePort:

ingress:
  grpc:
    # ingress.grpc.enabled -- Flag to create an ingress resource for the service
    enabled: false
    # ingress.grpc.class -- Which ingress controller to use
    class: nginx
    # ingress.grpc.hosts -- List of hostnames to match when routing requests
    hosts: []
    # ingress.grpc.annotations -- Extra annotations for the ingress
    annotations: {}
    https:
      # ingress.grpc.https.enabled -- Flag to enable HTTPS
      enabled: true
      # ingress.grpc.https.secretNames -- Map of hostname to TLS secret name
      secretNames: {}
    # ingress.grpc.whitelist -- Allowed client IP source ranges
    whitelist: ""
    auth:
      # ingress.grpc.auth.enabled -- Flag to enable auth
      enabled: false
  http:
    # ingress.http.enabled -- Flag to create an ingress resource for the service
    enabled: false
    # ingress.http.class -- Which ingress controller to use
    class: nginx
    # ingress.http.hosts -- List of hostnames to match when routing requests
    hosts: []
    # ingress.http.annotations -- Extra annotations for the ingress
    annotations: {}
    https:
      # ingress.http.https.enabled -- Flag to enable HTTPS
      enabled: true
      # ingress.http.https.secretNames -- Map of hostname to TLS secret name
      secretNames: {}
    # ingress.http.whitelist -- Allowed client IP source ranges
    whitelist: ""
    auth:
      # ingress.http.auth.enabled -- Flag to enable auth
      enabled: false
      # ingress.http.auth.authUrl -- URL to an existing authentication service
      authUrl: http://auth-server.auth-ns.svc.cluster.local/auth

# resources -- CPU/memory [resource requests/limit](https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container)
resources: {}

# nodeSelector -- Node labels for pod assignment
nodeSelector: {}

# envOverrides -- Extra environment variables to set
envOverrides: {}

# podLabels -- Labels to be added to Feast Job Service pods
podLabels: {}

# secrets -- Arbitrary secrets to mount on the job service pod, on /etc/secrets/<secret name>
secrets: []
