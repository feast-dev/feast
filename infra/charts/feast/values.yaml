--- 
###### Core ######
core:
  projectId: "gcp-project-id"
  image: 
    pullPolicy: IfNotPresent
    registry: gcr.io/kf-feast
    repository: feast-core
    tag: "0.3.0"
  replicaCount: 1
  resources:
    requests: 
      cpu: 1
      memory: 2G
  rollingUpdate: 
    maxSurge: 2
    maxUnavailable: 0
  service: 
    type: ClusterIP
    grpc: 
      port: 6565
      targetPort: 6565
    http: 
      port: 80
      targetPort: 8080
    # loadBalancerSourceRanges sets the accepted IP ranges for firewall ingress rule
    # this firewall rule is usually created when the service type is "LoadBalancer"
    # loadBalancerSourceRanges: ["10.0.0.0/8"]
  postgres:
    host: 127.0.0.1
    port: 5432
    database: postgres
    username: postgres
    password: password
  jobs:
    # runner specifies the Beam pipeline runner, use either DirectRunner (for development) or DataflowRunner (for production)
    runner: DirectRunner
    options: "{}"
    monitoring:
      period: 5000
      initialDelay: 60000
  livenessProbe:
    initialDelaySeconds: 120
    failureThreshold: 3
  readinessProbe:
    initialDelaySeconds: 60
    failureThreshold: 1
  enableReflection: true
  store:
    errors:
      type: "STDOUT"
    warehouse:
      type: "BIGQUERY"
    serving:
      type: "REDIS"
      options:
        redis:
          host: localhost
          port: 6379

#  dataflow configuration is required when core.jobs.runner=DataflowRunner
#  dataflow:
#    projectID: ${GCP_PROJECT}
#    location: ${GCP_REGION}

###### Feature stream ###### 
stream:
  type: kafka
  options:
    bootstrapServers: ""
    replicationFactor: 1
    partitions: 1

kafka:
  provision: false

postgresql:
  provision: true
  persistence:
    enabled: true

redis:
  provision: false
  cluster:
    enabled: false

###### Serving ######
serving: 
  config: 
    maxEntityPerBatch: 2000
    maxNumberOfThread: 128
    redisPool: 
      maxIdle: 16
      maxSize: 128
    timeout: 5
  image: 
    pullPolicy: IfNotPresent
    registry: gcr.io/kf-feast
    repository: feast-serving
    tag: "0.3.0"
  replicaCount: 1
  resources:
    requests: 
      cpu: 1
      memory: 1G
  rollingUpdate: 
    maxSurge: 2
    maxUnavailable: 0
  service: 
    type: ClusterIP
    grpc: 
      port: 6565
      targetPort: 6565
    http: 
      port: 80
      targetPort: 8080
    # loadBalancerSourceRanges sets the accepted IP ranges for firewall ingress rule
    # this firewall rule is usually created when the service type is "LoadBalancer"
    # loadBalancerSourceRanges: ["10.0.0.0/8"]
  jaeger:
    enabled: false
  livenessProbe:
    initialDelaySeconds: 120
    failureThreshold: 3
  readinessProbe:
    initialDelaySeconds: 30
    failureThreshold: 1

# Enable only if you have an existing service account you 
# want to mount the secret of.
# serviceAccount:
#   name: feast-service-account
#   key: service-account.json

statsd:
  host: "localhost"
  port: 8125
