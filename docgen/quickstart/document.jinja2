# Quickstart

## Setting up Feast

Install the Feast SDK and CLI using pip:

```bash
pip install feast
```

## Create a new repository

Bootstrap a new feature repository using `feast init` and a built-in template:

{{ get_code_block('init') }}

Register the feature definitions inside this repository by running `feast apply` from the command line:

{{ get_code_block('apply') }}

## Generating training data

{{ get_code_block('training') }}

Load features into the online store using `feast materialize`:

{{ get_code_block('materialize') }}

## Fetching feature vectors for inference

{{ get_code_block('predict') }}

```text
{
    'driver_id': [1001],
    'driver_hourly_stats__conv_rate': [0.49274],
    'driver_hourly_stats__acc_rate': [0.92743],
    'driver_hourly_stats__avg_daily_trips': [72],
}
```

## Next steps

This quickstart covered the essential workflows of using Feast in your local environment. The next step is to `pip install "feast[gcp]"` and set `provider="gcp"` in your `feature_store.yaml` file and push your work to production deployment. You can also use the `feast init -t gcp` command in the CLI to initialize a feature repository with example features in the GCP environment.

* See [Create a feature repository](how-to-guides/create-a-feature-repository.md) for more information on the workflows we covered.
* Join our[ Slack group](https://slack.com) to talk to other Feast users and the maintainers!

