# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
)

from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer as google___protobuf___internal___containers___RepeatedCompositeFieldContainer,
)

from google.protobuf.message import Message as google___protobuf___message___Message

from typing import (
    Iterable as typing___Iterable,
    List as typing___List,
    Optional as typing___Optional,
    Text as typing___Text,
    Tuple as typing___Tuple,
    Union as typing___Union,
    cast as typing___cast,
)

from typing_extensions import Literal as typing_extensions___Literal

builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int
builtin___str = str
if sys.version_info < (3,):
    builtin___buffer = buffer
    builtin___unicode = unicode

class Store(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    class StoreType(builtin___int):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        @classmethod
        def Name(cls, number: builtin___int) -> builtin___str: ...
        @classmethod
        def Value(cls, name: builtin___str) -> "Store.StoreType": ...
        @classmethod
        def keys(cls) -> typing___List[builtin___str]: ...
        @classmethod
        def values(cls) -> typing___List["Store.StoreType"]: ...
        @classmethod
        def items(
            cls,
        ) -> typing___List[typing___Tuple[builtin___str, "Store.StoreType"]]: ...
        INVALID = typing___cast("Store.StoreType", 0)
        REDIS = typing___cast("Store.StoreType", 1)
        BIGQUERY = typing___cast("Store.StoreType", 2)
        CASSANDRA = typing___cast("Store.StoreType", 3)
    INVALID = typing___cast("Store.StoreType", 0)
    REDIS = typing___cast("Store.StoreType", 1)
    BIGQUERY = typing___cast("Store.StoreType", 2)
    CASSANDRA = typing___cast("Store.StoreType", 3)
    class RedisConfig(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        host = ...  # type: typing___Text
        port = ...  # type: builtin___int
        initial_backoff_ms = ...  # type: builtin___int
        max_retries = ...  # type: builtin___int
        def __init__(
            self,
            *,
            host: typing___Optional[typing___Text] = None,
            port: typing___Optional[builtin___int] = None,
            initial_backoff_ms: typing___Optional[builtin___int] = None,
            max_retries: typing___Optional[builtin___int] = None,
        ) -> None: ...
        if sys.version_info >= (3,):
            @classmethod
            def FromString(cls, s: builtin___bytes) -> Store.RedisConfig: ...
        else:
            @classmethod
            def FromString(
                cls,
                s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode],
            ) -> Store.RedisConfig: ...
        def MergeFrom(
            self, other_msg: google___protobuf___message___Message
        ) -> None: ...
        def CopyFrom(
            self, other_msg: google___protobuf___message___Message
        ) -> None: ...
        def ClearField(
            self,
            field_name: typing_extensions___Literal[
                "host",
                b"host",
                "initial_backoff_ms",
                b"initial_backoff_ms",
                "max_retries",
                b"max_retries",
                "port",
                b"port",
            ],
        ) -> None: ...
    class BigQueryConfig(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        project_id = ...  # type: typing___Text
        dataset_id = ...  # type: typing___Text
        def __init__(
            self,
            *,
            project_id: typing___Optional[typing___Text] = None,
            dataset_id: typing___Optional[typing___Text] = None,
        ) -> None: ...
        if sys.version_info >= (3,):
            @classmethod
            def FromString(cls, s: builtin___bytes) -> Store.BigQueryConfig: ...
        else:
            @classmethod
            def FromString(
                cls,
                s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode],
            ) -> Store.BigQueryConfig: ...
        def MergeFrom(
            self, other_msg: google___protobuf___message___Message
        ) -> None: ...
        def CopyFrom(
            self, other_msg: google___protobuf___message___Message
        ) -> None: ...
        def ClearField(
            self,
            field_name: typing_extensions___Literal[
                "dataset_id", b"dataset_id", "project_id", b"project_id"
            ],
        ) -> None: ...
    class CassandraConfig(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        host = ...  # type: typing___Text
        port = ...  # type: builtin___int
        def __init__(
            self,
            *,
            host: typing___Optional[typing___Text] = None,
            port: typing___Optional[builtin___int] = None,
        ) -> None: ...
        if sys.version_info >= (3,):
            @classmethod
            def FromString(cls, s: builtin___bytes) -> Store.CassandraConfig: ...
        else:
            @classmethod
            def FromString(
                cls,
                s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode],
            ) -> Store.CassandraConfig: ...
        def MergeFrom(
            self, other_msg: google___protobuf___message___Message
        ) -> None: ...
        def CopyFrom(
            self, other_msg: google___protobuf___message___Message
        ) -> None: ...
        def ClearField(
            self,
            field_name: typing_extensions___Literal["host", b"host", "port", b"port"],
        ) -> None: ...
    class Subscription(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        project = ...  # type: typing___Text
        name = ...  # type: typing___Text
        version = ...  # type: typing___Text
        def __init__(
            self,
            *,
            project: typing___Optional[typing___Text] = None,
            name: typing___Optional[typing___Text] = None,
            version: typing___Optional[typing___Text] = None,
        ) -> None: ...
        if sys.version_info >= (3,):
            @classmethod
            def FromString(cls, s: builtin___bytes) -> Store.Subscription: ...
        else:
            @classmethod
            def FromString(
                cls,
                s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode],
            ) -> Store.Subscription: ...
        def MergeFrom(
            self, other_msg: google___protobuf___message___Message
        ) -> None: ...
        def CopyFrom(
            self, other_msg: google___protobuf___message___Message
        ) -> None: ...
        def ClearField(
            self,
            field_name: typing_extensions___Literal[
                "name", b"name", "project", b"project", "version", b"version"
            ],
        ) -> None: ...
    name = ...  # type: typing___Text
    type = ...  # type: Store.StoreType
    @property
    def subscriptions(
        self,
    ) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[
        Store.Subscription
    ]: ...
    @property
    def redis_config(self) -> Store.RedisConfig: ...
    @property
    def bigquery_config(self) -> Store.BigQueryConfig: ...
    @property
    def cassandra_config(self) -> Store.CassandraConfig: ...
    def __init__(
        self,
        *,
        name: typing___Optional[typing___Text] = None,
        type: typing___Optional[Store.StoreType] = None,
        subscriptions: typing___Optional[typing___Iterable[Store.Subscription]] = None,
        redis_config: typing___Optional[Store.RedisConfig] = None,
        bigquery_config: typing___Optional[Store.BigQueryConfig] = None,
        cassandra_config: typing___Optional[Store.CassandraConfig] = None,
    ) -> None: ...
    if sys.version_info >= (3,):
        @classmethod
        def FromString(cls, s: builtin___bytes) -> Store: ...
    else:
        @classmethod
        def FromString(
            cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]
        ) -> Store: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions___Literal[
            "bigquery_config",
            b"bigquery_config",
            "cassandra_config",
            b"cassandra_config",
            "config",
            b"config",
            "redis_config",
            b"redis_config",
        ],
    ) -> builtin___bool: ...
    def ClearField(
        self,
        field_name: typing_extensions___Literal[
            "bigquery_config",
            b"bigquery_config",
            "cassandra_config",
            b"cassandra_config",
            "config",
            b"config",
            "name",
            b"name",
            "redis_config",
            b"redis_config",
            "subscriptions",
            b"subscriptions",
            "type",
            b"type",
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["config", b"config"]
    ) -> typing_extensions___Literal[
        "redis_config", "bigquery_config", "cassandra_config"
    ]: ...
