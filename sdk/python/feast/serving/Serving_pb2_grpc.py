# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from feast.serving import Serving_pb2 as feast_dot_serving_dot_Serving__pb2


class ServingAPIStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.QueryFeatures = channel.unary_unary(
        '/feast.serving.ServingAPI/QueryFeatures',
        request_serializer=feast_dot_serving_dot_Serving__pb2.QueryFeaturesRequest.SerializeToString,
        response_deserializer=feast_dot_serving_dot_Serving__pb2.QueryFeaturesResponse.FromString,
        )


class ServingAPIServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def QueryFeatures(self, request, context):
    """Query features from Feast serving storage
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ServingAPIServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'QueryFeatures': grpc.unary_unary_rpc_method_handler(
          servicer.QueryFeatures,
          request_deserializer=feast_dot_serving_dot_Serving__pb2.QueryFeaturesRequest.FromString,
          response_serializer=feast_dot_serving_dot_Serving__pb2.QueryFeaturesResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'feast.serving.ServingAPI', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
