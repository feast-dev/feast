//
// Copyright 2018 The Feast Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.10.0
// source: feast/core/CoreService.proto

package core

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ApplyFeatureSetResponse_Status int32

const (
	// Latest feature set is consistent with provided feature set
	ApplyFeatureSetResponse_NO_CHANGE ApplyFeatureSetResponse_Status = 0
	// New feature set created
	ApplyFeatureSetResponse_CREATED ApplyFeatureSetResponse_Status = 1
	// Error occurred while trying to apply changes
	ApplyFeatureSetResponse_ERROR ApplyFeatureSetResponse_Status = 2
	// Changes detected and updated successfully
	ApplyFeatureSetResponse_UPDATED ApplyFeatureSetResponse_Status = 3
)

// Enum value maps for ApplyFeatureSetResponse_Status.
var (
	ApplyFeatureSetResponse_Status_name = map[int32]string{
		0: "NO_CHANGE",
		1: "CREATED",
		2: "ERROR",
		3: "UPDATED",
	}
	ApplyFeatureSetResponse_Status_value = map[string]int32{
		"NO_CHANGE": 0,
		"CREATED":   1,
		"ERROR":     2,
		"UPDATED":   3,
	}
)

func (x ApplyFeatureSetResponse_Status) Enum() *ApplyFeatureSetResponse_Status {
	p := new(ApplyFeatureSetResponse_Status)
	*p = x
	return p
}

func (x ApplyFeatureSetResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApplyFeatureSetResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_feast_core_CoreService_proto_enumTypes[0].Descriptor()
}

func (ApplyFeatureSetResponse_Status) Type() protoreflect.EnumType {
	return &file_feast_core_CoreService_proto_enumTypes[0]
}

func (x ApplyFeatureSetResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApplyFeatureSetResponse_Status.Descriptor instead.
func (ApplyFeatureSetResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_feast_core_CoreService_proto_rawDescGZIP(), []int{7, 0}
}

type UpdateStoreResponse_Status int32

const (
	// Existing store config matching the given store id is identical to the given store config.
	UpdateStoreResponse_NO_CHANGE UpdateStoreResponse_Status = 0
	// New store created or existing config updated.
	UpdateStoreResponse_UPDATED UpdateStoreResponse_Status = 1
)

// Enum value maps for UpdateStoreResponse_Status.
var (
	UpdateStoreResponse_Status_name = map[int32]string{
		0: "NO_CHANGE",
		1: "UPDATED",
	}
	UpdateStoreResponse_Status_value = map[string]int32{
		"NO_CHANGE": 0,
		"UPDATED":   1,
	}
)

func (x UpdateStoreResponse_Status) Enum() *UpdateStoreResponse_Status {
	p := new(UpdateStoreResponse_Status)
	*p = x
	return p
}

func (x UpdateStoreResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateStoreResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_feast_core_CoreService_proto_enumTypes[1].Descriptor()
}

func (UpdateStoreResponse_Status) Type() protoreflect.EnumType {
	return &file_feast_core_CoreService_proto_enumTypes[1]
}

func (x UpdateStoreResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateStoreResponse_Status.Descriptor instead.
func (UpdateStoreResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_feast_core_CoreService_proto_rawDescGZIP(), []int{11, 0}
}

// Request for a single feature set
type GetFeatureSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of project the feature set belongs to (required)
	Project string `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	// Name of feature set (required).
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetFeatureSetRequest) Reset() {
	*x = GetFeatureSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_CoreService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeatureSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeatureSetRequest) ProtoMessage() {}

func (x *GetFeatureSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_CoreService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeatureSetRequest.ProtoReflect.Descriptor instead.
func (*GetFeatureSetRequest) Descriptor() ([]byte, []int) {
	return file_feast_core_CoreService_proto_rawDescGZIP(), []int{0}
}

func (x *GetFeatureSetRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *GetFeatureSetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Response containing a single feature set
type GetFeatureSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureSet *FeatureSet `protobuf:"bytes,1,opt,name=feature_set,json=featureSet,proto3" json:"feature_set,omitempty"`
}

func (x *GetFeatureSetResponse) Reset() {
	*x = GetFeatureSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_CoreService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeatureSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeatureSetResponse) ProtoMessage() {}

func (x *GetFeatureSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_CoreService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeatureSetResponse.ProtoReflect.Descriptor instead.
func (*GetFeatureSetResponse) Descriptor() ([]byte, []int) {
	return file_feast_core_CoreService_proto_rawDescGZIP(), []int{1}
}

func (x *GetFeatureSetResponse) GetFeatureSet() *FeatureSet {
	if x != nil {
		return x.FeatureSet
	}
	return nil
}

// Retrieves details for all versions of a specific feature set
type ListFeatureSetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *ListFeatureSetsRequest_Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListFeatureSetsRequest) Reset() {
	*x = ListFeatureSetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_CoreService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFeatureSetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFeatureSetsRequest) ProtoMessage() {}

func (x *ListFeatureSetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_CoreService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFeatureSetsRequest.ProtoReflect.Descriptor instead.
func (*ListFeatureSetsRequest) Descriptor() ([]byte, []int) {
	return file_feast_core_CoreService_proto_rawDescGZIP(), []int{2}
}

func (x *ListFeatureSetsRequest) GetFilter() *ListFeatureSetsRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListFeatureSetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureSets []*FeatureSet `protobuf:"bytes,1,rep,name=feature_sets,json=featureSets,proto3" json:"feature_sets,omitempty"`
}

func (x *ListFeatureSetsResponse) Reset() {
	*x = ListFeatureSetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_CoreService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFeatureSetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFeatureSetsResponse) ProtoMessage() {}

func (x *ListFeatureSetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_CoreService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFeatureSetsResponse.ProtoReflect.Descriptor instead.
func (*ListFeatureSetsResponse) Descriptor() ([]byte, []int) {
	return file_feast_core_CoreService_proto_rawDescGZIP(), []int{3}
}

func (x *ListFeatureSetsResponse) GetFeatureSets() []*FeatureSet {
	if x != nil {
		return x.FeatureSets
	}
	return nil
}

type ListStoresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *ListStoresRequest_Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListStoresRequest) Reset() {
	*x = ListStoresRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_CoreService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStoresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStoresRequest) ProtoMessage() {}

func (x *ListStoresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_CoreService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStoresRequest.ProtoReflect.Descriptor instead.
func (*ListStoresRequest) Descriptor() ([]byte, []int) {
	return file_feast_core_CoreService_proto_rawDescGZIP(), []int{4}
}

func (x *ListStoresRequest) GetFilter() *ListStoresRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListStoresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Store []*Store `protobuf:"bytes,1,rep,name=store,proto3" json:"store,omitempty"`
}

func (x *ListStoresResponse) Reset() {
	*x = ListStoresResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_CoreService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStoresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStoresResponse) ProtoMessage() {}

func (x *ListStoresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_CoreService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStoresResponse.ProtoReflect.Descriptor instead.
func (*ListStoresResponse) Descriptor() ([]byte, []int) {
	return file_feast_core_CoreService_proto_rawDescGZIP(), []int{5}
}

func (x *ListStoresResponse) GetStore() []*Store {
	if x != nil {
		return x.Store
	}
	return nil
}

type ApplyFeatureSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureSet *FeatureSet `protobuf:"bytes,1,opt,name=feature_set,json=featureSet,proto3" json:"feature_set,omitempty"`
}

func (x *ApplyFeatureSetRequest) Reset() {
	*x = ApplyFeatureSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_CoreService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyFeatureSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyFeatureSetRequest) ProtoMessage() {}

func (x *ApplyFeatureSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_CoreService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyFeatureSetRequest.ProtoReflect.Descriptor instead.
func (*ApplyFeatureSetRequest) Descriptor() ([]byte, []int) {
	return file_feast_core_CoreService_proto_rawDescGZIP(), []int{6}
}

func (x *ApplyFeatureSetRequest) GetFeatureSet() *FeatureSet {
	if x != nil {
		return x.FeatureSet
	}
	return nil
}

type ApplyFeatureSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureSet *FeatureSet                    `protobuf:"bytes,1,opt,name=feature_set,json=featureSet,proto3" json:"feature_set,omitempty"`
	Status     ApplyFeatureSetResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=feast.core.ApplyFeatureSetResponse_Status" json:"status,omitempty"`
}

func (x *ApplyFeatureSetResponse) Reset() {
	*x = ApplyFeatureSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_CoreService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyFeatureSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyFeatureSetResponse) ProtoMessage() {}

func (x *ApplyFeatureSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_CoreService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyFeatureSetResponse.ProtoReflect.Descriptor instead.
func (*ApplyFeatureSetResponse) Descriptor() ([]byte, []int) {
	return file_feast_core_CoreService_proto_rawDescGZIP(), []int{7}
}

func (x *ApplyFeatureSetResponse) GetFeatureSet() *FeatureSet {
	if x != nil {
		return x.FeatureSet
	}
	return nil
}

func (x *ApplyFeatureSetResponse) GetStatus() ApplyFeatureSetResponse_Status {
	if x != nil {
		return x.Status
	}
	return ApplyFeatureSetResponse_NO_CHANGE
}

type GetFeastCoreVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetFeastCoreVersionRequest) Reset() {
	*x = GetFeastCoreVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_CoreService_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeastCoreVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeastCoreVersionRequest) ProtoMessage() {}

func (x *GetFeastCoreVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_CoreService_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeastCoreVersionRequest.ProtoReflect.Descriptor instead.
func (*GetFeastCoreVersionRequest) Descriptor() ([]byte, []int) {
	return file_feast_core_CoreService_proto_rawDescGZIP(), []int{8}
}

type GetFeastCoreVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetFeastCoreVersionResponse) Reset() {
	*x = GetFeastCoreVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_CoreService_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeastCoreVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeastCoreVersionResponse) ProtoMessage() {}

func (x *GetFeastCoreVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_CoreService_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeastCoreVersionResponse.ProtoReflect.Descriptor instead.
func (*GetFeastCoreVersionResponse) Descriptor() ([]byte, []int) {
	return file_feast_core_CoreService_proto_rawDescGZIP(), []int{9}
}

func (x *GetFeastCoreVersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type UpdateStoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Store *Store `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"`
}

func (x *UpdateStoreRequest) Reset() {
	*x = UpdateStoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_CoreService_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStoreRequest) ProtoMessage() {}

func (x *UpdateStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_CoreService_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStoreRequest.ProtoReflect.Descriptor instead.
func (*UpdateStoreRequest) Descriptor() ([]byte, []int) {
	return file_feast_core_CoreService_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateStoreRequest) GetStore() *Store {
	if x != nil {
		return x.Store
	}
	return nil
}

type UpdateStoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Store  *Store                     `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"`
	Status UpdateStoreResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=feast.core.UpdateStoreResponse_Status" json:"status,omitempty"`
}

func (x *UpdateStoreResponse) Reset() {
	*x = UpdateStoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_CoreService_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStoreResponse) ProtoMessage() {}

func (x *UpdateStoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_CoreService_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStoreResponse.ProtoReflect.Descriptor instead.
func (*UpdateStoreResponse) Descriptor() ([]byte, []int) {
	return file_feast_core_CoreService_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateStoreResponse) GetStore() *Store {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *UpdateStoreResponse) GetStatus() UpdateStoreResponse_Status {
	if x != nil {
		return x.Status
	}
	return UpdateStoreResponse_NO_CHANGE
}

// Request to create a project
type CreateProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of project (required)
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreateProjectRequest) Reset() {
	*x = CreateProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_CoreService_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProjectRequest) ProtoMessage() {}

func (x *CreateProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_CoreService_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProjectRequest.ProtoReflect.Descriptor instead.
func (*CreateProjectRequest) Descriptor() ([]byte, []int) {
	return file_feast_core_CoreService_proto_rawDescGZIP(), []int{12}
}

func (x *CreateProjectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Response for creation of a project
type CreateProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateProjectResponse) Reset() {
	*x = CreateProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_CoreService_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProjectResponse) ProtoMessage() {}

func (x *CreateProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_CoreService_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProjectResponse.ProtoReflect.Descriptor instead.
func (*CreateProjectResponse) Descriptor() ([]byte, []int) {
	return file_feast_core_CoreService_proto_rawDescGZIP(), []int{13}
}

// Request for the archival of a project
type ArchiveProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of project to be archived
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ArchiveProjectRequest) Reset() {
	*x = ArchiveProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_CoreService_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveProjectRequest) ProtoMessage() {}

func (x *ArchiveProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_CoreService_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveProjectRequest.ProtoReflect.Descriptor instead.
func (*ArchiveProjectRequest) Descriptor() ([]byte, []int) {
	return file_feast_core_CoreService_proto_rawDescGZIP(), []int{14}
}

func (x *ArchiveProjectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Response for archival of a project
type ArchiveProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ArchiveProjectResponse) Reset() {
	*x = ArchiveProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_CoreService_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveProjectResponse) ProtoMessage() {}

func (x *ArchiveProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_CoreService_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveProjectResponse.ProtoReflect.Descriptor instead.
func (*ArchiveProjectResponse) Descriptor() ([]byte, []int) {
	return file_feast_core_CoreService_proto_rawDescGZIP(), []int{15}
}

// Request for listing of projects
type ListProjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListProjectsRequest) Reset() {
	*x = ListProjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_CoreService_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectsRequest) ProtoMessage() {}

func (x *ListProjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_CoreService_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectsRequest.ProtoReflect.Descriptor instead.
func (*ListProjectsRequest) Descriptor() ([]byte, []int) {
	return file_feast_core_CoreService_proto_rawDescGZIP(), []int{16}
}

// Response for listing of projects
type ListProjectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of project names (archived projects are filtered out)
	Projects []string `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
}

func (x *ListProjectsResponse) Reset() {
	*x = ListProjectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_CoreService_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectsResponse) ProtoMessage() {}

func (x *ListProjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_CoreService_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectsResponse.ProtoReflect.Descriptor instead.
func (*ListProjectsResponse) Descriptor() ([]byte, []int) {
	return file_feast_core_CoreService_proto_rawDescGZIP(), []int{17}
}

func (x *ListProjectsResponse) GetProjects() []string {
	if x != nil {
		return x.Projects
	}
	return nil
}

// Request for listing ingestion jobs
type ListIngestionJobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *ListIngestionJobsRequest_Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListIngestionJobsRequest) Reset() {
	*x = ListIngestionJobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_CoreService_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIngestionJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIngestionJobsRequest) ProtoMessage() {}

func (x *ListIngestionJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_CoreService_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIngestionJobsRequest.ProtoReflect.Descriptor instead.
func (*ListIngestionJobsRequest) Descriptor() ([]byte, []int) {
	return file_feast_core_CoreService_proto_rawDescGZIP(), []int{18}
}

func (x *ListIngestionJobsRequest) GetFilter() *ListIngestionJobsRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

// Response from listing ingestion jobs
type ListIngestionJobsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jobs []*IngestionJob `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
}

func (x *ListIngestionJobsResponse) Reset() {
	*x = ListIngestionJobsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_CoreService_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIngestionJobsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIngestionJobsResponse) ProtoMessage() {}

func (x *ListIngestionJobsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_CoreService_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIngestionJobsResponse.ProtoReflect.Descriptor instead.
func (*ListIngestionJobsResponse) Descriptor() ([]byte, []int) {
	return file_feast_core_CoreService_proto_rawDescGZIP(), []int{19}
}

func (x *ListIngestionJobsResponse) GetJobs() []*IngestionJob {
	if x != nil {
		return x.Jobs
	}
	return nil
}

// Request to restart ingestion job
type RestartIngestionJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Job ID assigned by Feast
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RestartIngestionJobRequest) Reset() {
	*x = RestartIngestionJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_CoreService_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartIngestionJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartIngestionJobRequest) ProtoMessage() {}

func (x *RestartIngestionJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_CoreService_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartIngestionJobRequest.ProtoReflect.Descriptor instead.
func (*RestartIngestionJobRequest) Descriptor() ([]byte, []int) {
	return file_feast_core_CoreService_proto_rawDescGZIP(), []int{20}
}

func (x *RestartIngestionJobRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response from restartingan  injestion job
type RestartIngestionJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RestartIngestionJobResponse) Reset() {
	*x = RestartIngestionJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_CoreService_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartIngestionJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartIngestionJobResponse) ProtoMessage() {}

func (x *RestartIngestionJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_CoreService_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartIngestionJobResponse.ProtoReflect.Descriptor instead.
func (*RestartIngestionJobResponse) Descriptor() ([]byte, []int) {
	return file_feast_core_CoreService_proto_rawDescGZIP(), []int{21}
}

// Request to stop ingestion job
type StopIngestionJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Job ID assigned by Feast
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StopIngestionJobRequest) Reset() {
	*x = StopIngestionJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_CoreService_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopIngestionJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopIngestionJobRequest) ProtoMessage() {}

func (x *StopIngestionJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_CoreService_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopIngestionJobRequest.ProtoReflect.Descriptor instead.
func (*StopIngestionJobRequest) Descriptor() ([]byte, []int) {
	return file_feast_core_CoreService_proto_rawDescGZIP(), []int{22}
}

func (x *StopIngestionJobRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request from stopping an ingestion job
type StopIngestionJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopIngestionJobResponse) Reset() {
	*x = StopIngestionJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_CoreService_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopIngestionJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopIngestionJobResponse) ProtoMessage() {}

func (x *StopIngestionJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_CoreService_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopIngestionJobResponse.ProtoReflect.Descriptor instead.
func (*StopIngestionJobResponse) Descriptor() ([]byte, []int) {
	return file_feast_core_CoreService_proto_rawDescGZIP(), []int{23}
}

type ListFeatureSetsRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of project that the feature sets belongs to. This can be one of
	// - [project_name]
	// - *
	// If an asterisk is provided, filtering on projects will be disabled. All projects will
	// be matched. It is NOT possible to provide an asterisk with a string in order to do
	// pattern matching.
	Project string `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	// Name of the desired feature set. Asterisks can be used as wildcards in the name.
	// Matching on names is only permitted if a specific project is defined. It is disallowed
	// If the project name is set to "*"
	// e.g.
	// - * can be used to match all feature sets
	// - my-feature-set* can be used to match all features prefixed by "my-feature-set"
	// - my-feature-set-6 can be used to select a single feature set
	FeatureSetName string `protobuf:"bytes,1,opt,name=feature_set_name,json=featureSetName,proto3" json:"feature_set_name,omitempty"`
}

func (x *ListFeatureSetsRequest_Filter) Reset() {
	*x = ListFeatureSetsRequest_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_CoreService_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFeatureSetsRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFeatureSetsRequest_Filter) ProtoMessage() {}

func (x *ListFeatureSetsRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_CoreService_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFeatureSetsRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListFeatureSetsRequest_Filter) Descriptor() ([]byte, []int) {
	return file_feast_core_CoreService_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ListFeatureSetsRequest_Filter) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ListFeatureSetsRequest_Filter) GetFeatureSetName() string {
	if x != nil {
		return x.FeatureSetName
	}
	return ""
}

type ListStoresRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of desired store. Regex is not supported in this query.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ListStoresRequest_Filter) Reset() {
	*x = ListStoresRequest_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_CoreService_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStoresRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStoresRequest_Filter) ProtoMessage() {}

func (x *ListStoresRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_CoreService_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStoresRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListStoresRequest_Filter) Descriptor() ([]byte, []int) {
	return file_feast_core_CoreService_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ListStoresRequest_Filter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListIngestionJobsRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter by Job ID assigned by Feast
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Filter by ingestion job target feature set.
	FeatureSetReference *FeatureSetReference `protobuf:"bytes,2,opt,name=feature_set_reference,json=featureSetReference,proto3" json:"feature_set_reference,omitempty"`
	// Filter by Name of store
	StoreName string `protobuf:"bytes,3,opt,name=store_name,json=storeName,proto3" json:"store_name,omitempty"`
}

func (x *ListIngestionJobsRequest_Filter) Reset() {
	*x = ListIngestionJobsRequest_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_CoreService_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIngestionJobsRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIngestionJobsRequest_Filter) ProtoMessage() {}

func (x *ListIngestionJobsRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_CoreService_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIngestionJobsRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListIngestionJobsRequest_Filter) Descriptor() ([]byte, []int) {
	return file_feast_core_CoreService_proto_rawDescGZIP(), []int{18, 0}
}

func (x *ListIngestionJobsRequest_Filter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListIngestionJobsRequest_Filter) GetFeatureSetReference() *FeatureSetReference {
	if x != nil {
		return x.FeatureSetReference
	}
	return nil
}

func (x *ListIngestionJobsRequest_Filter) GetStoreName() string {
	if x != nil {
		return x.StoreName
	}
	return ""
}

var File_feast_core_CoreService_proto protoreflect.FileDescriptor

var file_feast_core_CoreService_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x43, 0x6f, 0x72,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a,
	0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x1b, 0x66, 0x65, 0x61, 0x73,
	0x74, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x24, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x44, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x50, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74,
	0x52, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x22, 0xa9, 0x01, 0x0a,
	0x16, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x4c, 0x0a, 0x06, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x54, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73,
	0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x65, 0x61, 0x73,
	0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65,
	0x74, 0x52, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x73, 0x22, 0x6f,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x1a, 0x1c, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x3d, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x51,
	0x0a, 0x16, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x65, 0x74, 0x52, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65,
	0x74, 0x22, 0xd4, 0x01, 0x0a, 0x17, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x52, 0x0a, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3c, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x22, 0x1c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x46,
	0x65, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x37, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61,
	0x73, 0x74, 0x43, 0x6f, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x3d, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0xa4,
	0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x24, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x22, 0x2a, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x17, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x0a, 0x15, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x15, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x32, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0xee, 0x01, 0x0a,
	0x18, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f,
	0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x65, 0x61, 0x73,
	0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x8c,
	0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x15, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x49, 0x0a,
	0x19, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f,
	0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x6a, 0x6f,
	0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4a,
	0x6f, 0x62, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x22, 0x2c, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x0a, 0x17, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x1a, 0x0a, 0x18, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xcb, 0x08, 0x0a,
	0x0b, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x66, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x72, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x66, 0x65,
	0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x73,
	0x74, 0x43, 0x6f, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x65, 0x74, 0x12, 0x20, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x73, 0x12, 0x22, 0x2e,
	0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x66, 0x65, 0x61,
	0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4e, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1e,
	0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x54, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x20, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x21, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x66, 0x65, 0x61,
	0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51,
	0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x1f,
	0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x60, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x24, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x66,
	0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x12, 0x26, 0x2e, 0x66, 0x65, 0x61,
	0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x10, 0x53,
	0x74, 0x6f, 0x70, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x12,
	0x23, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x6f,
	0x70, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x4f, 0x0a, 0x0a, 0x66, 0x65,
	0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x10, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6a, 0x65, 0x6b, 0x2f, 0x66, 0x65, 0x61,
	0x73, 0x74, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_feast_core_CoreService_proto_rawDescOnce sync.Once
	file_feast_core_CoreService_proto_rawDescData = file_feast_core_CoreService_proto_rawDesc
)

func file_feast_core_CoreService_proto_rawDescGZIP() []byte {
	file_feast_core_CoreService_proto_rawDescOnce.Do(func() {
		file_feast_core_CoreService_proto_rawDescData = protoimpl.X.CompressGZIP(file_feast_core_CoreService_proto_rawDescData)
	})
	return file_feast_core_CoreService_proto_rawDescData
}

var file_feast_core_CoreService_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_feast_core_CoreService_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_feast_core_CoreService_proto_goTypes = []interface{}{
	(ApplyFeatureSetResponse_Status)(0),     // 0: feast.core.ApplyFeatureSetResponse.Status
	(UpdateStoreResponse_Status)(0),         // 1: feast.core.UpdateStoreResponse.Status
	(*GetFeatureSetRequest)(nil),            // 2: feast.core.GetFeatureSetRequest
	(*GetFeatureSetResponse)(nil),           // 3: feast.core.GetFeatureSetResponse
	(*ListFeatureSetsRequest)(nil),          // 4: feast.core.ListFeatureSetsRequest
	(*ListFeatureSetsResponse)(nil),         // 5: feast.core.ListFeatureSetsResponse
	(*ListStoresRequest)(nil),               // 6: feast.core.ListStoresRequest
	(*ListStoresResponse)(nil),              // 7: feast.core.ListStoresResponse
	(*ApplyFeatureSetRequest)(nil),          // 8: feast.core.ApplyFeatureSetRequest
	(*ApplyFeatureSetResponse)(nil),         // 9: feast.core.ApplyFeatureSetResponse
	(*GetFeastCoreVersionRequest)(nil),      // 10: feast.core.GetFeastCoreVersionRequest
	(*GetFeastCoreVersionResponse)(nil),     // 11: feast.core.GetFeastCoreVersionResponse
	(*UpdateStoreRequest)(nil),              // 12: feast.core.UpdateStoreRequest
	(*UpdateStoreResponse)(nil),             // 13: feast.core.UpdateStoreResponse
	(*CreateProjectRequest)(nil),            // 14: feast.core.CreateProjectRequest
	(*CreateProjectResponse)(nil),           // 15: feast.core.CreateProjectResponse
	(*ArchiveProjectRequest)(nil),           // 16: feast.core.ArchiveProjectRequest
	(*ArchiveProjectResponse)(nil),          // 17: feast.core.ArchiveProjectResponse
	(*ListProjectsRequest)(nil),             // 18: feast.core.ListProjectsRequest
	(*ListProjectsResponse)(nil),            // 19: feast.core.ListProjectsResponse
	(*ListIngestionJobsRequest)(nil),        // 20: feast.core.ListIngestionJobsRequest
	(*ListIngestionJobsResponse)(nil),       // 21: feast.core.ListIngestionJobsResponse
	(*RestartIngestionJobRequest)(nil),      // 22: feast.core.RestartIngestionJobRequest
	(*RestartIngestionJobResponse)(nil),     // 23: feast.core.RestartIngestionJobResponse
	(*StopIngestionJobRequest)(nil),         // 24: feast.core.StopIngestionJobRequest
	(*StopIngestionJobResponse)(nil),        // 25: feast.core.StopIngestionJobResponse
	(*ListFeatureSetsRequest_Filter)(nil),   // 26: feast.core.ListFeatureSetsRequest.Filter
	(*ListStoresRequest_Filter)(nil),        // 27: feast.core.ListStoresRequest.Filter
	(*ListIngestionJobsRequest_Filter)(nil), // 28: feast.core.ListIngestionJobsRequest.Filter
	(*FeatureSet)(nil),                      // 29: feast.core.FeatureSet
	(*Store)(nil),                           // 30: feast.core.Store
	(*IngestionJob)(nil),                    // 31: feast.core.IngestionJob
	(*FeatureSetReference)(nil),             // 32: feast.core.FeatureSetReference
}
var file_feast_core_CoreService_proto_depIdxs = []int32{
	29, // 0: feast.core.GetFeatureSetResponse.feature_set:type_name -> feast.core.FeatureSet
	26, // 1: feast.core.ListFeatureSetsRequest.filter:type_name -> feast.core.ListFeatureSetsRequest.Filter
	29, // 2: feast.core.ListFeatureSetsResponse.feature_sets:type_name -> feast.core.FeatureSet
	27, // 3: feast.core.ListStoresRequest.filter:type_name -> feast.core.ListStoresRequest.Filter
	30, // 4: feast.core.ListStoresResponse.store:type_name -> feast.core.Store
	29, // 5: feast.core.ApplyFeatureSetRequest.feature_set:type_name -> feast.core.FeatureSet
	29, // 6: feast.core.ApplyFeatureSetResponse.feature_set:type_name -> feast.core.FeatureSet
	0,  // 7: feast.core.ApplyFeatureSetResponse.status:type_name -> feast.core.ApplyFeatureSetResponse.Status
	30, // 8: feast.core.UpdateStoreRequest.store:type_name -> feast.core.Store
	30, // 9: feast.core.UpdateStoreResponse.store:type_name -> feast.core.Store
	1,  // 10: feast.core.UpdateStoreResponse.status:type_name -> feast.core.UpdateStoreResponse.Status
	28, // 11: feast.core.ListIngestionJobsRequest.filter:type_name -> feast.core.ListIngestionJobsRequest.Filter
	31, // 12: feast.core.ListIngestionJobsResponse.jobs:type_name -> feast.core.IngestionJob
	32, // 13: feast.core.ListIngestionJobsRequest.Filter.feature_set_reference:type_name -> feast.core.FeatureSetReference
	10, // 14: feast.core.CoreService.GetFeastCoreVersion:input_type -> feast.core.GetFeastCoreVersionRequest
	2,  // 15: feast.core.CoreService.GetFeatureSet:input_type -> feast.core.GetFeatureSetRequest
	4,  // 16: feast.core.CoreService.ListFeatureSets:input_type -> feast.core.ListFeatureSetsRequest
	6,  // 17: feast.core.CoreService.ListStores:input_type -> feast.core.ListStoresRequest
	8,  // 18: feast.core.CoreService.ApplyFeatureSet:input_type -> feast.core.ApplyFeatureSetRequest
	12, // 19: feast.core.CoreService.UpdateStore:input_type -> feast.core.UpdateStoreRequest
	14, // 20: feast.core.CoreService.CreateProject:input_type -> feast.core.CreateProjectRequest
	16, // 21: feast.core.CoreService.ArchiveProject:input_type -> feast.core.ArchiveProjectRequest
	18, // 22: feast.core.CoreService.ListProjects:input_type -> feast.core.ListProjectsRequest
	20, // 23: feast.core.CoreService.ListIngestionJobs:input_type -> feast.core.ListIngestionJobsRequest
	22, // 24: feast.core.CoreService.RestartIngestionJob:input_type -> feast.core.RestartIngestionJobRequest
	24, // 25: feast.core.CoreService.StopIngestionJob:input_type -> feast.core.StopIngestionJobRequest
	11, // 26: feast.core.CoreService.GetFeastCoreVersion:output_type -> feast.core.GetFeastCoreVersionResponse
	3,  // 27: feast.core.CoreService.GetFeatureSet:output_type -> feast.core.GetFeatureSetResponse
	5,  // 28: feast.core.CoreService.ListFeatureSets:output_type -> feast.core.ListFeatureSetsResponse
	7,  // 29: feast.core.CoreService.ListStores:output_type -> feast.core.ListStoresResponse
	9,  // 30: feast.core.CoreService.ApplyFeatureSet:output_type -> feast.core.ApplyFeatureSetResponse
	13, // 31: feast.core.CoreService.UpdateStore:output_type -> feast.core.UpdateStoreResponse
	15, // 32: feast.core.CoreService.CreateProject:output_type -> feast.core.CreateProjectResponse
	17, // 33: feast.core.CoreService.ArchiveProject:output_type -> feast.core.ArchiveProjectResponse
	19, // 34: feast.core.CoreService.ListProjects:output_type -> feast.core.ListProjectsResponse
	21, // 35: feast.core.CoreService.ListIngestionJobs:output_type -> feast.core.ListIngestionJobsResponse
	23, // 36: feast.core.CoreService.RestartIngestionJob:output_type -> feast.core.RestartIngestionJobResponse
	25, // 37: feast.core.CoreService.StopIngestionJob:output_type -> feast.core.StopIngestionJobResponse
	26, // [26:38] is the sub-list for method output_type
	14, // [14:26] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_feast_core_CoreService_proto_init() }
func file_feast_core_CoreService_proto_init() {
	if File_feast_core_CoreService_proto != nil {
		return
	}
	file_feast_core_FeatureSet_proto_init()
	file_feast_core_Store_proto_init()
	file_feast_core_FeatureSetReference_proto_init()
	file_feast_core_IngestionJob_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_feast_core_CoreService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeatureSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_CoreService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeatureSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_CoreService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFeatureSetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_CoreService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFeatureSetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_CoreService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStoresRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_CoreService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStoresResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_CoreService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyFeatureSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_CoreService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyFeatureSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_CoreService_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeastCoreVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_CoreService_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeastCoreVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_CoreService_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_CoreService_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_CoreService_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_CoreService_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_CoreService_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_CoreService_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_CoreService_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_CoreService_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_CoreService_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIngestionJobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_CoreService_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIngestionJobsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_CoreService_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartIngestionJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_CoreService_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartIngestionJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_CoreService_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopIngestionJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_CoreService_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopIngestionJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_CoreService_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFeatureSetsRequest_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_CoreService_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStoresRequest_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_CoreService_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIngestionJobsRequest_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_feast_core_CoreService_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_feast_core_CoreService_proto_goTypes,
		DependencyIndexes: file_feast_core_CoreService_proto_depIdxs,
		EnumInfos:         file_feast_core_CoreService_proto_enumTypes,
		MessageInfos:      file_feast_core_CoreService_proto_msgTypes,
	}.Build()
	File_feast_core_CoreService_proto = out.File
	file_feast_core_CoreService_proto_rawDesc = nil
	file_feast_core_CoreService_proto_goTypes = nil
	file_feast_core_CoreService_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CoreServiceClient is the client API for CoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CoreServiceClient interface {
	// Retrieve version information about this Feast deployment
	GetFeastCoreVersion(ctx context.Context, in *GetFeastCoreVersionRequest, opts ...grpc.CallOption) (*GetFeastCoreVersionResponse, error)
	// Returns a specific feature set
	GetFeatureSet(ctx context.Context, in *GetFeatureSetRequest, opts ...grpc.CallOption) (*GetFeatureSetResponse, error)
	// Retrieve feature set details given a filter.
	//
	// Returns all feature sets matching that filter. If none are found,
	// an empty list will be returned.
	// If no filter is provided in the request, the response will contain all the feature
	// sets currently stored in the registry.
	ListFeatureSets(ctx context.Context, in *ListFeatureSetsRequest, opts ...grpc.CallOption) (*ListFeatureSetsResponse, error)
	// Retrieve store details given a filter.
	//
	// Returns all stores matching that filter. If none are found, an empty list will be returned.
	// If no filter is provided in the request, the response will contain all the stores currently
	// stored in the registry.
	ListStores(ctx context.Context, in *ListStoresRequest, opts ...grpc.CallOption) (*ListStoresResponse, error)
	// Create or update and existing feature set.
	//
	// This function is idempotent - it will not create a new feature set if schema does not change.
	// Schema changes will update the feature set if the changes are valid.
	// All changes except the following are valid:
	// - Changes to feature set id (name, project)
	// - Changes to entities
	// - Changes to feature type
	ApplyFeatureSet(ctx context.Context, in *ApplyFeatureSetRequest, opts ...grpc.CallOption) (*ApplyFeatureSetResponse, error)
	// Updates core with the configuration of the store.
	//
	// If the changes are valid, core will return the given store configuration in response, and
	// start or update the necessary feature population jobs for the updated store.
	UpdateStore(ctx context.Context, in *UpdateStoreRequest, opts ...grpc.CallOption) (*UpdateStoreResponse, error)
	// Creates a project. Projects serve as namespaces within which resources like features will be
	// created. Both feature set names as well as field names must be unique within a project. Project
	// names themselves must be globally unique.
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
	// Archives a project. Archived projects will continue to exist and function, but won't be visible
	// through the Core API. Any existing ingestion or serving requests will continue to function,
	// but will result in warning messages being logged. It is not possible to unarchive a project
	// through the Core API
	ArchiveProject(ctx context.Context, in *ArchiveProjectRequest, opts ...grpc.CallOption) (*ArchiveProjectResponse, error)
	// Lists all projects active projects.
	ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	// List Ingestion Jobs given an optional filter.
	// Returns allow ingestions matching the given request filter.
	// Returns all ingestion jobs if no filter is provided.
	// Returns an empty list if no ingestion jobs match the filter.
	ListIngestionJobs(ctx context.Context, in *ListIngestionJobsRequest, opts ...grpc.CallOption) (*ListIngestionJobsResponse, error)
	// Restart an Ingestion Job.  Restarts the ingestion job with the given job id.
	// NOTE: Data might be lost during the restart for some job runners.
	// Does not support stopping a job in a transitional (ie pending, suspending, aborting),
	// terminal state (ie suspended or aborted) or unknown status
	RestartIngestionJob(ctx context.Context, in *RestartIngestionJobRequest, opts ...grpc.CallOption) (*RestartIngestionJobResponse, error)
	// Stop an Ingestion Job.  Stop (Aborts) the ingestion job with the given job id.
	// Does nothing if the target job if already in a terminal state (ie suspended or aborted).
	// Does not support stopping a job in a transitional (ie pending, suspending, aborting) or unknown status
	StopIngestionJob(ctx context.Context, in *StopIngestionJobRequest, opts ...grpc.CallOption) (*StopIngestionJobResponse, error)
}

type coreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreServiceClient(cc grpc.ClientConnInterface) CoreServiceClient {
	return &coreServiceClient{cc}
}

func (c *coreServiceClient) GetFeastCoreVersion(ctx context.Context, in *GetFeastCoreVersionRequest, opts ...grpc.CallOption) (*GetFeastCoreVersionResponse, error) {
	out := new(GetFeastCoreVersionResponse)
	err := c.cc.Invoke(ctx, "/feast.core.CoreService/GetFeastCoreVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetFeatureSet(ctx context.Context, in *GetFeatureSetRequest, opts ...grpc.CallOption) (*GetFeatureSetResponse, error) {
	out := new(GetFeatureSetResponse)
	err := c.cc.Invoke(ctx, "/feast.core.CoreService/GetFeatureSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) ListFeatureSets(ctx context.Context, in *ListFeatureSetsRequest, opts ...grpc.CallOption) (*ListFeatureSetsResponse, error) {
	out := new(ListFeatureSetsResponse)
	err := c.cc.Invoke(ctx, "/feast.core.CoreService/ListFeatureSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) ListStores(ctx context.Context, in *ListStoresRequest, opts ...grpc.CallOption) (*ListStoresResponse, error) {
	out := new(ListStoresResponse)
	err := c.cc.Invoke(ctx, "/feast.core.CoreService/ListStores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) ApplyFeatureSet(ctx context.Context, in *ApplyFeatureSetRequest, opts ...grpc.CallOption) (*ApplyFeatureSetResponse, error) {
	out := new(ApplyFeatureSetResponse)
	err := c.cc.Invoke(ctx, "/feast.core.CoreService/ApplyFeatureSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) UpdateStore(ctx context.Context, in *UpdateStoreRequest, opts ...grpc.CallOption) (*UpdateStoreResponse, error) {
	out := new(UpdateStoreResponse)
	err := c.cc.Invoke(ctx, "/feast.core.CoreService/UpdateStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	out := new(CreateProjectResponse)
	err := c.cc.Invoke(ctx, "/feast.core.CoreService/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) ArchiveProject(ctx context.Context, in *ArchiveProjectRequest, opts ...grpc.CallOption) (*ArchiveProjectResponse, error) {
	out := new(ArchiveProjectResponse)
	err := c.cc.Invoke(ctx, "/feast.core.CoreService/ArchiveProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, "/feast.core.CoreService/ListProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) ListIngestionJobs(ctx context.Context, in *ListIngestionJobsRequest, opts ...grpc.CallOption) (*ListIngestionJobsResponse, error) {
	out := new(ListIngestionJobsResponse)
	err := c.cc.Invoke(ctx, "/feast.core.CoreService/ListIngestionJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) RestartIngestionJob(ctx context.Context, in *RestartIngestionJobRequest, opts ...grpc.CallOption) (*RestartIngestionJobResponse, error) {
	out := new(RestartIngestionJobResponse)
	err := c.cc.Invoke(ctx, "/feast.core.CoreService/RestartIngestionJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) StopIngestionJob(ctx context.Context, in *StopIngestionJobRequest, opts ...grpc.CallOption) (*StopIngestionJobResponse, error) {
	out := new(StopIngestionJobResponse)
	err := c.cc.Invoke(ctx, "/feast.core.CoreService/StopIngestionJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreServiceServer is the server API for CoreService service.
type CoreServiceServer interface {
	// Retrieve version information about this Feast deployment
	GetFeastCoreVersion(context.Context, *GetFeastCoreVersionRequest) (*GetFeastCoreVersionResponse, error)
	// Returns a specific feature set
	GetFeatureSet(context.Context, *GetFeatureSetRequest) (*GetFeatureSetResponse, error)
	// Retrieve feature set details given a filter.
	//
	// Returns all feature sets matching that filter. If none are found,
	// an empty list will be returned.
	// If no filter is provided in the request, the response will contain all the feature
	// sets currently stored in the registry.
	ListFeatureSets(context.Context, *ListFeatureSetsRequest) (*ListFeatureSetsResponse, error)
	// Retrieve store details given a filter.
	//
	// Returns all stores matching that filter. If none are found, an empty list will be returned.
	// If no filter is provided in the request, the response will contain all the stores currently
	// stored in the registry.
	ListStores(context.Context, *ListStoresRequest) (*ListStoresResponse, error)
	// Create or update and existing feature set.
	//
	// This function is idempotent - it will not create a new feature set if schema does not change.
	// Schema changes will update the feature set if the changes are valid.
	// All changes except the following are valid:
	// - Changes to feature set id (name, project)
	// - Changes to entities
	// - Changes to feature type
	ApplyFeatureSet(context.Context, *ApplyFeatureSetRequest) (*ApplyFeatureSetResponse, error)
	// Updates core with the configuration of the store.
	//
	// If the changes are valid, core will return the given store configuration in response, and
	// start or update the necessary feature population jobs for the updated store.
	UpdateStore(context.Context, *UpdateStoreRequest) (*UpdateStoreResponse, error)
	// Creates a project. Projects serve as namespaces within which resources like features will be
	// created. Both feature set names as well as field names must be unique within a project. Project
	// names themselves must be globally unique.
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	// Archives a project. Archived projects will continue to exist and function, but won't be visible
	// through the Core API. Any existing ingestion or serving requests will continue to function,
	// but will result in warning messages being logged. It is not possible to unarchive a project
	// through the Core API
	ArchiveProject(context.Context, *ArchiveProjectRequest) (*ArchiveProjectResponse, error)
	// Lists all projects active projects.
	ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error)
	// List Ingestion Jobs given an optional filter.
	// Returns allow ingestions matching the given request filter.
	// Returns all ingestion jobs if no filter is provided.
	// Returns an empty list if no ingestion jobs match the filter.
	ListIngestionJobs(context.Context, *ListIngestionJobsRequest) (*ListIngestionJobsResponse, error)
	// Restart an Ingestion Job.  Restarts the ingestion job with the given job id.
	// NOTE: Data might be lost during the restart for some job runners.
	// Does not support stopping a job in a transitional (ie pending, suspending, aborting),
	// terminal state (ie suspended or aborted) or unknown status
	RestartIngestionJob(context.Context, *RestartIngestionJobRequest) (*RestartIngestionJobResponse, error)
	// Stop an Ingestion Job.  Stop (Aborts) the ingestion job with the given job id.
	// Does nothing if the target job if already in a terminal state (ie suspended or aborted).
	// Does not support stopping a job in a transitional (ie pending, suspending, aborting) or unknown status
	StopIngestionJob(context.Context, *StopIngestionJobRequest) (*StopIngestionJobResponse, error)
}

// UnimplementedCoreServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCoreServiceServer struct {
}

func (*UnimplementedCoreServiceServer) GetFeastCoreVersion(context.Context, *GetFeastCoreVersionRequest) (*GetFeastCoreVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeastCoreVersion not implemented")
}
func (*UnimplementedCoreServiceServer) GetFeatureSet(context.Context, *GetFeatureSetRequest) (*GetFeatureSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatureSet not implemented")
}
func (*UnimplementedCoreServiceServer) ListFeatureSets(context.Context, *ListFeatureSetsRequest) (*ListFeatureSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeatureSets not implemented")
}
func (*UnimplementedCoreServiceServer) ListStores(context.Context, *ListStoresRequest) (*ListStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStores not implemented")
}
func (*UnimplementedCoreServiceServer) ApplyFeatureSet(context.Context, *ApplyFeatureSetRequest) (*ApplyFeatureSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyFeatureSet not implemented")
}
func (*UnimplementedCoreServiceServer) UpdateStore(context.Context, *UpdateStoreRequest) (*UpdateStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStore not implemented")
}
func (*UnimplementedCoreServiceServer) CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (*UnimplementedCoreServiceServer) ArchiveProject(context.Context, *ArchiveProjectRequest) (*ArchiveProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveProject not implemented")
}
func (*UnimplementedCoreServiceServer) ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (*UnimplementedCoreServiceServer) ListIngestionJobs(context.Context, *ListIngestionJobsRequest) (*ListIngestionJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIngestionJobs not implemented")
}
func (*UnimplementedCoreServiceServer) RestartIngestionJob(context.Context, *RestartIngestionJobRequest) (*RestartIngestionJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartIngestionJob not implemented")
}
func (*UnimplementedCoreServiceServer) StopIngestionJob(context.Context, *StopIngestionJobRequest) (*StopIngestionJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopIngestionJob not implemented")
}

func RegisterCoreServiceServer(s *grpc.Server, srv CoreServiceServer) {
	s.RegisterService(&_CoreService_serviceDesc, srv)
}

func _CoreService_GetFeastCoreVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeastCoreVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetFeastCoreVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feast.core.CoreService/GetFeastCoreVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetFeastCoreVersion(ctx, req.(*GetFeastCoreVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetFeatureSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeatureSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetFeatureSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feast.core.CoreService/GetFeatureSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetFeatureSet(ctx, req.(*GetFeatureSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_ListFeatureSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeatureSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).ListFeatureSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feast.core.CoreService/ListFeatureSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).ListFeatureSets(ctx, req.(*ListFeatureSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_ListStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).ListStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feast.core.CoreService/ListStores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).ListStores(ctx, req.(*ListStoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_ApplyFeatureSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyFeatureSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).ApplyFeatureSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feast.core.CoreService/ApplyFeatureSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).ApplyFeatureSet(ctx, req.(*ApplyFeatureSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_UpdateStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).UpdateStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feast.core.CoreService/UpdateStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).UpdateStore(ctx, req.(*UpdateStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feast.core.CoreService/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_ArchiveProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).ArchiveProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feast.core.CoreService/ArchiveProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).ArchiveProject(ctx, req.(*ArchiveProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feast.core.CoreService/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).ListProjects(ctx, req.(*ListProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_ListIngestionJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIngestionJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).ListIngestionJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feast.core.CoreService/ListIngestionJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).ListIngestionJobs(ctx, req.(*ListIngestionJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_RestartIngestionJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartIngestionJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).RestartIngestionJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feast.core.CoreService/RestartIngestionJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).RestartIngestionJob(ctx, req.(*RestartIngestionJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_StopIngestionJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopIngestionJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).StopIngestionJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feast.core.CoreService/StopIngestionJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).StopIngestionJob(ctx, req.(*StopIngestionJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "feast.core.CoreService",
	HandlerType: (*CoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeastCoreVersion",
			Handler:    _CoreService_GetFeastCoreVersion_Handler,
		},
		{
			MethodName: "GetFeatureSet",
			Handler:    _CoreService_GetFeatureSet_Handler,
		},
		{
			MethodName: "ListFeatureSets",
			Handler:    _CoreService_ListFeatureSets_Handler,
		},
		{
			MethodName: "ListStores",
			Handler:    _CoreService_ListStores_Handler,
		},
		{
			MethodName: "ApplyFeatureSet",
			Handler:    _CoreService_ApplyFeatureSet_Handler,
		},
		{
			MethodName: "UpdateStore",
			Handler:    _CoreService_UpdateStore_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _CoreService_CreateProject_Handler,
		},
		{
			MethodName: "ArchiveProject",
			Handler:    _CoreService_ArchiveProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _CoreService_ListProjects_Handler,
		},
		{
			MethodName: "ListIngestionJobs",
			Handler:    _CoreService_ListIngestionJobs_Handler,
		},
		{
			MethodName: "RestartIngestionJob",
			Handler:    _CoreService_RestartIngestionJob_Handler,
		},
		{
			MethodName: "StopIngestionJob",
			Handler:    _CoreService_StopIngestionJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feast/core/CoreService.proto",
}
