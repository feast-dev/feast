//
// Copyright 2020 The Feast Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: feast/core/DataSource.proto

package core

import (
	types "github.com/feast-dev/feast/sdk/go/protos/feast/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type of Data Source.
type DataSource_SourceType int32

const (
	DataSource_INVALID        DataSource_SourceType = 0
	DataSource_BATCH_FILE     DataSource_SourceType = 1
	DataSource_BATCH_BIGQUERY DataSource_SourceType = 2
	DataSource_STREAM_KAFKA   DataSource_SourceType = 3
	DataSource_STREAM_KINESIS DataSource_SourceType = 4
	DataSource_BATCH_REDSHIFT DataSource_SourceType = 5
	DataSource_CUSTOM_SOURCE  DataSource_SourceType = 6
	DataSource_REQUEST_SOURCE DataSource_SourceType = 7
)

// Enum value maps for DataSource_SourceType.
var (
	DataSource_SourceType_name = map[int32]string{
		0: "INVALID",
		1: "BATCH_FILE",
		2: "BATCH_BIGQUERY",
		3: "STREAM_KAFKA",
		4: "STREAM_KINESIS",
		5: "BATCH_REDSHIFT",
		6: "CUSTOM_SOURCE",
		7: "REQUEST_SOURCE",
	}
	DataSource_SourceType_value = map[string]int32{
		"INVALID":        0,
		"BATCH_FILE":     1,
		"BATCH_BIGQUERY": 2,
		"STREAM_KAFKA":   3,
		"STREAM_KINESIS": 4,
		"BATCH_REDSHIFT": 5,
		"CUSTOM_SOURCE":  6,
		"REQUEST_SOURCE": 7,
	}
)

func (x DataSource_SourceType) Enum() *DataSource_SourceType {
	p := new(DataSource_SourceType)
	*p = x
	return p
}

func (x DataSource_SourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataSource_SourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_feast_core_DataSource_proto_enumTypes[0].Descriptor()
}

func (DataSource_SourceType) Type() protoreflect.EnumType {
	return &file_feast_core_DataSource_proto_enumTypes[0]
}

func (x DataSource_SourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataSource_SourceType.Descriptor instead.
func (DataSource_SourceType) EnumDescriptor() ([]byte, []int) {
	return file_feast_core_DataSource_proto_rawDescGZIP(), []int{0, 0}
}

// Defines a Data Source that can be used source Feature data
type DataSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type DataSource_SourceType `protobuf:"varint,1,opt,name=type,proto3,enum=feast.core.DataSource_SourceType" json:"type,omitempty"`
	// Defines mapping between fields in the sourced data
	// and fields in parent FeatureTable.
	FieldMapping map[string]string `protobuf:"bytes,2,rep,name=field_mapping,json=fieldMapping,proto3" json:"field_mapping,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Must specify event timestamp column name
	EventTimestampColumn string `protobuf:"bytes,3,opt,name=event_timestamp_column,json=eventTimestampColumn,proto3" json:"event_timestamp_column,omitempty"`
	// (Optional) Specify partition column
	// useful for file sources
	DatePartitionColumn string `protobuf:"bytes,4,opt,name=date_partition_column,json=datePartitionColumn,proto3" json:"date_partition_column,omitempty"`
	// Must specify creation timestamp column name
	CreatedTimestampColumn string `protobuf:"bytes,5,opt,name=created_timestamp_column,json=createdTimestampColumn,proto3" json:"created_timestamp_column,omitempty"`
	// This is an internal field that is represents the python class for the data source object a proto object represents.
	// This should be set by feast, and not by users.
	DataSourceClassType string `protobuf:"bytes,17,opt,name=data_source_class_type,json=dataSourceClassType,proto3" json:"data_source_class_type,omitempty"`
	// DataSource options.
	//
	// Types that are assignable to Options:
	//	*DataSource_FileOptions_
	//	*DataSource_BigqueryOptions
	//	*DataSource_KafkaOptions_
	//	*DataSource_KinesisOptions_
	//	*DataSource_RedshiftOptions_
	//	*DataSource_RequestDataOptions_
	//	*DataSource_CustomOptions
	Options isDataSource_Options `protobuf_oneof:"options"`
}

func (x *DataSource) Reset() {
	*x = DataSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_DataSource_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSource) ProtoMessage() {}

func (x *DataSource) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_DataSource_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSource.ProtoReflect.Descriptor instead.
func (*DataSource) Descriptor() ([]byte, []int) {
	return file_feast_core_DataSource_proto_rawDescGZIP(), []int{0}
}

func (x *DataSource) GetType() DataSource_SourceType {
	if x != nil {
		return x.Type
	}
	return DataSource_INVALID
}

func (x *DataSource) GetFieldMapping() map[string]string {
	if x != nil {
		return x.FieldMapping
	}
	return nil
}

func (x *DataSource) GetEventTimestampColumn() string {
	if x != nil {
		return x.EventTimestampColumn
	}
	return ""
}

func (x *DataSource) GetDatePartitionColumn() string {
	if x != nil {
		return x.DatePartitionColumn
	}
	return ""
}

func (x *DataSource) GetCreatedTimestampColumn() string {
	if x != nil {
		return x.CreatedTimestampColumn
	}
	return ""
}

func (x *DataSource) GetDataSourceClassType() string {
	if x != nil {
		return x.DataSourceClassType
	}
	return ""
}

func (m *DataSource) GetOptions() isDataSource_Options {
	if m != nil {
		return m.Options
	}
	return nil
}

func (x *DataSource) GetFileOptions() *DataSource_FileOptions {
	if x, ok := x.GetOptions().(*DataSource_FileOptions_); ok {
		return x.FileOptions
	}
	return nil
}

func (x *DataSource) GetBigqueryOptions() *DataSource_BigQueryOptions {
	if x, ok := x.GetOptions().(*DataSource_BigqueryOptions); ok {
		return x.BigqueryOptions
	}
	return nil
}

func (x *DataSource) GetKafkaOptions() *DataSource_KafkaOptions {
	if x, ok := x.GetOptions().(*DataSource_KafkaOptions_); ok {
		return x.KafkaOptions
	}
	return nil
}

func (x *DataSource) GetKinesisOptions() *DataSource_KinesisOptions {
	if x, ok := x.GetOptions().(*DataSource_KinesisOptions_); ok {
		return x.KinesisOptions
	}
	return nil
}

func (x *DataSource) GetRedshiftOptions() *DataSource_RedshiftOptions {
	if x, ok := x.GetOptions().(*DataSource_RedshiftOptions_); ok {
		return x.RedshiftOptions
	}
	return nil
}

func (x *DataSource) GetRequestDataOptions() *DataSource_RequestDataOptions {
	if x, ok := x.GetOptions().(*DataSource_RequestDataOptions_); ok {
		return x.RequestDataOptions
	}
	return nil
}

func (x *DataSource) GetCustomOptions() *DataSource_CustomSourceOptions {
	if x, ok := x.GetOptions().(*DataSource_CustomOptions); ok {
		return x.CustomOptions
	}
	return nil
}

type isDataSource_Options interface {
	isDataSource_Options()
}

type DataSource_FileOptions_ struct {
	FileOptions *DataSource_FileOptions `protobuf:"bytes,11,opt,name=file_options,json=fileOptions,proto3,oneof"`
}

type DataSource_BigqueryOptions struct {
	BigqueryOptions *DataSource_BigQueryOptions `protobuf:"bytes,12,opt,name=bigquery_options,json=bigqueryOptions,proto3,oneof"`
}

type DataSource_KafkaOptions_ struct {
	KafkaOptions *DataSource_KafkaOptions `protobuf:"bytes,13,opt,name=kafka_options,json=kafkaOptions,proto3,oneof"`
}

type DataSource_KinesisOptions_ struct {
	KinesisOptions *DataSource_KinesisOptions `protobuf:"bytes,14,opt,name=kinesis_options,json=kinesisOptions,proto3,oneof"`
}

type DataSource_RedshiftOptions_ struct {
	RedshiftOptions *DataSource_RedshiftOptions `protobuf:"bytes,15,opt,name=redshift_options,json=redshiftOptions,proto3,oneof"`
}

type DataSource_RequestDataOptions_ struct {
	RequestDataOptions *DataSource_RequestDataOptions `protobuf:"bytes,18,opt,name=request_data_options,json=requestDataOptions,proto3,oneof"`
}

type DataSource_CustomOptions struct {
	CustomOptions *DataSource_CustomSourceOptions `protobuf:"bytes,16,opt,name=custom_options,json=customOptions,proto3,oneof"`
}

func (*DataSource_FileOptions_) isDataSource_Options() {}

func (*DataSource_BigqueryOptions) isDataSource_Options() {}

func (*DataSource_KafkaOptions_) isDataSource_Options() {}

func (*DataSource_KinesisOptions_) isDataSource_Options() {}

func (*DataSource_RedshiftOptions_) isDataSource_Options() {}

func (*DataSource_RequestDataOptions_) isDataSource_Options() {}

func (*DataSource_CustomOptions) isDataSource_Options() {}

// Defines options for DataSource that sources features from a file
type DataSource_FileOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileFormat *FileFormat `protobuf:"bytes,1,opt,name=file_format,json=fileFormat,proto3" json:"file_format,omitempty"`
	// Target URL of file to retrieve and source features from.
	// s3://path/to/file for AWS S3 storage
	// gs://path/to/file for GCP GCS storage
	// file:///path/to/file for local storage
	FileUrl string `protobuf:"bytes,2,opt,name=file_url,json=fileUrl,proto3" json:"file_url,omitempty"`
	// override AWS S3 storage endpoint with custom S3 endpoint
	S3EndpointOverride string `protobuf:"bytes,3,opt,name=s3_endpoint_override,json=s3EndpointOverride,proto3" json:"s3_endpoint_override,omitempty"`
}

func (x *DataSource_FileOptions) Reset() {
	*x = DataSource_FileOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_DataSource_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSource_FileOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSource_FileOptions) ProtoMessage() {}

func (x *DataSource_FileOptions) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_DataSource_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSource_FileOptions.ProtoReflect.Descriptor instead.
func (*DataSource_FileOptions) Descriptor() ([]byte, []int) {
	return file_feast_core_DataSource_proto_rawDescGZIP(), []int{0, 1}
}

func (x *DataSource_FileOptions) GetFileFormat() *FileFormat {
	if x != nil {
		return x.FileFormat
	}
	return nil
}

func (x *DataSource_FileOptions) GetFileUrl() string {
	if x != nil {
		return x.FileUrl
	}
	return ""
}

func (x *DataSource_FileOptions) GetS3EndpointOverride() string {
	if x != nil {
		return x.S3EndpointOverride
	}
	return ""
}

// Defines options for DataSource that sources features from a BigQuery Query
type DataSource_BigQueryOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Full table reference in the form of [project:dataset.table]
	TableRef string `protobuf:"bytes,1,opt,name=table_ref,json=tableRef,proto3" json:"table_ref,omitempty"`
	// SQL query that returns a table containing feature data. Must contain an event_timestamp column, and respective
	// entity columns
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *DataSource_BigQueryOptions) Reset() {
	*x = DataSource_BigQueryOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_DataSource_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSource_BigQueryOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSource_BigQueryOptions) ProtoMessage() {}

func (x *DataSource_BigQueryOptions) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_DataSource_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSource_BigQueryOptions.ProtoReflect.Descriptor instead.
func (*DataSource_BigQueryOptions) Descriptor() ([]byte, []int) {
	return file_feast_core_DataSource_proto_rawDescGZIP(), []int{0, 2}
}

func (x *DataSource_BigQueryOptions) GetTableRef() string {
	if x != nil {
		return x.TableRef
	}
	return ""
}

func (x *DataSource_BigQueryOptions) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

// Defines options for DataSource that sources features from Kafka messages.
// Each message should be a Protobuf that can be decoded with the generated
// Java Protobuf class at the given class path
type DataSource_KafkaOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Comma separated list of Kafka bootstrap servers. Used for feature tables without a defined source host[:port]]
	BootstrapServers string `protobuf:"bytes,1,opt,name=bootstrap_servers,json=bootstrapServers,proto3" json:"bootstrap_servers,omitempty"`
	// Kafka topic to collect feature data from.
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// Defines the stream data format encoding feature/entity data in Kafka messages.
	MessageFormat *StreamFormat `protobuf:"bytes,3,opt,name=message_format,json=messageFormat,proto3" json:"message_format,omitempty"`
}

func (x *DataSource_KafkaOptions) Reset() {
	*x = DataSource_KafkaOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_DataSource_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSource_KafkaOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSource_KafkaOptions) ProtoMessage() {}

func (x *DataSource_KafkaOptions) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_DataSource_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSource_KafkaOptions.ProtoReflect.Descriptor instead.
func (*DataSource_KafkaOptions) Descriptor() ([]byte, []int) {
	return file_feast_core_DataSource_proto_rawDescGZIP(), []int{0, 3}
}

func (x *DataSource_KafkaOptions) GetBootstrapServers() string {
	if x != nil {
		return x.BootstrapServers
	}
	return ""
}

func (x *DataSource_KafkaOptions) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *DataSource_KafkaOptions) GetMessageFormat() *StreamFormat {
	if x != nil {
		return x.MessageFormat
	}
	return nil
}

// Defines options for DataSource that sources features from Kinesis records.
// Each record should be a Protobuf that can be decoded with the generated
// Java Protobuf class at the given class path
type DataSource_KinesisOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AWS region of the Kinesis stream
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// Name of the Kinesis stream to obtain feature data from.
	StreamName string `protobuf:"bytes,2,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	// Defines the data format encoding the feature/entity data in Kinesis records.
	// Kinesis Data Sources support Avro and Proto as data formats.
	RecordFormat *StreamFormat `protobuf:"bytes,3,opt,name=record_format,json=recordFormat,proto3" json:"record_format,omitempty"`
}

func (x *DataSource_KinesisOptions) Reset() {
	*x = DataSource_KinesisOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_DataSource_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSource_KinesisOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSource_KinesisOptions) ProtoMessage() {}

func (x *DataSource_KinesisOptions) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_DataSource_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSource_KinesisOptions.ProtoReflect.Descriptor instead.
func (*DataSource_KinesisOptions) Descriptor() ([]byte, []int) {
	return file_feast_core_DataSource_proto_rawDescGZIP(), []int{0, 4}
}

func (x *DataSource_KinesisOptions) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *DataSource_KinesisOptions) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *DataSource_KinesisOptions) GetRecordFormat() *StreamFormat {
	if x != nil {
		return x.RecordFormat
	}
	return nil
}

// Defines options for DataSource that sources features from a Redshift Query
type DataSource_RedshiftOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Redshift table name
	Table string `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	// SQL query that returns a table containing feature data. Must contain an event_timestamp column, and respective
	// entity columns
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// Redshift schema name
	Schema string `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *DataSource_RedshiftOptions) Reset() {
	*x = DataSource_RedshiftOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_DataSource_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSource_RedshiftOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSource_RedshiftOptions) ProtoMessage() {}

func (x *DataSource_RedshiftOptions) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_DataSource_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSource_RedshiftOptions.ProtoReflect.Descriptor instead.
func (*DataSource_RedshiftOptions) Descriptor() ([]byte, []int) {
	return file_feast_core_DataSource_proto_rawDescGZIP(), []int{0, 5}
}

func (x *DataSource_RedshiftOptions) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *DataSource_RedshiftOptions) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *DataSource_RedshiftOptions) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

// Defines configuration for custom third-party data sources.
type DataSource_CustomSourceOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Serialized configuration information for the data source. The implementer of the custom data source is
	// responsible for serializing and deserializing data from bytes
	Configuration []byte `protobuf:"bytes,1,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (x *DataSource_CustomSourceOptions) Reset() {
	*x = DataSource_CustomSourceOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_DataSource_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSource_CustomSourceOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSource_CustomSourceOptions) ProtoMessage() {}

func (x *DataSource_CustomSourceOptions) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_DataSource_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSource_CustomSourceOptions.ProtoReflect.Descriptor instead.
func (*DataSource_CustomSourceOptions) Descriptor() ([]byte, []int) {
	return file_feast_core_DataSource_proto_rawDescGZIP(), []int{0, 6}
}

func (x *DataSource_CustomSourceOptions) GetConfiguration() []byte {
	if x != nil {
		return x.Configuration
	}
	return nil
}

// Defines options for DataSource that sources features from request data
type DataSource_RequestDataOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the request data source
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Mapping of feature name to type
	Schema map[string]types.ValueType_Enum `protobuf:"bytes,2,rep,name=schema,proto3" json:"schema,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=feast.types.ValueType_Enum"`
}

func (x *DataSource_RequestDataOptions) Reset() {
	*x = DataSource_RequestDataOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_DataSource_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSource_RequestDataOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSource_RequestDataOptions) ProtoMessage() {}

func (x *DataSource_RequestDataOptions) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_DataSource_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSource_RequestDataOptions.ProtoReflect.Descriptor instead.
func (*DataSource_RequestDataOptions) Descriptor() ([]byte, []int) {
	return file_feast_core_DataSource_proto_rawDescGZIP(), []int{0, 7}
}

func (x *DataSource_RequestDataOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataSource_RequestDataOptions) GetSchema() map[string]types.ValueType_Enum {
	if x != nil {
		return x.Schema
	}
	return nil
}

var File_feast_core_DataSource_proto protoreflect.FileDescriptor

var file_feast_core_DataSource_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x66,
	0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x1b, 0x66, 0x65, 0x61, 0x73, 0x74,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x85, 0x10, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x35,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x66,
	0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66,
	0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x38,
	0x0a, 0x18, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a,
	0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x53, 0x0a, 0x10, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x6b,
	0x61, 0x66, 0x6b, 0x61, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x50, 0x0a, 0x0f, 0x6b, 0x69, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x6b, 0x69, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x53, 0x0a, 0x10, 0x72, 0x65, 0x64,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x64, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x72,
	0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5d,
	0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x66,
	0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x53, 0x0a,
	0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x93, 0x01, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x33, 0x5f, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x33, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x1a, 0x44, 0x0a, 0x0f, 0x42, 0x69, 0x67,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x1a,
	0x92, 0x01, 0x0a, 0x0c, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x6f, 0x6f,
	0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x12, 0x3f, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x65,
	0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x1a, 0x88, 0x01, 0x0a, 0x0e, 0x4b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x3d, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x1a,
	0x55, 0x0a, 0x0f, 0x52, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x3b, 0x0a, 0x13, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0xcf, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4d,
	0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x56, 0x0a,
	0x0b, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9e, 0x01, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x42, 0x49, 0x47, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f,
	0x4b, 0x41, 0x46, 0x4b, 0x41, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x52, 0x45, 0x41,
	0x4d, 0x5f, 0x4b, 0x49, 0x4e, 0x45, 0x53, 0x49, 0x53, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x42,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x44, 0x53, 0x48, 0x49, 0x46, 0x54, 0x10, 0x05, 0x12,
	0x11, 0x0a, 0x0d, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x10, 0x07, 0x42, 0x09, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x0b, 0x42, 0x58, 0x0a, 0x10, 0x66, 0x65, 0x61, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x0f, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x33, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2d, 0x64,
	0x65, 0x76, 0x2f, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_feast_core_DataSource_proto_rawDescOnce sync.Once
	file_feast_core_DataSource_proto_rawDescData = file_feast_core_DataSource_proto_rawDesc
)

func file_feast_core_DataSource_proto_rawDescGZIP() []byte {
	file_feast_core_DataSource_proto_rawDescOnce.Do(func() {
		file_feast_core_DataSource_proto_rawDescData = protoimpl.X.CompressGZIP(file_feast_core_DataSource_proto_rawDescData)
	})
	return file_feast_core_DataSource_proto_rawDescData
}

var file_feast_core_DataSource_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_feast_core_DataSource_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_feast_core_DataSource_proto_goTypes = []interface{}{
	(DataSource_SourceType)(0),             // 0: feast.core.DataSource.SourceType
	(*DataSource)(nil),                     // 1: feast.core.DataSource
	nil,                                    // 2: feast.core.DataSource.FieldMappingEntry
	(*DataSource_FileOptions)(nil),         // 3: feast.core.DataSource.FileOptions
	(*DataSource_BigQueryOptions)(nil),     // 4: feast.core.DataSource.BigQueryOptions
	(*DataSource_KafkaOptions)(nil),        // 5: feast.core.DataSource.KafkaOptions
	(*DataSource_KinesisOptions)(nil),      // 6: feast.core.DataSource.KinesisOptions
	(*DataSource_RedshiftOptions)(nil),     // 7: feast.core.DataSource.RedshiftOptions
	(*DataSource_CustomSourceOptions)(nil), // 8: feast.core.DataSource.CustomSourceOptions
	(*DataSource_RequestDataOptions)(nil),  // 9: feast.core.DataSource.RequestDataOptions
	nil,                                    // 10: feast.core.DataSource.RequestDataOptions.SchemaEntry
	(*FileFormat)(nil),                     // 11: feast.core.FileFormat
	(*StreamFormat)(nil),                   // 12: feast.core.StreamFormat
	(types.ValueType_Enum)(0),              // 13: feast.types.ValueType.Enum
}
var file_feast_core_DataSource_proto_depIdxs = []int32{
	0,  // 0: feast.core.DataSource.type:type_name -> feast.core.DataSource.SourceType
	2,  // 1: feast.core.DataSource.field_mapping:type_name -> feast.core.DataSource.FieldMappingEntry
	3,  // 2: feast.core.DataSource.file_options:type_name -> feast.core.DataSource.FileOptions
	4,  // 3: feast.core.DataSource.bigquery_options:type_name -> feast.core.DataSource.BigQueryOptions
	5,  // 4: feast.core.DataSource.kafka_options:type_name -> feast.core.DataSource.KafkaOptions
	6,  // 5: feast.core.DataSource.kinesis_options:type_name -> feast.core.DataSource.KinesisOptions
	7,  // 6: feast.core.DataSource.redshift_options:type_name -> feast.core.DataSource.RedshiftOptions
	9,  // 7: feast.core.DataSource.request_data_options:type_name -> feast.core.DataSource.RequestDataOptions
	8,  // 8: feast.core.DataSource.custom_options:type_name -> feast.core.DataSource.CustomSourceOptions
	11, // 9: feast.core.DataSource.FileOptions.file_format:type_name -> feast.core.FileFormat
	12, // 10: feast.core.DataSource.KafkaOptions.message_format:type_name -> feast.core.StreamFormat
	12, // 11: feast.core.DataSource.KinesisOptions.record_format:type_name -> feast.core.StreamFormat
	10, // 12: feast.core.DataSource.RequestDataOptions.schema:type_name -> feast.core.DataSource.RequestDataOptions.SchemaEntry
	13, // 13: feast.core.DataSource.RequestDataOptions.SchemaEntry.value:type_name -> feast.types.ValueType.Enum
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_feast_core_DataSource_proto_init() }
func file_feast_core_DataSource_proto_init() {
	if File_feast_core_DataSource_proto != nil {
		return
	}
	file_feast_core_DataFormat_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_feast_core_DataSource_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_DataSource_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSource_FileOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_DataSource_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSource_BigQueryOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_DataSource_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSource_KafkaOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_DataSource_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSource_KinesisOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_DataSource_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSource_RedshiftOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_DataSource_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSource_CustomSourceOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_DataSource_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSource_RequestDataOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_feast_core_DataSource_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*DataSource_FileOptions_)(nil),
		(*DataSource_BigqueryOptions)(nil),
		(*DataSource_KafkaOptions_)(nil),
		(*DataSource_KinesisOptions_)(nil),
		(*DataSource_RedshiftOptions_)(nil),
		(*DataSource_RequestDataOptions_)(nil),
		(*DataSource_CustomOptions)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_feast_core_DataSource_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_feast_core_DataSource_proto_goTypes,
		DependencyIndexes: file_feast_core_DataSource_proto_depIdxs,
		EnumInfos:         file_feast_core_DataSource_proto_enumTypes,
		MessageInfos:      file_feast_core_DataSource_proto_msgTypes,
	}.Build()
	File_feast_core_DataSource_proto = out.File
	file_feast_core_DataSource_proto_rawDesc = nil
	file_feast_core_DataSource_proto_goTypes = nil
	file_feast_core_DataSource_proto_depIdxs = nil
}
