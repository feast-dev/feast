// Code generated by protoc-gen-go. DO NOT EDIT.
// source: feast/core/Store.proto

package core

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Store_StoreType int32

const (
	Store_INVALID Store_StoreType = 0
	// Redis stores a FeatureRow element as a key, value pair.
	//
	// The Redis data types used (https://redis.io/topics/data-types):
	// - key: STRING
	// - value: STRING
	//
	// Encodings:
	// - key: byte array of RedisKey (refer to feast.storage.RedisKey)
	// - value: byte array of FeatureRow (refer to feast.types.FeatureRow)
	//
	Store_REDIS Store_StoreType = 1
	// BigQuery stores a FeatureRow element as a row in a BigQuery table.
	//
	// Table name is derived from the feature set name and version as:
	// [feature_set_name]_v[feature_set_version]
	//
	// For example:
	// A feature row for feature set "driver" and version "1" will be written
	// to table "driver_v1".
	//
	// The entities and features in a FeatureSetSpec corresponds to the
	// fields in the BigQuery table (these make up the BigQuery schema).
	// The name of the entity spec and feature spec corresponds to the column
	// names, and the value_type of entity spec and feature spec corresponds
	// to BigQuery standard SQL data type of the column.
	//
	// The following BigQuery fields are reserved for Feast internal use.
	// Ingestion of entity or feature spec with names identical
	// to the following field names will raise an exception during ingestion.
	//
	//   column_name       | column_data_type | description
	// ====================|==================|================================
	// - event_timestamp   | TIMESTAMP        | event time of the FeatureRow
	// - created_timestamp | TIMESTAMP        | processing time of the ingestion of the FeatureRow
	// - job_id            | STRING           | identifier for the job that writes the FeatureRow to the corresponding BigQuery table
	//
	// BigQuery table created will be partitioned by the field "event_timestamp"
	// of the FeatureRow (https://cloud.google.com/bigquery/docs/partitioned-tables).
	//
	// Since newer version of feature set can introduce breaking, non backward-
	// compatible BigQuery schema updates, incrementing the version of a
	// feature set will result in the creation of a new empty BigQuery table
	// with the new schema.
	//
	// The following table shows how ValueType in Feast is mapped to
	// BigQuery Standard SQL data types
	// (https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types):
	//
	// BYTES       : BYTES
	// STRING      : STRING
	// INT32       : INT64
	// INT64       : IN64
	// DOUBLE      : FLOAT64
	// FLOAT       : FLOAT64
	// BOOL        : BOOL
	// BYTES_LIST  : ARRAY
	// STRING_LIST : ARRAY
	// INT32_LIST  : ARRAY
	// INT64_LIST  : ARRAY
	// DOUBLE_LIST : ARRAY
	// FLOAT_LIST  : ARRAY
	// BOOL_LIST   : ARRAY
	//
	// The column mode in BigQuery is set to "Nullable" such that unset Value
	// in a FeatureRow corresponds to NULL value in BigQuery.
	//
	Store_BIGQUERY Store_StoreType = 2
	// Unsupported in Feast 0.3
	Store_CASSANDRA Store_StoreType = 3
)

var Store_StoreType_name = map[int32]string{
	0: "INVALID",
	1: "REDIS",
	2: "BIGQUERY",
	3: "CASSANDRA",
}

var Store_StoreType_value = map[string]int32{
	"INVALID":   0,
	"REDIS":     1,
	"BIGQUERY":  2,
	"CASSANDRA": 3,
}

func (x Store_StoreType) String() string {
	return proto.EnumName(Store_StoreType_name, int32(x))
}

func (Store_StoreType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4b177bc9ccf64875, []int{0, 0}
}

// Store provides a location where Feast reads and writes feature values.
// Feature values will be written to the Store in the form of FeatureRow elements.
// The way FeatureRow is encoded and decoded when it is written to and read from
// the Store depends on the type of the Store.
//
// For example, a FeatureRow will materialize as a row in a table in
// BigQuery but it will materialize as a key, value pair element in Redis.
//
type Store struct {
	// Name of the store.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type of store.
	Type Store_StoreType `protobuf:"varint,2,opt,name=type,proto3,enum=feast.core.Store_StoreType" json:"type,omitempty"`
	// Feature sets to subscribe to.
	Subscriptions []*Store_Subscription `protobuf:"bytes,4,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	// Configuration to connect to the store. Required.
	//
	// Types that are valid to be assigned to Config:
	//	*Store_RedisConfig_
	//	*Store_BigqueryConfig
	//	*Store_CassandraConfig_
	Config               isStore_Config `protobuf_oneof:"config"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Store) Reset()         { *m = Store{} }
func (m *Store) String() string { return proto.CompactTextString(m) }
func (*Store) ProtoMessage()    {}
func (*Store) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b177bc9ccf64875, []int{0}
}

func (m *Store) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Store.Unmarshal(m, b)
}
func (m *Store) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Store.Marshal(b, m, deterministic)
}
func (m *Store) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Store.Merge(m, src)
}
func (m *Store) XXX_Size() int {
	return xxx_messageInfo_Store.Size(m)
}
func (m *Store) XXX_DiscardUnknown() {
	xxx_messageInfo_Store.DiscardUnknown(m)
}

var xxx_messageInfo_Store proto.InternalMessageInfo

func (m *Store) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Store) GetType() Store_StoreType {
	if m != nil {
		return m.Type
	}
	return Store_INVALID
}

func (m *Store) GetSubscriptions() []*Store_Subscription {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

type isStore_Config interface {
	isStore_Config()
}

type Store_RedisConfig_ struct {
	RedisConfig *Store_RedisConfig `protobuf:"bytes,11,opt,name=redis_config,json=redisConfig,proto3,oneof"`
}

type Store_BigqueryConfig struct {
	BigqueryConfig *Store_BigQueryConfig `protobuf:"bytes,12,opt,name=bigquery_config,json=bigqueryConfig,proto3,oneof"`
}

type Store_CassandraConfig_ struct {
	CassandraConfig *Store_CassandraConfig `protobuf:"bytes,13,opt,name=cassandra_config,json=cassandraConfig,proto3,oneof"`
}

func (*Store_RedisConfig_) isStore_Config() {}

func (*Store_BigqueryConfig) isStore_Config() {}

func (*Store_CassandraConfig_) isStore_Config() {}

func (m *Store) GetConfig() isStore_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *Store) GetRedisConfig() *Store_RedisConfig {
	if x, ok := m.GetConfig().(*Store_RedisConfig_); ok {
		return x.RedisConfig
	}
	return nil
}

func (m *Store) GetBigqueryConfig() *Store_BigQueryConfig {
	if x, ok := m.GetConfig().(*Store_BigqueryConfig); ok {
		return x.BigqueryConfig
	}
	return nil
}

func (m *Store) GetCassandraConfig() *Store_CassandraConfig {
	if x, ok := m.GetConfig().(*Store_CassandraConfig_); ok {
		return x.CassandraConfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Store) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Store_RedisConfig_)(nil),
		(*Store_BigqueryConfig)(nil),
		(*Store_CassandraConfig_)(nil),
	}
}

type Store_RedisConfig struct {
	Host                 string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port                 int32    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Store_RedisConfig) Reset()         { *m = Store_RedisConfig{} }
func (m *Store_RedisConfig) String() string { return proto.CompactTextString(m) }
func (*Store_RedisConfig) ProtoMessage()    {}
func (*Store_RedisConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b177bc9ccf64875, []int{0, 0}
}

func (m *Store_RedisConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Store_RedisConfig.Unmarshal(m, b)
}
func (m *Store_RedisConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Store_RedisConfig.Marshal(b, m, deterministic)
}
func (m *Store_RedisConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Store_RedisConfig.Merge(m, src)
}
func (m *Store_RedisConfig) XXX_Size() int {
	return xxx_messageInfo_Store_RedisConfig.Size(m)
}
func (m *Store_RedisConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_Store_RedisConfig.DiscardUnknown(m)
}

var xxx_messageInfo_Store_RedisConfig proto.InternalMessageInfo

func (m *Store_RedisConfig) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Store_RedisConfig) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type Store_BigQueryConfig struct {
	ProjectId            string   `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	DatasetId            string   `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Store_BigQueryConfig) Reset()         { *m = Store_BigQueryConfig{} }
func (m *Store_BigQueryConfig) String() string { return proto.CompactTextString(m) }
func (*Store_BigQueryConfig) ProtoMessage()    {}
func (*Store_BigQueryConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b177bc9ccf64875, []int{0, 1}
}

func (m *Store_BigQueryConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Store_BigQueryConfig.Unmarshal(m, b)
}
func (m *Store_BigQueryConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Store_BigQueryConfig.Marshal(b, m, deterministic)
}
func (m *Store_BigQueryConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Store_BigQueryConfig.Merge(m, src)
}
func (m *Store_BigQueryConfig) XXX_Size() int {
	return xxx_messageInfo_Store_BigQueryConfig.Size(m)
}
func (m *Store_BigQueryConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_Store_BigQueryConfig.DiscardUnknown(m)
}

var xxx_messageInfo_Store_BigQueryConfig proto.InternalMessageInfo

func (m *Store_BigQueryConfig) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *Store_BigQueryConfig) GetDatasetId() string {
	if m != nil {
		return m.DatasetId
	}
	return ""
}

type Store_CassandraConfig struct {
	Host                 string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port                 int32    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Store_CassandraConfig) Reset()         { *m = Store_CassandraConfig{} }
func (m *Store_CassandraConfig) String() string { return proto.CompactTextString(m) }
func (*Store_CassandraConfig) ProtoMessage()    {}
func (*Store_CassandraConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b177bc9ccf64875, []int{0, 2}
}

func (m *Store_CassandraConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Store_CassandraConfig.Unmarshal(m, b)
}
func (m *Store_CassandraConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Store_CassandraConfig.Marshal(b, m, deterministic)
}
func (m *Store_CassandraConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Store_CassandraConfig.Merge(m, src)
}
func (m *Store_CassandraConfig) XXX_Size() int {
	return xxx_messageInfo_Store_CassandraConfig.Size(m)
}
func (m *Store_CassandraConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_Store_CassandraConfig.DiscardUnknown(m)
}

var xxx_messageInfo_Store_CassandraConfig proto.InternalMessageInfo

func (m *Store_CassandraConfig) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Store_CassandraConfig) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type Store_Subscription struct {
	// Name of featureSet to subscribe to.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Versions of the given featureSet that will be ingested into this store.
	// Valid options for version:
	//     latest: only subscribe to latest version of feature set
	//     [version number]: pin to a specific version
	//     >[version number]: subscribe to all versions larger than or equal to [version number]
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Store_Subscription) Reset()         { *m = Store_Subscription{} }
func (m *Store_Subscription) String() string { return proto.CompactTextString(m) }
func (*Store_Subscription) ProtoMessage()    {}
func (*Store_Subscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b177bc9ccf64875, []int{0, 3}
}

func (m *Store_Subscription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Store_Subscription.Unmarshal(m, b)
}
func (m *Store_Subscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Store_Subscription.Marshal(b, m, deterministic)
}
func (m *Store_Subscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Store_Subscription.Merge(m, src)
}
func (m *Store_Subscription) XXX_Size() int {
	return xxx_messageInfo_Store_Subscription.Size(m)
}
func (m *Store_Subscription) XXX_DiscardUnknown() {
	xxx_messageInfo_Store_Subscription.DiscardUnknown(m)
}

var xxx_messageInfo_Store_Subscription proto.InternalMessageInfo

func (m *Store_Subscription) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Store_Subscription) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func init() {
	proto.RegisterEnum("feast.core.Store_StoreType", Store_StoreType_name, Store_StoreType_value)
	proto.RegisterType((*Store)(nil), "feast.core.Store")
	proto.RegisterType((*Store_RedisConfig)(nil), "feast.core.Store.RedisConfig")
	proto.RegisterType((*Store_BigQueryConfig)(nil), "feast.core.Store.BigQueryConfig")
	proto.RegisterType((*Store_CassandraConfig)(nil), "feast.core.Store.CassandraConfig")
	proto.RegisterType((*Store_Subscription)(nil), "feast.core.Store.Subscription")
}

func init() { proto.RegisterFile("feast/core/Store.proto", fileDescriptor_4b177bc9ccf64875) }

var fileDescriptor_4b177bc9ccf64875 = []byte{
	// 442 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcf, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x97, 0xae, 0xdd, 0x96, 0x97, 0xfe, 0x88, 0x7c, 0x40, 0x51, 0xd1, 0x50, 0xd8, 0xa9,
	0xa7, 0x58, 0x2a, 0xe2, 0x80, 0xc4, 0x81, 0xa6, 0x9d, 0x20, 0x02, 0x55, 0xcc, 0x05, 0x24, 0xb8,
	0x4c, 0xf9, 0xe1, 0x65, 0xde, 0xb4, 0x38, 0xd8, 0x2e, 0x52, 0xff, 0x3a, 0xfe, 0x35, 0x64, 0x27,
	0x69, 0x53, 0xda, 0xc3, 0x2e, 0x91, 0xfd, 0x7d, 0xdf, 0xf7, 0xc9, 0xd3, 0xf3, 0x7b, 0xf0, 0xe2,
	0x8e, 0xc6, 0x52, 0xe1, 0x94, 0x0b, 0x8a, 0x57, 0x8a, 0x0b, 0x1a, 0x94, 0x82, 0x2b, 0x8e, 0xc0,
	0xe8, 0x81, 0xd6, 0xaf, 0xfe, 0xf6, 0xa0, 0x67, 0x62, 0x08, 0x41, 0xb7, 0x88, 0x9f, 0xa8, 0x67,
	0xf9, 0xd6, 0xc4, 0x26, 0xe6, 0x8c, 0x30, 0x74, 0xd5, 0xa6, 0xa4, 0x5e, 0xc7, 0xb7, 0x26, 0xc3,
	0xe9, 0xcb, 0x60, 0x97, 0x18, 0x54, 0x40, 0xf3, 0xfd, 0xb6, 0x29, 0x29, 0x31, 0x46, 0xb4, 0x80,
	0x81, 0x5c, 0x27, 0x32, 0x15, 0xac, 0x54, 0x8c, 0x17, 0xd2, 0xeb, 0xfa, 0xa7, 0x13, 0x67, 0xfa,
	0xea, 0x48, 0x66, 0xcb, 0x46, 0xf6, 0x93, 0x50, 0x08, 0x7d, 0x41, 0x33, 0x26, 0x6f, 0x53, 0x5e,
	0xdc, 0xb1, 0xdc, 0x73, 0x7c, 0x6b, 0xe2, 0x4c, 0x2f, 0x0f, 0x21, 0x44, 0xbb, 0xe6, 0xc6, 0xf4,
	0xe9, 0x84, 0x38, 0x62, 0x77, 0x45, 0x9f, 0x61, 0x94, 0xb0, 0xfc, 0xf7, 0x9a, 0x8a, 0x4d, 0x83,
	0xe9, 0x1b, 0x8c, 0x7f, 0x88, 0x09, 0x59, 0x7e, 0xa3, 0x8d, 0x5b, 0xd2, 0xb0, 0x49, 0xad, 0x61,
	0x4b, 0x70, 0xd3, 0x58, 0xca, 0xb8, 0xc8, 0x44, 0xdc, 0xd0, 0x06, 0x86, 0xf6, 0xfa, 0x90, 0x36,
	0x6f, 0x9c, 0x5b, 0xdc, 0x28, 0xdd, 0x97, 0xc6, 0x6f, 0xc1, 0x69, 0x95, 0xae, 0x5b, 0x7f, 0xcf,
	0xa5, 0x6a, 0x5a, 0xaf, 0xcf, 0x5a, 0x2b, 0xb9, 0x50, 0xa6, 0xf5, 0x3d, 0x62, 0xce, 0xe3, 0x25,
	0x0c, 0xf7, 0x4b, 0x45, 0x97, 0x00, 0xa5, 0xe0, 0x0f, 0x34, 0x55, 0xb7, 0x2c, 0xab, 0xf3, 0xed,
	0x5a, 0x89, 0x32, 0x1d, 0xce, 0x62, 0x15, 0x4b, 0x6a, 0xc2, 0x9d, 0x2a, 0x5c, 0x2b, 0x51, 0x36,
	0x7e, 0x07, 0xa3, 0xff, 0x8a, 0x7d, 0x76, 0x29, 0xef, 0xa1, 0xdf, 0x7e, 0xc1, 0xa3, 0xd3, 0xe3,
	0xc1, 0xf9, 0x1f, 0x2a, 0x24, 0xe3, 0x45, 0xfd, 0xeb, 0xe6, 0x7a, 0xf5, 0x01, 0xec, 0xed, 0xe4,
	0x20, 0x07, 0xce, 0xa3, 0xe5, 0x8f, 0xd9, 0x97, 0x68, 0xe1, 0x9e, 0x20, 0x1b, 0x7a, 0xe4, 0x7a,
	0x11, 0xad, 0x5c, 0x0b, 0xf5, 0xe1, 0x22, 0x8c, 0x3e, 0xde, 0x7c, 0xbf, 0x26, 0x3f, 0xdd, 0x0e,
	0x1a, 0x80, 0x3d, 0x9f, 0xad, 0x56, 0xb3, 0xe5, 0x82, 0xcc, 0xdc, 0xd3, 0xf0, 0x02, 0xce, 0xaa,
	0x77, 0x08, 0x23, 0x68, 0xcd, 0x73, 0x08, 0x86, 0xfb, 0x55, 0xcf, 0xf9, 0x2f, 0x9c, 0x33, 0x75,
	0xbf, 0x4e, 0x82, 0x94, 0x3f, 0xe1, 0x9c, 0x3f, 0xd0, 0x47, 0x5c, 0x2d, 0x84, 0xcc, 0x1e, 0x71,
	0xce, 0xb1, 0x59, 0x06, 0x89, 0x77, 0x4b, 0x92, 0x9c, 0x19, 0xe9, 0xcd, 0xbf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xdc, 0xaf, 0xad, 0x8c, 0x39, 0x03, 0x00, 0x00,
}
