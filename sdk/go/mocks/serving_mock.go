// Code generated by MockGen. DO NOT EDIT.
// Source: ./ServingService_grpc.pb.go

// Package mock_serving is a generated GoMock package.
package mock_serving

import (
	context "context"
	reflect "reflect"

	serving "github.com/feast-dev/feast/sdk/go/protos/feast/serving"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockServingServiceClient is a mock of ServingServiceClient interface.
type MockServingServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockServingServiceClientMockRecorder
}

// MockServingServiceClientMockRecorder is the mock recorder for MockServingServiceClient.
type MockServingServiceClientMockRecorder struct {
	mock *MockServingServiceClient
}

// NewMockServingServiceClient creates a new mock instance.
func NewMockServingServiceClient(ctrl *gomock.Controller) *MockServingServiceClient {
	mock := &MockServingServiceClient{ctrl: ctrl}
	mock.recorder = &MockServingServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServingServiceClient) EXPECT() *MockServingServiceClientMockRecorder {
	return m.recorder
}

// GetFeastServingInfo mocks base method.
func (m *MockServingServiceClient) GetFeastServingInfo(ctx context.Context, in *serving.GetFeastServingInfoRequest, opts ...grpc.CallOption) (*serving.GetFeastServingInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFeastServingInfo", varargs...)
	ret0, _ := ret[0].(*serving.GetFeastServingInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeastServingInfo indicates an expected call of GetFeastServingInfo.
func (mr *MockServingServiceClientMockRecorder) GetFeastServingInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeastServingInfo", reflect.TypeOf((*MockServingServiceClient)(nil).GetFeastServingInfo), varargs...)
}

// GetOnlineFeatures mocks base method.
func (m *MockServingServiceClient) GetOnlineFeatures(ctx context.Context, in *serving.GetOnlineFeaturesRequestV2, opts ...grpc.CallOption) (*serving.GetOnlineFeaturesResponseV2, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOnlineFeatures", varargs...)
	ret0, _ := ret[0].(*serving.GetOnlineFeaturesResponseV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnlineFeatures indicates an expected call of GetOnlineFeatures.
func (mr *MockServingServiceClientMockRecorder) GetOnlineFeatures(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnlineFeatures", reflect.TypeOf((*MockServingServiceClient)(nil).GetOnlineFeatures), varargs...)
}

// GetOnlineFeaturesV2 mocks base method.
func (m *MockServingServiceClient) GetOnlineFeaturesV2(ctx context.Context, in *serving.GetOnlineFeaturesRequestV2, opts ...grpc.CallOption) (*serving.GetOnlineFeaturesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOnlineFeaturesV2", varargs...)
	ret0, _ := ret[0].(*serving.GetOnlineFeaturesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnlineFeaturesV2 indicates an expected call of GetOnlineFeaturesV2.
func (mr *MockServingServiceClientMockRecorder) GetOnlineFeaturesV2(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnlineFeaturesV2", reflect.TypeOf((*MockServingServiceClient)(nil).GetOnlineFeaturesV2), varargs...)
}

// MockServingServiceServer is a mock of ServingServiceServer interface.
type MockServingServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockServingServiceServerMockRecorder
}

// MockServingServiceServerMockRecorder is the mock recorder for MockServingServiceServer.
type MockServingServiceServerMockRecorder struct {
	mock *MockServingServiceServer
}

// NewMockServingServiceServer creates a new mock instance.
func NewMockServingServiceServer(ctrl *gomock.Controller) *MockServingServiceServer {
	mock := &MockServingServiceServer{ctrl: ctrl}
	mock.recorder = &MockServingServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServingServiceServer) EXPECT() *MockServingServiceServerMockRecorder {
	return m.recorder
}

// GetFeastServingInfo mocks base method.
func (m *MockServingServiceServer) GetFeastServingInfo(arg0 context.Context, arg1 *serving.GetFeastServingInfoRequest) (*serving.GetFeastServingInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeastServingInfo", arg0, arg1)
	ret0, _ := ret[0].(*serving.GetFeastServingInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeastServingInfo indicates an expected call of GetFeastServingInfo.
func (mr *MockServingServiceServerMockRecorder) GetFeastServingInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeastServingInfo", reflect.TypeOf((*MockServingServiceServer)(nil).GetFeastServingInfo), arg0, arg1)
}

// GetOnlineFeatures mocks base method.
func (m *MockServingServiceServer) GetOnlineFeatures(arg0 context.Context, arg1 *serving.GetOnlineFeaturesRequestV2) (*serving.GetOnlineFeaturesResponseV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOnlineFeatures", arg0, arg1)
	ret0, _ := ret[0].(*serving.GetOnlineFeaturesResponseV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnlineFeatures indicates an expected call of GetOnlineFeatures.
func (mr *MockServingServiceServerMockRecorder) GetOnlineFeatures(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnlineFeatures", reflect.TypeOf((*MockServingServiceServer)(nil).GetOnlineFeatures), arg0, arg1)
}

// GetOnlineFeaturesV2 mocks base method.
func (m *MockServingServiceServer) GetOnlineFeaturesV2(arg0 context.Context, arg1 *serving.GetOnlineFeaturesRequestV2) (*serving.GetOnlineFeaturesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOnlineFeaturesV2", arg0, arg1)
	ret0, _ := ret[0].(*serving.GetOnlineFeaturesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnlineFeaturesV2 indicates an expected call of GetOnlineFeaturesV2.
func (mr *MockServingServiceServerMockRecorder) GetOnlineFeaturesV2(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnlineFeaturesV2", reflect.TypeOf((*MockServingServiceServer)(nil).GetOnlineFeaturesV2), arg0, arg1)
}

// mustEmbedUnimplementedServingServiceServer mocks base method.
func (m *MockServingServiceServer) mustEmbedUnimplementedServingServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedServingServiceServer")
}

// mustEmbedUnimplementedServingServiceServer indicates an expected call of mustEmbedUnimplementedServingServiceServer.
func (mr *MockServingServiceServerMockRecorder) mustEmbedUnimplementedServingServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedServingServiceServer", reflect.TypeOf((*MockServingServiceServer)(nil).mustEmbedUnimplementedServingServiceServer))
}

// MockUnsafeServingServiceServer is a mock of UnsafeServingServiceServer interface.
type MockUnsafeServingServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeServingServiceServerMockRecorder
}

// MockUnsafeServingServiceServerMockRecorder is the mock recorder for MockUnsafeServingServiceServer.
type MockUnsafeServingServiceServerMockRecorder struct {
	mock *MockUnsafeServingServiceServer
}

// NewMockUnsafeServingServiceServer creates a new mock instance.
func NewMockUnsafeServingServiceServer(ctrl *gomock.Controller) *MockUnsafeServingServiceServer {
	mock := &MockUnsafeServingServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeServingServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeServingServiceServer) EXPECT() *MockUnsafeServingServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedServingServiceServer mocks base method.
func (m *MockUnsafeServingServiceServer) mustEmbedUnimplementedServingServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedServingServiceServer")
}

// mustEmbedUnimplementedServingServiceServer indicates an expected call of mustEmbedUnimplementedServingServiceServer.
func (mr *MockUnsafeServingServiceServerMockRecorder) mustEmbedUnimplementedServingServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedServingServiceServer", reflect.TypeOf((*MockUnsafeServingServiceServer)(nil).mustEmbedUnimplementedServingServiceServer))
}
