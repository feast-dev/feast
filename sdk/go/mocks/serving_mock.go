// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/feast-dev/feast/sdk/go/protos/feast/serving (interfaces: ServingServiceClient)

// Package mock_serving is a generated GoMock package.
package mock_serving

import (
	context "context"
	reflect "reflect"

	serving "github.com/feast-dev/feast/sdk/go/protos/feast/serving"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockServingServiceClient is a mock of ServingServiceClient interface
type MockServingServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockServingServiceClientMockRecorder
}

// MockServingServiceClientMockRecorder is the mock recorder for MockServingServiceClient
type MockServingServiceClientMockRecorder struct {
	mock *MockServingServiceClient
}

// NewMockServingServiceClient creates a new mock instance
func NewMockServingServiceClient(ctrl *gomock.Controller) *MockServingServiceClient {
	mock := &MockServingServiceClient{ctrl: ctrl}
	mock.recorder = &MockServingServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServingServiceClient) EXPECT() *MockServingServiceClientMockRecorder {
	return m.recorder
}

// GetFeastServingInfo mocks base method
func (m *MockServingServiceClient) GetFeastServingInfo(arg0 context.Context, arg1 *serving.GetFeastServingInfoRequest, arg2 ...grpc.CallOption) (*serving.GetFeastServingInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFeastServingInfo", varargs...)
	ret0, _ := ret[0].(*serving.GetFeastServingInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeastServingInfo indicates an expected call of GetFeastServingInfo
func (mr *MockServingServiceClientMockRecorder) GetFeastServingInfo(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeastServingInfo", reflect.TypeOf((*MockServingServiceClient)(nil).GetFeastServingInfo), varargs...)
}

// GetOnlineFeaturesV2 mocks base method
func (m *MockServingServiceClient) GetOnlineFeatures(arg0 context.Context, arg1 *serving.GetOnlineFeaturesRequest, arg2 ...grpc.CallOption) (*serving.GetOnlineFeaturesResponseV2, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOnlineFeatures", varargs...)
	ret0, _ := ret[0].(*serving.GetOnlineFeaturesResponseV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnlineFeaturesV2 indicates an expected call of GetOnlineFeaturesV2
func (mr *MockServingServiceClientMockRecorder) GetOnlineFeatures(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnlineFeatures", reflect.TypeOf((*MockServingServiceClient)(nil).GetOnlineFeatures), varargs...)
}
