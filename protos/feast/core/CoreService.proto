//
// Copyright 2018 The Feast Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package feast.core;

option go_package = "github.com/gojek/feast/sdk/go/protos/feast/core";
option java_outer_classname = "CoreServiceProto";
option java_package = "feast.core";

import "feast/core/FeatureSet.proto";
import "feast/core/Store.proto";

service CoreService {
    // Retrieve version information about this Feast deployment
    rpc GetFeastCoreVersion (GetFeastCoreVersionRequest) returns (GetFeastCoreVersionResponse);

    // Returns a specific feature set
    rpc GetFeatureSet (GetFeatureSetRequest) returns (GetFeatureSetResponse);

    // Retrieve feature set details given a filter.
    //
    // Returns all feature sets matching that filter. If none are found,
    // an empty list will be returned.
    // If no filter is provided in the request, the response will contain all the feature
    // sets currently stored in the registry.
    rpc ListFeatureSets (ListFeatureSetsRequest) returns (ListFeatureSetsResponse);

    // Get feature statistics computed over the data in the batch stores.
    //
    // Returns a dataset containing TFDV statistics mapped to each valid historical store.
    rpc GetFeatureStatistics (GetFeatureStatisticsRequest) returns (GetFeatureStatisticsResponse);

    // Retrieve store details given a filter.
    //
    // Returns all stores matching that filter. If none are found, an empty list will be returned.
    // If no filter is provided in the request, the response will contain all the stores currently
    // stored in the registry.
    rpc ListStores (ListStoresRequest) returns (ListStoresResponse);

    // Create or update and existing feature set.
    //
    // This function is idempotent - it will not create a new feature set if schema does not change.
    // If an existing feature set is updated, core will advance the version number, which will be
    // returned in response.
    rpc ApplyFeatureSet (ApplyFeatureSetRequest) returns (ApplyFeatureSetResponse);

    // Updates core with the configuration of the store.
    //
    // If the changes are valid, core will return the given store configuration in response, and
    // start or update the necessary feature population jobs for the updated store.
    rpc UpdateStore (UpdateStoreRequest) returns (UpdateStoreResponse);

    // Creates a project. Projects serve as namespaces within which resources like features will be
    // created. Both feature set names as well as field names must be unique within a project. Project
    // names themselves must be globally unique.
    rpc CreateProject (CreateProjectRequest) returns (CreateProjectResponse);

    // Archives a project. Archived projects will continue to exist and function, but won't be visible
    // through the Core API. Any existing ingestion or serving requests will continue to function,
    // but will result in warning messages being logged. It is not possible to unarchive a project
    // through the Core API
    rpc ArchiveProject (ArchiveProjectRequest) returns (ArchiveProjectResponse);

    // Lists all projects active projects.
    rpc ListProjects (ListProjectsRequest) returns (ListProjectsResponse);
}

// Request for a single feature set
message GetFeatureSetRequest {
    // Name of project the feature set belongs to (required)
    string project = 3;

    // Name of feature set (required).
    string name = 1;

    // Version of feature set (optional). If omitted then latest feature set will be returned.
    int32 version = 2;
}

// Response containing a single feature set
message GetFeatureSetResponse {
    feast.core.FeatureSet feature_set = 1;
}

// Retrieves details for all versions of a specific feature set
message ListFeatureSetsRequest {
    Filter filter = 1;

    message Filter {
        // Name of project that the feature sets belongs to. This can be one of
        // - [project_name]
        // - *
        // If an asterisk is provided, filtering on projects will be disabled. All projects will
        // be matched. It is NOT possible to provide an asterisk with a string in order to do
        // pattern matching.
        string project = 3;

        // Name of the desired feature set. Asterisks can be used as wildcards in the name.
        // Matching on names is only permitted if a specific project is defined. It is disallowed
        // If the project name is set to "*"
        // e.g.
        // - * can be used to match all feature sets
        // - my-feature-set* can be used to match all features prefixed by "my-feature-set"
        // - my-feature-set-6 can be used to select a single feature set
        string feature_set_name = 1;


        // Versions of the given feature sets that will be returned.
        // Valid options for version:
        //     "latest": only the latest version is returned.
        //     "*": Subscribe to all versions
        //     [version number]: pin to a specific version. Project and feature set name must be
        //                       explicitly defined if a specific version is pinned.
        string feature_set_version = 2;
    }
}

message ListFeatureSetsResponse {
    repeated feast.core.FeatureSet feature_sets = 1;
}

message ListStoresRequest {
    message Filter {
        // Name of desired store. Regex is not supported in this query.
        string name = 1;
    }

    Filter filter = 1;
}

message ListStoresResponse {
    repeated feast.core.Store store = 1;
}

message ApplyFeatureSetRequest {
    // Feature set version and source will be ignored
    feast.core.FeatureSet feature_set = 1;
}

message ApplyFeatureSetResponse {
    enum Status {
        // Latest feature set version is consistent with provided feature set
        NO_CHANGE = 0;

        // New feature set or feature set version created
        CREATED = 1;

        // Error occurred while trying to apply changes
        ERROR = 2;
    }

    // Feature set response has been enriched with version and source information
    feast.core.FeatureSet feature_set = 1;
    Status status = 2;
}

message GetFeastCoreVersionRequest {
}

message GetFeastCoreVersionResponse {
    string version = 1;
}

message UpdateStoreRequest {
    feast.core.Store store = 1;
}

message UpdateStoreResponse {
    enum Status {
        // Existing store config matching the given store id is identical to the given store config.
        NO_CHANGE = 0;

        // New store created or existing config updated.
        UPDATED = 1;
    }
    feast.core.Store store = 1;
    Status status = 2;
}

// Request to create a project
message CreateProjectRequest {
    // Name of project (required)
    string name = 1;
}

// Response for creation of a project
message CreateProjectResponse {
}

// Request for the archival of a project
message ArchiveProjectRequest {
    // Name of project to be archived
    string name = 1;
}

// Response for archival of a project
message ArchiveProjectResponse {
}

// Request for listing of projects
message ListProjectsRequest {
}

// Response for listing of projects
message ListProjectsResponse {
    // List of project names (archived projects are filtered out)
    repeated string projects = 1;
}

message GetFeatureStatisticsRequest {
    // Optional filter which filters returned statistics by selected features. These
    // features must be present in the data that is being processed.
    repeated string feature_refs = 1;

    // Optional filter to select store over which the statistics will retrieved.
    // Only historical stores are allowed.
    string store = 2;

    // Optional start and end dates over which to filter statistical data
    // Start date is inclusive, but end date is not.
    // Only dates are supported, not times.
    // Cannot be used with dataset_ids.
    // If this period spans multiple days, unaggregatable statistics will be dropped.
    google.protobuf.Timestamp start_date = 3;
    google.protobuf.Timestamp end_date = 4;

    // Optional list of dataset Ids by which to filter data before
    // retrieving statistics.
    // Cannot be used with the date ranges
    // If multiple dataset ids are provided, unaggregatable statistics will be dropped.
    repeated string dataset_ids = 5;

    // Setting this flag to true will force a recalculation of statistics and overwrite results currently in the
    // cache, if any.
    bool force_refresh = 6;
}

message GetFeatureStatisticsResponse {
    // Contains statistics for the requested data.
    // Due to the limitations of TFDV and Facets, only a single dataset can be returned in,
    // despite the message being of list type.
    DatasetFeatureStatisticsList dataset_feature_statistics_list = 1;
}
