//
// Copyright 2018 The Feast Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";
package feast.core;

option go_package = "github.com/feast-dev/feast/sdk/go/protos/feast/core";
option java_outer_classname = "CoreServiceProto";
option java_package = "feast.proto.core";

import "google/protobuf/timestamp.proto";
import "tensorflow_metadata/proto/v0/statistics.proto";
import "feast/core/FeatureSet.proto";
import "feast/core/Store.proto";
import "feast/core/FeatureSetReference.proto";
import "feast/core/IngestionJob.proto";

service CoreService {
    // Retrieve version information about this Feast deployment
    rpc GetFeastCoreVersion (GetFeastCoreVersionRequest) returns (GetFeastCoreVersionResponse);

    // Returns a specific feature set
    rpc GetFeatureSet (GetFeatureSetRequest) returns (GetFeatureSetResponse);

    // Retrieve feature set details given a filter.
    //
    // Returns all feature sets matching that filter. If none are found,
    // an empty list will be returned.
    // If no filter is provided in the request, the response will contain all the feature
    // sets currently stored in the registry.
    rpc ListFeatureSets (ListFeatureSetsRequest) returns (ListFeatureSetsResponse);

    // Returns all feature references and respective features matching that filter. If none are found
    // an empty map will be returned
    // If no filter is provided in the request, the response will contain all the features
    // currently stored in the default project.
    rpc ListFeatures (ListFeaturesRequest) returns (ListFeaturesResponse);

    // Get feature statistics computed over the data in the batch stores.
    //
    // Returns a dataset containing TFDV statistics mapped to each valid historical store.
    rpc GetFeatureStatistics (GetFeatureStatisticsRequest) returns (GetFeatureStatisticsResponse);

    // Retrieve store details given a filter.
    //
    // Returns all stores matching that filter. If none are found, an empty list will be returned.
    // If no filter is provided in the request, the response will contain all the stores currently
    // stored in the registry.
    rpc ListStores (ListStoresRequest) returns (ListStoresResponse);

    // Create or update and existing feature set.
    //
    // This function is idempotent - it will not create a new feature set if schema does not change.
    // Schema changes will update the feature set if the changes are valid.
    // All changes except the following are valid:
    // - Changes to feature set id (name, project)
    // - Changes to entities
    // - Changes to feature name and type
    rpc ApplyFeatureSet (ApplyFeatureSetRequest) returns (ApplyFeatureSetResponse);

    // Updates core with the configuration of the store.
    //
    // If the changes are valid, core will return the given store configuration in response, and
    // start or update the necessary feature population jobs for the updated store.
    rpc UpdateStore (UpdateStoreRequest) returns (UpdateStoreResponse);

    // Creates a project. Projects serve as namespaces within which resources like features will be
    // created. Feature set names as must be unique within a project while field (Feature/Entity) names
    // must be unique within a Feature Set. Project names themselves must be globally unique.
    rpc CreateProject (CreateProjectRequest) returns (CreateProjectResponse);

    // Archives a project. Archived projects will continue to exist and function, but won't be visible
    // through the Core API. Any existing ingestion or serving requests will continue to function,
    // but will result in warning messages being logged. It is not possible to unarchive a project
    // through the Core API
    rpc ArchiveProject (ArchiveProjectRequest) returns (ArchiveProjectResponse);

    // Lists all projects active projects.
    rpc ListProjects (ListProjectsRequest) returns (ListProjectsResponse);
  
    // List Ingestion Jobs given an optional filter.
    // Returns allow ingestions matching the given request filter. 
    // Returns all ingestion jobs if no filter is provided.
    // Returns an empty list if no ingestion jobs match the filter.
    rpc ListIngestionJobs(ListIngestionJobsRequest) returns (ListIngestionJobsResponse);

    // Restart an Ingestion Job.  Restarts the ingestion job with the given job id.
    // NOTE: Data might be lost during the restart for some job runners.
    // Does not support stopping a job in a transitional (ie pending, suspending, aborting), 
    // terminal state (ie suspended or aborted) or unknown status
    rpc RestartIngestionJob(RestartIngestionJobRequest) returns (RestartIngestionJobResponse);
  
    // Stop an Ingestion Job.  Stop (Aborts) the ingestion job with the given job id.
    // Does nothing if the target job if already in a terminal state (ie suspended or aborted).
    // Does not support stopping a job in a transitional (ie pending, suspending, aborting) or unknown status
    rpc StopIngestionJob(StopIngestionJobRequest) returns (StopIngestionJobResponse);

}

// Request for a single feature set
message GetFeatureSetRequest {
    // Name of project the feature set belongs to. If omitted will default to 'default' project.
    string project = 3;

    // Name of feature set (required).
    string name = 1;
}

// Response containing a single feature set
message GetFeatureSetResponse {
    feast.core.FeatureSet feature_set = 1;
}

// Retrieves details for all versions of a specific feature set
message ListFeatureSetsRequest {
    Filter filter = 1;

    message Filter {
        // Name of project that the feature sets belongs to. This can be one of
        // - [project_name]
        // - *
        // If an asterisk is provided, filtering on projects will be disabled. All projects will
        // be matched. It is NOT possible to provide an asterisk with a string in order to do
        // pattern matching.
        // If unspecified this field will default to the default project 'default'.
        string project = 3;

        // Name of the desired feature set. Asterisks can be used as wildcards in the name.
        // Matching on names is only permitted if a specific project is defined. It is disallowed
        // If the project name is set to "*"
        // e.g.
        // - * can be used to match all feature sets
        // - my-feature-set* can be used to match all features prefixed by "my-feature-set"
        // - my-feature-set-6 can be used to select a single feature set
        string feature_set_name = 1;

        // User defined metadata for feature set.
        // Feature sets with all matching labels will be returned.
        map<string,string> labels = 4;
    }
}

message ListFeatureSetsResponse {
    repeated feast.core.FeatureSet feature_sets = 1;
}

message ListFeaturesRequest {
    message Filter {
        // User defined metadata for feature.
        // Features with all matching labels will be returned.
        map<string,string> labels = 1;

        // List of entities contained within the featureSet that the feature belongs to.
        // Only feature sets with these entities will be searched for features.
        repeated string entities = 2;

        // Name of project that the feature sets belongs to. Filtering on projects is disabled. 
        // It is NOT possible to provide an asterisk with a string in order to do pattern matching.
        // If unspecified this field will default to the default project 'default'.
        string project = 3;
    }

    Filter filter = 1;
}

message ListFeaturesResponse {
    map<string, feast.core.FeatureSpec> features = 1;
}

message ListStoresRequest {
    message Filter {
        // Name of desired store. Regex is not supported in this query.
        string name = 1;
    }

    Filter filter = 1;
}

message ListStoresResponse {
    repeated feast.core.Store store = 1;
}

message ApplyFeatureSetRequest {
    // Feature set version
    // If project is unspecified, will default to 'default' project.
    // If project specified does not exist, the project would be automatically created.
    feast.core.FeatureSet feature_set = 1;
}

message ApplyFeatureSetResponse {
    // TODO: 0 should correspond to invalid rather than NO_CHANGE
    enum Status {
        // Latest feature set is consistent with provided feature set
        NO_CHANGE = 0;

        // New feature set created
        CREATED = 1;

        // Error occurred while trying to apply changes
        ERROR = 2;

        // Changes detected and updated successfully
        UPDATED = 3;
    }

    feast.core.FeatureSet feature_set = 1;
    Status status = 2;
}

message GetFeastCoreVersionRequest {
}

message GetFeastCoreVersionResponse {
    string version = 1;
}

message UpdateStoreRequest {
    feast.core.Store store = 1;
}

message UpdateStoreResponse {
    enum Status {
        // Existing store config matching the given store id is identical to the given store config.
        NO_CHANGE = 0;

        // New store created or existing config updated.
        UPDATED = 1;
    }
    feast.core.Store store = 1;
    Status status = 2;
}

// Request to create a project
message CreateProjectRequest {
    // Name of project (required)
    string name = 1;
}

// Response for creation of a project
message CreateProjectResponse {
}

// Request for the archival of a project
message ArchiveProjectRequest {
    // Name of project to be archived
    string name = 1;
}

// Response for archival of a project
message ArchiveProjectResponse {
}

// Request for listing of projects
message ListProjectsRequest {
}

// Response for listing of projects
message ListProjectsResponse {
    // List of project names (archived projects are filtered out)
    repeated string projects = 1;
}

// Request for listing ingestion jobs
message ListIngestionJobsRequest {
    Filter filter = 1;

    message Filter {
        // Filter by Job ID assigned by Feast
        string id = 1;
        // Filter by ingestion job target feature set.
        FeatureSetReference feature_set_reference = 2;
        // Filter by Name of store
        string store_name = 3;
    }
}

// Response from listing ingestion jobs
message ListIngestionJobsResponse {
    repeated IngestionJob jobs = 1;
}

// Request to restart ingestion job
message RestartIngestionJobRequest {
    // Job ID assigned by Feast
    string id = 1;
}

// Response from restartingan  injestion job
message RestartIngestionJobResponse {}


// Request to stop ingestion job
message StopIngestionJobRequest {
    // Job ID assigned by Feast
    string id = 1;
}

// Request from stopping an ingestion job
message StopIngestionJobResponse {}

message GetFeatureStatisticsRequest {
    // Feature set to retrieve the statistics for. A fully qualified feature set
    // id in the format of project/feature_set must be provided.
    string feature_set_id = 1;

    // Optional filter which filters returned statistics by selected features. These
    // features must be present in the data that is being processed.
    repeated string features = 2;

    // Optional filter to select store over which the statistics will retrieved.
    // Only historical stores are allowed.
    string store = 3;

    // Optional start and end dates over which to filter statistical data
    // Start date is inclusive, but end date is not.
    // Only dates are supported, not times.
    // Cannot be used with dataset_ids.
    // If this period spans multiple days, unaggregatable statistics will be dropped.
    google.protobuf.Timestamp start_date = 4;
    google.protobuf.Timestamp end_date = 5;

    // Optional list of ingestion Ids by which to filter data before
    // retrieving statistics.
    // Cannot be used with the date ranges
    // If multiple dataset ids are provided, unaggregatable statistics will be dropped.
    repeated string ingestion_ids = 6;

    // Setting this flag to true will force a recalculation of statistics and overwrite results currently in the
    // cache, if any.
    bool force_refresh = 7;
}

message GetFeatureStatisticsResponse {
    // Contains statistics for the requested data.
    // Due to the limitations of TFDV and Facets, only a single dataset can be returned in,
    // despite the message being of list type.
    tensorflow.metadata.v0.DatasetFeatureStatisticsList dataset_feature_statistics_list = 1;
}
