name: publish

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  get-version:
    runs-on:  ubuntu-latest
    outputs:
      release_version: ${{ steps.get_release_version.outputs.release_version }}
      version_without_prefix: ${{ steps.get_release_version_without_prefix.outputs.version_without_prefix }}
      highest_semver_tag: ${{ steps.get_highest_semver.outputs.highest_semver_tag }}
    steps:
      - uses: actions/checkout@v2
      - name: Get release version
        id: get_release_version
        run: echo ::set-output name=release_version::${GITHUB_REF#refs/*/}
      - name: Get release version without prefix
        id: get_release_version_without_prefix
        env:
          RELEASE_VERSION: ${{ steps.get_release_version.outputs.release_version }}
        run: |
          echo ::set-output name=version_without_prefix::${RELEASE_VERSION:1}
      - name: Get highest semver
        id: get_highest_semver
        env:
          RELEASE_VERSION: ${{ steps.get_release_version.outputs.release_version }}
        run: |
          source infra/scripts/setup-common-functions.sh
          SEMVER_REGEX='^v[0-9]+\.[0-9]+\.[0-9]+(-([0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*))?$'
          if echo "${RELEASE_VERSION}" | grep -P "$SEMVER_REGEX" &>/dev/null ; then
            echo ::set-output name=highest_semver_tag::$(get_tag_release -m)
          fi
      - name: Check output
        env:
          RELEASE_VERSION: ${{ steps.get_release_version.outputs.release_version }}
          VERSION_WITHOUT_PREFIX: ${{ steps.get_release_version_without_prefix.outputs.version_without_prefix }}
          HIGHEST_SEMVER_TAG: ${{ steps.get_highest_semver.outputs.highest_semver_tag }}
        run: |
          echo $RELEASE_VERSION
          echo $VERSION_WITHOUT_PREFIX
          echo $HIGHEST_SEMVER_TAG

  build-publish-docker-images:
    runs-on: ubuntu-latest
    needs: get-version
    strategy:
      matrix:
        component: [feature-server-python-aws, feature-server-java, feature-transformation-server]
    env:
      MAVEN_CACHE: gs://feast-templocation-kf-feast/.m2.2020-08-19.tar
      REGISTRY: feastdev
    steps:
      - uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      - name: Use gcloud CLI
        run: gcloud info
      - run: gcloud auth configure-docker --quiet
      - name: Get m2 cache
        run: |
          infra/scripts/download-maven-cache.sh \
          --archive-uri ${MAVEN_CACHE} \
          --output-dir .
      - name: Build image
        run: |
          make build-${{ matrix.component }}-docker REGISTRY=${REGISTRY} VERSION=${VERSION_WITHOUT_PREFIX}
        env:
          RELEASE_VERSION: ${{ needs.get-version.outputs.release_version }}
          VERSION_WITHOUT_PREFIX: ${{ needs.get-version.outputs.version_without_prefix }}
          HIGHEST_SEMVER_TAG: ${{ needs.get-version.outputs.highest_semver_tag }}
      - name: Push versioned images
        env:
          RELEASE_VERSION: ${{ needs.get-version.outputs.release_version }}
          VERSION_WITHOUT_PREFIX: ${{ needs.get-version.outputs.version_without_prefix }}
          HIGHEST_SEMVER_TAG: ${{ needs.get-version.outputs.highest_semver_tag }}
        run: |
          make push-${{ matrix.component }}-docker REGISTRY=${REGISTRY} VERSION=${VERSION_WITHOUT_PREFIX}

          echo "Only push to latest tag if tag is the highest semver version $HIGHEST_SEMVER_TAG"
          if [ "${VERSION_WITHOUT_PREFIX}" = "${HIGHEST_SEMVER_TAG:1}" ]
          then
            docker tag feastdev/${{ matrix.component }}:${VERSION_WITHOUT_PREFIX} feastdev/${{ matrix.component }}:latest
            docker push feastdev/${{ matrix.component }}:latest
          fi

  publish-helm-charts:
    runs-on:  ubuntu-latest
    needs: get-version
    env:
      HELM_VERSION: v3.8.0
      VERSION_WITHOUT_PREFIX: ${{ needs.get-version.outputs.version_without_prefix }}
    steps:
      - uses: actions/checkout@v2
      - uses: google-github-actions/setup-gcloud@v0
        with:
          version: '290.0.1'
          export_default_credentials: true
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
      - run: gcloud auth configure-docker --quiet
      - name: Remove previous Helm
        run: sudo rm -rf $(which helm)
      - name: Install Helm
        run: ./infra/scripts/helm/install-helm.sh
      - name: Validate Helm chart prior to publishing
        run: ./infra/scripts/helm/validate-helm-chart-publish.sh
      - name: Validate all version consistency
        run: ./infra/scripts/helm/validate-helm-chart-versions.sh $VERSION_WITHOUT_PREFIX
      - name: Publish Helm charts
        run: ./infra/scripts/helm/push-helm-charts.sh $VERSION_WITHOUT_PREFIX

  publish-python-sdk:
    runs-on: ubuntu-latest
    needs: [verify-python-wheel]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels
          path: dist
      - uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          user: __token__
          password: ${{ secrets.PYPI_PASSWORD }}


  verify-python-wheel:
    runs-on: ${{ matrix.os }}
    needs: [build-python-sdk, build-python-sdk-macos-py310]
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-10.15 ]
        python-version: [ "3.7", "3.8", "3.9", "3.10"]
        from-source: [ True, False ]
    env:
      # this script is for testing servers
      # it starts server with timeout and checks whether process killed by timeout (started healthy) or died by itself
      TEST_SCRIPT: |
        timeout 10s $@ & pid=$!
        wait $pid
        ret=$?
        if [[ $ret -ne 124 ]]
        then
           exit $ret
        else
           echo "Succeeded!"
        fi
    steps:
      - name: Setup Python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - uses: actions/setup-go@v3
        with:
          go-version: '>=1.17.0'
      - uses: actions/download-artifact@v2
        with:
          name: wheels
          path: dist
      - name: Install wheel
        if: ${{ !matrix.from-source }}
        # try to install all wheels; only the current platform wheel should be actually installed
        run: |
          cd dist/
          pip install wheel
          for f in *.whl; do pip install $f || true; done
      - name: Install sdist
        if: ${{ matrix.from-source }}
        env:
          COMPILE_GO: "True"
        run: |
          pip install 'grpcio-tools==1.44.0' 'pybindgen==0.22.0'
          go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.26.0
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.1.0
          pip install dist/*tar.gz
      - name: Install OS X dependencies
        if: matrix.os == 'macos-10.15'
        run: brew install coreutils
      - name: Smoke test
        run: |
          feast init test_repo
          cd test_repo/
          feast apply
          echo "$TEST_SCRIPT" > run-and-wait.sh
          bash run-and-wait.sh feast serve
          bash run-and-wait.sh feast ui
          
          pip install cffi
          printf "\ngo_feature_retrieval: True" >> feature_store.yaml
          bash run-and-wait.sh feast serve

  build-python-sdk:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-10.15 ]
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '17.x'
          registry-url: 'https://registry.npmjs.org'
      - name: Build UI
        run: make build-ui
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.4.0
        env:
          CIBW_BUILD: "cp3*_x86_64"
          CIBW_SKIP: "cp36-* *-musllinux_x86_64 cp310-macosx_x86_64"
          CIBW_ARCHS: "native"
          CIBW_ENVIRONMENT: >
            COMPILE_GO=True PATH=$PATH:/usr/local/go/bin
          CIBW_BEFORE_ALL_LINUX: |
            curl -o go.tar.gz https://dl.google.com/go/go1.18.2.linux-amd64.tar.gz
            tar -C /usr/local -xzf go.tar.gz
            go version
          CIBW_BEFORE_ALL_MACOS: |
            curl -o python.pkg https://www.python.org/ftp/python/3.9.12/python-3.9.12-macosx10.9.pkg
            sudo installer -pkg python.pkg -target /
          CIBW_BEFORE_BUILD: |
            make install-protoc-dependencies
            make install-go-proto-dependencies
            make install-go-ci-dependencies

      - uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: ./wheelhouse/*.whl


  build-python-sdk-macos-py310:
    runs-on: macos-10.15
    env:
      COMPILE_GO: True
    steps:
      - uses: actions/checkout@v2
      - name: Setup Python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
          architecture: x64
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '17.x'
          registry-url: 'https://registry.npmjs.org'
      - name: Build and install dependencies
        run: |
          pip install -U pip setuptools wheel twine
          make install-protoc-dependencies
          make install-go-proto-dependencies
          make install-go-ci-dependencies
          make build-ui
      - name: Build
        run: |
          python3 setup.py sdist bdist_wheel

      - uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist/*


  publish-java-sdk:
    container: maven:3.6-jdk-11
    runs-on: ubuntu-latest
    needs: get-version
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'
          java-package: jdk
          architecture: x64
      - uses: actions/setup-python@v2
        with:
          python-version: '3.7'
          architecture: 'x64'
      - uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-it-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-it-maven-
      - name: Publish java sdk
        env:
          VERSION_WITHOUT_PREFIX: ${{ needs.get-version.outputs.version_without_prefix }}
          GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          MAVEN_SETTINGS: ${{ secrets.MAVEN_SETTINGS }}
        run: |
          echo -n "$GPG_PUBLIC_KEY" > /root/public-key
          echo -n "$GPG_PRIVATE_KEY" > /root/private-key
          mkdir -p /root/.m2/
          echo -n "$MAVEN_SETTINGS" > /root/.m2/settings.xml
          infra/scripts/publish-java-sdk.sh --revision ${VERSION_WITHOUT_PREFIX} --gpg-key-import-dir /root

  publish-web-ui-npm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '17.x'
          registry-url: 'https://registry.npmjs.org'
      - name: Install yarn dependencies
        working-directory: ./ui
        run: yarn install
      - name: Build yarn rollup
        working-directory: ./ui
        run: yarn build:lib
      - name: Publish UI package
        working-directory: ./ui
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
