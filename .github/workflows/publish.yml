name: publish

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch: # Allows manual trigger of the workflow
    inputs:
      custom_version: # Optional input for a custom version
        description: 'Custom version to publish (e.g., v1.2.3) -- only edit if you know what you are doing'
        required: false
      token:
        description: 'Personal Access Token'
        required: true
        default: ""
        type: string

jobs:
  get-version:
    uses: ./.github/workflows/get_semantic_release_version.yaml
    with:
      custom_version: ${{ github.event.inputs.custom_version }}
      token: ${{ github.event.inputs.token }}

  publish-python-sdk:
    uses: ./.github/workflows/publish_python_sdk.yaml
    with:
      custom_version: ${{ github.event.inputs.custom_version }}
      token: ${{ github.event.inputs.token }}

  build-publish-docker-images:
    runs-on: ubuntu-latest
    needs: [get-version, publish-python-sdk]
    strategy:
      matrix:
        component: [feature-server, feature-server-java, feature-transformation-server, feast-helm-operator, feast-operator]
    env:
      MAVEN_CACHE: gs://feast-templocation-kf-feast/.m2.2020-08-19.tar
      REGISTRY: feastdev
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
      - name: Set up gcloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      - name: Use gcloud CLI
        run: gcloud info
      - run: gcloud auth configure-docker --quiet
      - name: Build image
        run: |
          make build-${{ matrix.component }}-docker REGISTRY=${REGISTRY} VERSION=${VERSION_WITHOUT_PREFIX}
        env:
          RELEASE_VERSION: ${{ needs.get-version.outputs.release_version }}
          VERSION_WITHOUT_PREFIX: ${{ needs.get-version.outputs.version_without_prefix }}
          HIGHEST_SEMVER_TAG: ${{ needs.get-version.outputs.highest_semver_tag }}
      - name: Push versioned images
        env:
          RELEASE_VERSION: ${{ needs.get-version.outputs.release_version }}
          VERSION_WITHOUT_PREFIX: ${{ needs.get-version.outputs.version_without_prefix }}
          HIGHEST_SEMVER_TAG: ${{ needs.get-version.outputs.highest_semver_tag }}
        run: |
          make push-${{ matrix.component }}-docker REGISTRY=${REGISTRY} VERSION=${VERSION_WITHOUT_PREFIX}

          echo "Only push to latest tag if tag is the highest semver version $HIGHEST_SEMVER_TAG"
          if [ "${VERSION_WITHOUT_PREFIX}" = "${HIGHEST_SEMVER_TAG:1}" ]
          then
            docker tag feastdev/${{ matrix.component }}:${VERSION_WITHOUT_PREFIX} feastdev/${{ matrix.component }}:latest
            docker push feastdev/${{ matrix.component }}:latest
          fi

  publish-helm-charts:
    uses: ./.github/workflows/publish_helm_charts.yml
    needs: [get-version, publish-python-sdk]
    with:
      custom_version: ${{ github.event.inputs.custom_version }}
      token: ${{ github.event.inputs.token }}

  publish-java-sdk:
    if: github.repository == 'feast-dev/feast'
    container: maven:3.6-jdk-11
    runs-on: ubuntu-latest
    needs: [get-version, publish-python-sdk]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'
          java-package: jdk
          architecture: x64
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: 'x64'
      - uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-it-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-it-maven-
      - name: Publish java sdk
        env:
          VERSION_WITHOUT_PREFIX: ${{ needs.get-version.outputs.version_without_prefix }}
          GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          MAVEN_SETTINGS: ${{ secrets.MAVEN_SETTINGS }}
        run: |
          echo -n "$GPG_PUBLIC_KEY" > /root/public-key
          echo -n "$GPG_PRIVATE_KEY" > /root/private-key
          mkdir -p /root/.m2/
          echo -n "$MAVEN_SETTINGS" > /root/.m2/settings.xml
          infra/scripts/publish-java-sdk.sh --revision ${VERSION_WITHOUT_PREFIX} --gpg-key-import-dir /root
