name: release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  get-version:
    runs-on:  ubuntu-latest
    outputs:
      release_version: ${{ steps.get_release_version.outputs.release_version }}
      version_without_prefix: ${{ steps.get_release_version_without_prefix.outputs.version_without_prefix }}
      highest_semver_tag: ${{ steps.get_highest_semver.outputs.highest_semver_tag }}
    steps:
      - uses: actions/checkout@v2
      - name: Get release version
        id: get_release_version
        run: echo ::set-output name=release_version::${GITHUB_REF#refs/*/}
      - name: Get release version without prefix
        id: get_release_version_without_prefix
        env:
          RELEASE_VERSION: ${{ steps.get_release_version.outputs.release_version }}
        run: |
          echo ::set-output name=version_without_prefix::${RELEASE_VERSION:1}
      - name: Get highest semver
        id: get_highest_semver
        env:
          RELEASE_VERSION: ${{ steps.get_release_version.outputs.release_version }}
        run: |
          source infra/scripts/setup-common-functions.sh
          SEMVER_REGEX='^v[0-9]+\.[0-9]+\.[0-9]+(-([0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*))?$'
          if echo "${RELEASE_VERSION}" | grep -P "$SEMVER_REGEX" &>/dev/null ; then
            echo ::set-output name=highest_semver_tag::$(get_tag_release -m)
          fi
      - name: Check output
        env:
          RELEASE_VERSION: ${{ steps.get_release_version.outputs.release_version }}
          VERSION_WITHOUT_PREFIX: ${{ steps.get_release_version_without_prefix.outputs.version_without_prefix }}
          HIGHEST_SEMVER_TAG: ${{ steps.get_highest_semver.outputs.highest_semver_tag }}
        run: |
          echo $RELEASE_VERSION
          echo $VERSION_WITHOUT_PREFIX
          echo $HIGHEST_SEMVER_TAG

  build-publish-docker-images:
    runs-on: ubuntu-latest
    needs: get-version
    strategy:
      matrix:
        component: [feature-server-python-aws, feature-server-java, feature-transformation-server]
    env:
      MAVEN_CACHE: gs://feast-templocation-kf-feast/.m2.2020-08-19.tar
      REGISTRY: feastdev
    steps:
      - uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      - name: Use gcloud CLI
        run: gcloud info
      - run: gcloud auth configure-docker --quiet
      - name: Get m2 cache
        run: |
          infra/scripts/download-maven-cache.sh \
          --archive-uri ${MAVEN_CACHE} \
          --output-dir .
      - name: Build image
        run: |
          make build-${{ matrix.component }}-docker REGISTRY=${REGISTRY} VERSION=${RELEASE_VERSION}
        env:
          RELEASE_VERSION: ${{ needs.get-version.outputs.release_version }}
          VERSION_WITHOUT_PREFIX: ${{ needs.get-version.outputs.version_without_prefix }}
          HIGHEST_SEMVER_TAG: ${{ needs.get-version.outputs.highest_semver_tag }}
      - name: Push versioned images
        env:
          RELEASE_VERSION: ${{ needs.get-version.outputs.release_version }}
          VERSION_WITHOUT_PREFIX: ${{ needs.get-version.outputs.version_without_prefix }}
          HIGHEST_SEMVER_TAG: ${{ needs.get-version.outputs.highest_semver_tag }}
        run: |
          make push-${{ matrix.component }}-docker REGISTRY=${REGISTRY} VERSION=${RELEASE_VERSION}

          echo "Only push to latest tag if tag is the highest semver version $HIGHEST_SEMVER_TAG"
          if [ "${VERSION_WITHOUT_PREFIX}" = "${HIGHEST_SEMVER_TAG:1}" ]
          then
            docker tag feastdev/${{ matrix.component }}:${VERSION_WITHOUT_PREFIX} feastdev/feast-${{ matrix.component }}:latest
            docker push feastdev/${{ matrix.component }}:latest
          fi

  publish-helm-charts:
    runs-on:  ubuntu-latest
    needs: get-version
    env:
      HELM_VERSION: v2.17.0
      VERSION_WITHOUT_PREFIX: ${{ needs.get-version.outputs.version_without_prefix }}
    steps:
      - uses: actions/checkout@v2
      - uses: google-github-actions/setup-gcloud@master
        with:
          version: '290.0.1'
          export_default_credentials: true
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
      - run: gcloud auth configure-docker --quiet
      - name: Remove previous Helm
        run: sudo rm -rf $(which helm)
      - name: Install Helm
        run: ./scripts/helm/install-helm.sh
      - name: Validate Helm chart prior to publishing
        run: ./scripts/helm/validate-helm-chart-publish.sh
      - name: Validate all version consistency
        run: ./scripts/helm/validate-helm-chart-versions.sh $VERSION_WITHOUT_PREFIX
      - name: Publish Helm charts
        run: ./scripts/helm/push-helm-charts.sh $VERSION_WITHOUT_PREFIX

  publish-python-sdk:
    runs-on: ubuntu-latest
    env:
      TWINE_USERNAME: __token__
      TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
    container: python:3.7
    steps:
      - uses: actions/checkout@v2
      - name: Install pip-tools
        run: pip install pip-tools
      - name: Install dependencies
        run: make install-python-ci-dependencies PYTHON=3.7
      - name: Publish Python Package
        run: |
          cd sdk/python
          python3 -m pip install --user --upgrade setuptools wheel twine
          python3 setup.py sdist bdist_wheel
          python3 -m twine upload --verbose dist/*

    # TODO(adchia): publish java sdk once maven repo is updated
    # See https://github.com/feast-dev/feast-java/blob/master/.github/workflows/release.yml#L104