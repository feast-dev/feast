# Required environment variables to supply for this template:
# ============================================================
# - BUILD_ID
# - FEAST_IMAGE_TAG
# - FEAST_WAREHOUSE_DATASET
#
# Required only if using the Ambassador annotations:
# - FEAST_CORE_URL
# - FEAST_SERVING_URL

core:
  projectId: "kf-feast"
  image: 
    registry: us.gcr.io/kf-feast
    repository: feast-core
    tag: ${FEAST_IMAGE_TAG}
  replicaCount: 1
  resources: 
    requests: 
      cpu: 1
      memory: 2G
  readinessProbe:
    initialDelaySeconds: 15
  service:
    annotations:
      getambassador.io/config: |
        ---
        apiVersion: ambassador/v1
        kind: Mapping
        name: feast_core_grpc_core_service_mapping_build_${BUILD_ID}
        grpc: True
        headers:
          :authority: ${FEAST_CORE_URL}
        prefix: /feast.core.CoreService
        rewrite: /feast.core.CoreService
        service: feast-${BUILD_ID}-core:6565
        timeout_ms: 60000
        ---
        apiVersion: ambassador/v1
        kind: Mapping
        name: feast_core_grpc_job_service_mapping_build_${BUILD_ID}
        grpc: True
        headers:
          :authority: ${FEAST_CORE_URL}
        prefix: /feast.core.JobService
        rewrite: /feast.core.JobService
        service: feast-${BUILD_ID}-core:6565
        timeout_ms: 120000
        ---
        apiVersion: ambassador/v1
        kind: Mapping
        name: feast_core_grpc_ui_service_mapping_build_${BUILD_ID}
        grpc: True
        headers:
          :authority: ${FEAST_CORE_URL}
        prefix: /feast.core.UIService
        rewrite: /feast.core.UIService
        service: feast-${BUILD_ID}-core:6565
        ---
        apiVersion: ambassador/v1
        kind: Mapping
        name: feast_core_grpc_dataset_service_mapping_build_${BUILD_ID}
        grpc: True
        headers:
          :authority: ${FEAST_CORE_URL}
        prefix: /feast.core.DatasetService
        rewrite: /feast.core.DatasetService
        service: feast-${BUILD_ID}-core:6565
    grpc: 
      port: 6565
      targetPort: 6565
    http: 
      port: 80
      targetPort: 8080
  jobs:
    workspace: "gs://feast-templocation-kf-feast"
    runner: DirectRunner
    options: "{}"
    errorStoreType: "stdout"
    errorStoreOptions: "{}"
  trainingDatasetPrefix: "fs"
  logType: JSON

store:
 errors:
   type: "stdout"
 warehouse:
   type: "bigquery"
   options: '{"project": "kf-feast", "dataset": "${FEAST_WAREHOUSE_DATASET}", "tempLocation": "gs://feast-templocation-kf-feast/warehouse_build_${BUILD_ID}"}'
 serving:
   type: "redis"
   options: '{"host": "feast-${BUILD_ID}-redis-master", "port": "6379"}'

global:
  postgresql:
    # Hardcoded password here because this Feast is only for testing
    postgresqlPassword: HaeYeeMa7eD1

postgresql: 
  provision: true
  persistence:
    enabled: false

redis:
  provision: true
  usePassword: false
  cluster:
    enabled: false
  master:
    persistence:
      enabled: false

serving: 
  image: 
    registry: us.gcr.io/kf-feast
    repository: feast-serving
    tag: ${FEAST_IMAGE_TAG}
  replicaCount: 1
  readinessProbe:
    initialDelaySeconds: 15
  service: 
    annotations:
      getambassador.io/config: |
        ---
        apiVersion: ambassador/v1
        kind: Mapping
        name: feast_serving_grpc_serving_api_mapping_build_${BUILD_ID}
        grpc: True
        headers:
          :authority: ${FEAST_SERVING_URL}
        prefix: /feast.serving.ServingAPI
        rewrite: /feast.serving.ServingAPI
        service: feast-${BUILD_ID}-serving:6565
        timeout_ms: 30000
    grpc: 
      port: 6565
      targetPort: 6565
    http: 
      port: 80
      targetPort: 8080

# Enable only if you have an existing service account you 
# want to mount the secret of.
serviceAccount:
  name: feast-service-account
  key: service-account.json
