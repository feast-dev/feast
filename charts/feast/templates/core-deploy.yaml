apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "feast.core.name" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "feast.name" . }}
    component: core
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.core.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "feast.name" . }}
      component: core
      release: {{ .Release.Name }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{ .Values.core.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.core.rollingUpdate.maxUnavailable }}
  template:
    metadata:
      labels:
        app: {{ template "feast.name" . }}
        component: core
        release: {{ .Release.Name }}
    spec:
      containers:
      - name: {{ template "feast.core.name" . }}
        image: "{{ .Values.core.image.registry }}/{{ .Values.core.image.repository }}:{{ .Values.core.image.tag }}"
        imagePullPolicy: {{ .Values.core.image.pullPolicy }}
        ports:
          - containerPort: {{ .Values.core.service.http.targetPort }}
            name: "http"
          - containerPort: {{ .Values.core.service.grpc.targetPort }}
            name: "grpc"
        livenessProbe:
          httpGet:
            path: /ping
            port: {{ .Values.core.service.http.targetPort }}
            scheme: HTTP
          initialDelaySeconds: {{ .Values.core.livenessProbe.initialDelaySeconds }}
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
          failureThreshold: {{ .Values.core.livenessProbe.failureThreshold }}
        readinessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.core.service.http.targetPort }}
            scheme: HTTP
          initialDelaySeconds: {{ .Values.core.readinessProbe.initialDelaySeconds }}
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 3
          failureThreshold: {{ .Values.core.readinessProbe.failureThreshold }}
        resources:
          requests:
            cpu: {{ .Values.core.resources.requests.cpu }}
            memory: {{ .Values.core.resources.requests.memory }}
          limits:
            cpu: {{ .Values.core.resources.limits.cpu }}
            memory: {{ .Values.core.resources.limits.memory }}
        {{- if .Values.serviceAccount }}
        volumeMounts:
          - name: "{{ .Values.serviceAccount.name }}"
            mountPath: "/etc/gcloud/service-accounts"
            readOnly: true
        {{- end }}
        env:
          - name: GRPC_PORT
            value: "{{ .Values.core.service.grpc.targetPort }}"
          - name: DB_HOST
            value: {{ printf "%s.%s.svc.cluster.local" (include "postgresql.fullname" .) .Release.Namespace }}
          - name: DB_PORT
            value: "{{ .Values.postgresql.service.port }}"
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ template "postgresql.secretName" . }}
                key: postgresql-password
          - name: LOG_TYPE
            value: {{ .Values.core.logType }}
          - name: PROJECT_ID
            value: "{{ .Values.core.projectId}}"
          - name: TRAINING_DATASET_PREFIX
            value: "{{ .Values.core.trainingDatasetPrefix }}"
          - name: JOB_RUNNER
            value: {{ .Values.core.jobs.runner }}
          - name: JOB_WORKSPACE
            value: {{ .Values.core.jobs.workspace }}
          - name: JOB_OPTIONS
            value: {{ .Values.core.jobs.options | toJson}}
          - name: JOB_MONITOR_PERIOD_MS
            value: "{{ .Values.core.jobs.monitoring.period }}"
          - name: JOB_MONITOR_INITIAL_DELAY_MS
            value: "{{ .Values.core.jobs.monitoring.initialDelay }}"
          {{- if .Values.store }}
          {{- if .Values.store.serving }}
          - name: STORE_SERVING_TYPE
            value: {{ .Values.store.serving.type }}
          - name: STORE_SERVING_OPTIONS
            value: {{ .Values.store.serving.options | toJson}}
          {{- end }}
          {{- if .Values.store.warehouse }}
          - name: STORE_WAREHOUSE_TYPE
            value: {{ .Values.store.warehouse.type }}
          - name: STORE_WAREHOUSE_OPTIONS
            value: {{ .Values.store.warehouse.options | toJson}}
          {{- end }}
          {{- if .Values.store.errors }}
          - name: STORE_ERRORS_TYPE
            value: {{ .Values.store.errors.type }}
          - name: STORE_ERRORS_OPTIONS
            value: {{ .Values.store.errors.options | toJson}}
          {{- end }}
          {{- end }}
          - name: STATSD_HOST
            value: {{ .Values.statsd.host }}
          - name: STATSD_PORT
            value: "{{ .Values.statsd.port }}"
          {{- if .Values.dataflow }}
          - name: DATAFLOW_PROJECT_ID
            value: {{ .Values.dataflow.projectID }}
          - name: DATAFLOW_LOCATION
            value: {{ .Values.dataflow.location }}
          {{- end }}
          {{- if .Values.serviceAccount }}
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /etc/gcloud/service-accounts/{{ .Values.serviceAccount.key }}
      volumes:
        - name: "{{ .Values.serviceAccount.name }}"
          secret:
            secretName: "{{ .Values.serviceAccount.name }}"
          {{- end }}