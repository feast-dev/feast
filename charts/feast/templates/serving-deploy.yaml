apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "feast.serving.name" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "feast.name" . }}
    component: serving
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.serving.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "feast.name" . }}
      component: serving
      release: {{ .Release.Name }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{ .Values.serving.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.serving.rollingUpdate.maxUnavailable }}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: {{ template "feast.name" . }}
        component: serving
        release: {{ .Release.Name }}
    spec:
      containers:
      - name: {{ template "feast.serving.name" . }}
        image: "{{ .Values.serving.image.registry }}/{{ .Values.serving.image.repository }}:{{ .Values.serving.image.tag }}"
        imagePullPolicy: {{ .Values.serving.image.pullPolicy }}
        ports:
          - containerPort: {{ .Values.serving.service.grpc.targetPort }}
            name: grpc
          - containerPort: {{ .Values.serving.service.http.targetPort }}
            name: http
        livenessProbe:
          httpGet:
            path: /ping
            port: {{ .Values.serving.service.http.targetPort }}
            scheme: HTTP
          initialDelaySeconds: {{ .Values.serving.livenessProbe.initialDelaySeconds }}
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
          failureThreshold: {{ .Values.serving.livenessProbe.failureThreshold }}
        readinessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.serving.service.http.targetPort }}
            scheme: HTTP
          initialDelaySeconds: {{ .Values.serving.readinessProbe.initialDelaySeconds }}
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 3
          failureThreshold: {{ .Values.serving.readinessProbe.failureThreshold }}
        resources:
          requests:
            cpu: "{{ .Values.serving.resources.requests.cpu }}"
            memory: "{{ .Values.serving.resources.requests.memory }}"
          limits:
            cpu: "{{ .Values.serving.resources.limits.cpu }}"
            memory: "{{ .Values.serving.resources.limits.memory }}"
        env:
          - name: FEAST_SERVING_HTTP_PORT
            value: "{{ .Values.serving.service.http.targetPort }}"
          - name: FEAST_SERVING_GRPC_PORT
            value: "{{ .Values.serving.service.grpc.targetPort }}"
          - name: FEAST_CORE_HOST
            value: "{{ printf "%s.%s.svc.cluster.local" (include "feast.core.name" .) .Release.Namespace }}"
          - name: FEAST_CORE_GRPC_PORT
            value: "{{ .Values.core.service.grpc.port }}"
          - name: STORE_SERVING_TYPE
            value: {{ .Values.store.serving.type }}
          - name: STORE_SERVING_OPTIONS
            value: {{ .Values.store.serving.options | toJson }}
          - name: FEAST_MAX_NB_THREAD
            value: "{{ .Values.serving.config.maxNumberOfThread }}"
          - name: FEAST_MAX_ENTITY_PER_BATCH
            value: "{{ .Values.serving.config.maxEntityPerBatch }}"
          - name: FEAST_RETRIEVAL_TIMEOUT
            value: "{{ .Values.serving.config.timeout }}"
          - name: FEAST_REDIS_POOL_MAX_SIZE
            value: "{{ .Values.serving.config.redisPool.maxSize }}"
          - name: FEAST_REDIS_POOL_MAX_IDLE
            value: "{{ .Values.serving.config.redisPool.maxIdle }}"
          - name: STATSD_HOST
            value: "{{ .Values.statsd.host }}"
          - name: STATSD_PORT
            value: "{{ .Values.statsd.port }}"
          {{- if .Values.serving.jaeger.enabled }}
          - name: JAEGER_ENABLED
            value: "{{ .Values.serving.jaeger.enabled }}"
          - name: JAEGER_AGENT_HOST
            value: "{{ .Values.serving.jaeger.host }}"
          - name: JAEGER_AGENT_PORT
            value: "{{ .Values.serving.jaeger.port }}"
          - name: JAEGER_SAMPLER_TYPE
            value: "{{ .Values.serving.jaeger.options.samplerType }}"
          - name: JAEGER_SAMPLER_PARAM
            value: "{{ .Values.serving.jaeger.options.samplerParam }}"
          {{- end }}
