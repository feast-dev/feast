--- 
core:
  projectId: "gcp-project-id"
  image: 
    pullPolicy: IfNotPresent
    registry: gcr.io/kf-feast
    repository: feast-core
    tag: "1234"
  replicaCount: 1
  resources: 
    limits: 
      cpu: 4
      memory: 8G
    requests: 
      cpu: 2
      memory: 4G
  rollingUpdate: 
    maxSurge: 2
    maxUnavailable: 0
  service: 
    type: ClusterIP
    grpc: 
      port: 6565
      targetPort: 6565
    http: 
      port: 80
      targetPort: 8080
    # loadBalancerSourceRanges sets the accepted IP ranges for firewall ingress rule
    # this firewall rule is usually created when the service type is "LoadBalancer"
    # loadBalancerSourceRanges: ["10.0.0.0/8"]
  jobs:
    workspace: "/tmp"
    runner: DirectRunner
    options: "{}"
    errorStoreType: "stdout"
    errorStoreOptions: "{}"
    monitoring:
      period: 5000
      initialDelay: 60000
  trainingDatasetPrefix: "fs"
  # logType: JSON
  livenessProbe:
    initialDelaySeconds: 120
    failureThreshold: 3
  readinessProbe:
    initialDelaySeconds: 60
    failureThreshold: 1

#store:
#  errors:
#    type: "stdout"
#  warehouse:
#    type: "bigquery"
#    options: '{"project": "gcp-project-id", "dataset": "feast"}'
#  serving:
#    type: "redis"
#    options: '{"host": "...", "port": "6379"}'

# postgresql: 
#   provision: true
#   persistence:
#     enabled: false
    
# redis:
#   provision: true
#   cluster:
#     enabled: false

serving: 
  config: 
    maxEntityPerBatch: 2000
    maxNumberOfThread: 128
    redisPool: 
      maxIdle: 16
      maxSize: 128
    timeout: 5
  image: 
    pullPolicy: IfNotPresent
    registry: gcr.io/kf-feast
    repository: feast-serving
    tag: "1234"
  replicaCount: 1
  resources: 
    limits: 
      cpu: 2
      memory: 4G
    requests: 
      cpu: 1
      memory: 2G
  rollingUpdate: 
    maxSurge: 2
    maxUnavailable: 0
  service: 
    type: ClusterIP
    grpc: 
      port: 6565
      targetPort: 6565
    http: 
      port: 80
      targetPort: 8080
    # loadBalancerSourceRanges sets the accepted IP ranges for firewall ingress rule
    # this firewall rule is usually created when the service type is "LoadBalancer"
    # loadBalancerSourceRanges: ["10.0.0.0/8"]
  jaeger:
    enabled: false
  livenessProbe:
    initialDelaySeconds: 120
    failureThreshold: 3
  readinessProbe:
    initialDelaySeconds: 60
    failureThreshold: 1

# Enable only if you have an existing service account you 
# want to mount the secret of.
# serviceAccount:
#   name: feast-service-account
#   key: feast-service-account-key

statsd:
  host: "localhost"
  port: 8125
