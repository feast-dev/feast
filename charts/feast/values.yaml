# [required]
# global.postgresql.secretName is an existing Kubernetes secret name containing Postgresql password
# The secret needs to have this key: postgresql-password
#
# Example of how to generate this secret:
# kubectl create secret generic <feast_helm_release_name>-postgresql \
#   --from-literal=postgresql-password=<postgresql_password>
#
# With the example above the secretName will be <feast_helm_release_name>-postgresql
# 
# global:
#  postgresql:
#    secretName: <existing_kubernetes_secret_name_containing_postgresql_credentials>

core:
  projectId: "gcp-project-id"
  image: 
    pullPolicy: IfNotPresent
    registry: gcr.io/kf-feast
    repository: feast-core
    tag: "0.1.7"
  replicaCount: 1
  resources: 
    requests: 
      cpu: 1
      memory: 2G
  rollingUpdate: 
    maxSurge: 2
    maxUnavailable: 0
  service: 
    type: ClusterIP
    grpc: 
      port: 6565
      targetPort: 6565
    http: 
      port: 80
      targetPort: 8080
    # loadBalancerSourceRanges sets the accepted IP ranges for firewall ingress rule
    # this firewall rule is usually created when the service type is "LoadBalancer"
    # loadBalancerSourceRanges: ["10.0.0.0/8"]
  jobs:
    workspace: "/tmp"
    # runner specifies the Beam pipeline runner, use either DirectRunner (for development) or DataflowRunner (for production)
    runner: DirectRunner
    options: "{}"
    errorStoreType: "stdout"
    errorStoreOptions: "{}"
    monitoring:
      period: 5000
      initialDelay: 60000
    # writeFeatureMetricsToInfluxDb specifies whether Feast import job will write feature metrics (such as feature lag and values summaries) to Influx DB for monitoring and alert purpose
    writeFeatureMetricsToInfluxDb: false 
    # influxDbUrl, influxDbDatabase and influxDbMeasurement sets the Influx DB configuration where Feast import job will write the feature metrics
    # Uncomment the following 3 fields if writeFeatureMetricsToInfluxDb = true
    #
    # influxDbUrl: http://localhost:8086
    # influxDbDatabase: influx_db_database
    # influxDbMeasurement: influx_db_measurement
  trainingDatasetPrefix: "fs"
  # logType: JSON
  livenessProbe:
    initialDelaySeconds: 120
    failureThreshold: 3
  readinessProbe:
    initialDelaySeconds: 60
    failureThreshold: 1

# dataflow configuration is required when core.jobs.runner=DataflowRunner
# dataflow:
#   projectID: ${GCP_PROJECT}
#   location: ${GCP_REGION}

store:
 errors:
   type: "stdout"
 warehouse:
   type: "bigquery"
   # options: '{"project": "gcp-project-id", "dataset": "feast"}'
 serving:
   type: "redis"
   # options: '{"host": "redis-master", "port": "6379"}'

postgresql: 
  provision: true
  persistence:
    enabled: true
    
redis:
  provision: false
  cluster:
    enabled: false

serving: 
  config: 
    maxEntityPerBatch: 2000
    maxNumberOfThread: 128
    redisPool: 
      maxIdle: 16
      maxSize: 128
    timeout: 5
  image: 
    pullPolicy: IfNotPresent
    registry: gcr.io/kf-feast
    repository: feast-serving
    tag: "0.1.7"
  replicaCount: 1
  resources: 
    requests: 
      cpu: 1
      memory: 1G
  rollingUpdate: 
    maxSurge: 2
    maxUnavailable: 0
  service: 
    type: ClusterIP
    grpc: 
      port: 6565
      targetPort: 6565
    http: 
      port: 80
      targetPort: 8080
    # loadBalancerSourceRanges sets the accepted IP ranges for firewall ingress rule
    # this firewall rule is usually created when the service type is "LoadBalancer"
    # loadBalancerSourceRanges: ["10.0.0.0/8"]
  jaeger:
    enabled: false
    # options:
    #   samplerType: constants
    #   samplerParam: 1
  livenessProbe:
    initialDelaySeconds: 120
    failureThreshold: 3
  readinessProbe:
    initialDelaySeconds: 30
    failureThreshold: 1

# Enable only if you have an existing service account you 
# want to mount the secret of.
# serviceAccount:
#   name: feast-service-account
#   key: service-account.json

statsd:
  host: "localhost"
  port: 8125
