feast:
  # This value is retrieved from project.version properties in pom.xml
  # https://docs.spring.io/spring-boot/docs/current/reference/html/
  version: @project.version@
  # GRPC service address for Feast Core
  # Feast Serving requires connection to Feast Core to retrieve and reload Feast metadata (e.g. FeatureSpecs, Store information)
  core-host: ${FEAST_CORE_HOST:localhost}
  core-grpc-port: ${FEAST_CORE_GRPC_PORT:6565}

  tracing:
    # If true, Feast will provide tracing data (using OpenTracing API) for various RPC method calls
    # which can be useful to debug performance issues and perform benchmarking
    enabled: false
    # Only Jaeger tracer is supported currently
    # https://opentracing.io/docs/supported-tracers/
    tracer-name: jaeger
    # The service name identifier for the tracing data
    service-name: feast_serving

  store:
    # Path containing the store configuration for this serving store.
    config-path: ${FEAST_STORE_CONFIG_PATH:serving/sample_redis_config.yml}
    # If serving redis, the redis pool max size
    redis-pool-max-size: ${FEAST_REDIS_POOL_MAX_SIZE:128}
    # If serving redis, the redis pool max idle conns
    redis-pool-max-idle: ${FEAST_REDIS_POOL_MAX_IDLE:16}

  jobs:
    # job-staging-location specifies the URI to store intermediate files for batch serving.
    # Feast Serving client is expected to have read access to this staging location
    # to download the batch features.
    #
    # For example: gs://mybucket/myprefix
    # Please omit the trailing slash in the URI.
    staging-location: ${FEAST_JOB_STAGING_LOCATION:}
    # Type of store to store job metadata. This only needs to be set if the
    # serving store type is Bigquery.
    store-type: ${FEAST_JOB_STORE_TYPE:}
    #
    # Job store connection options. If the job store is redis, the following items are required:
    #
    # store-options:
    #   host: localhost
    #   port: 6379
    store-options: {}

grpc:
  # The port number Feast Serving GRPC service should listen on
  # It is set default to 6566 so it does not conflict with the GRPC server on Feast Core
  # which defaults to port 6565
  port: ${GRPC_PORT:6566}
  # This allows client to discover GRPC endpoints easily
  # https://github.com/grpc/grpc-java/blob/master/documentation/server-reflection-tutorial.md
  enable-reflection: ${GRPC_ENABLE_REFLECTION:true}

server:
  # The port number on which the Tomcat webserver that serves REST API endpoints should listen
  # It is set by default to 8081 so it does not conflict with Tomcat webserver on Feast Core
  # if both Feast Core and Serving are running on the same machine
  port: ${SERVER_PORT:8081}