feast:
  # GRPC service address for Feast Core
  # Feast Serving requires connection to Feast Core to retrieve and reload Feast metadata (e.g. FeatureSpecs, Store information)
  core-host: ${FEAST_CORE_HOST:localhost}
  core-grpc-port: ${FEAST_CORE_GRPC_PORT:6565}
  
  core-authentication:
    enabled: false # should be set to true if authentication is enabled on core.
    provider: google # can be set to `oauth` or `google`
    # if google, GOOGLE_APPLICATION_CREDENTIALS environment variable should be set.
    options:
      #if provider is oauth following properties need to be set, else serving boot up will fail.
      oauth_url: https://localhost/oauth/token #oauth token request url
      grant_type: client_credentials #oauth grant type
      client_id: <client_id> #oauth client id which will be used for jwt token token request
      client_secret: <client_secret> #oauth client secret which will be used for jwt token token request
      audience: https://localhost #token audience.
      jwkEndpointURI: <jwkEndpointURI> #jwk enpoint uri, used for caching token till expiry.
      

  # Indicates the active store. Only a single store in the last can be active at one time. In the future this key
  # will be deprecated in order to allow multiple stores to be served from a single serving instance
  active_store: online
  
  security:
    authentication:
      enabled: false
      provider: jwt
      options:
        jwkEndpointURI: "https://www.googleapis.com/oauth2/v3/certs"
        subjectClaim: email

    authorization:
      enabled: false
      provider: http
      options:
        basePath: http://localhost:3000

  # List of store configurations
  stores:
      # Please see https://api.docs.feast.dev/grpc/feast.core.pb.html#Store for configuration options
    - name: online # Name of the store (referenced by active_store)
      type: REDIS # Type of the store. REDIS, REDIS_CLUSTER, BIGQUERY are available options
      config:  # Store specific configuration. See
        host: localhost
        port: 6379
      # Subscriptions indicate which feature sets needs to be retrieved and used to populate this store
      subscriptions:
        # Wildcards match all options. No filtering is done.
        - name: "*"
          project: "*"
    - name: online_cluster
      type: REDIS_CLUSTER
      config:  # Store specific configuration.
        # Connection string specifies the host:port of Redis instances in the redis cluster.
        connection_string: "localhost:7000,localhost:7001,localhost:7002,localhost:7003,localhost:7004,localhost:7005" 
      subscriptions:
        - name: "*"
          project: "*"
          version: "*"
    - name: historical
      type: BIGQUERY
      config:  # Store specific configuration.
        # GCP Project
        project_id: my_project
        # BigQuery Dataset Id
        dataset_id: my_dataset
        # staging-location specifies the URI to store intermediate files for batch serving.
        # Feast Serving client is expected to have read access to this staging location
        # to download the batch features.
        # For example: gs://mybucket/myprefix
        # Please omit the trailing slash in the URI.
        staging_location: gs://mybucket/myprefix
        # Retry options for BigQuery retrieval jobs
        initial_retry_delay_seconds: 1
        # BigQuery timeout for retrieval jobs
        total_timeout_seconds: 21600
        # BigQuery sink write frequency
        write_triggering_frequency_seconds: 600
      subscriptions:
        - name: "*"
          project: "*"

  tracing:
    # If true, Feast will provide tracing data (using OpenTracing API) for various RPC method calls
    # which can be useful to debug performance issues and perform benchmarking
    enabled: false
    # Only Jaeger tracer is supported currently
    # https://opentracing.io/docs/supported-tracers/
    tracer-name: jaeger
    # The service name identifier for the tracing data
    service-name: feast_serving

  # The job store is used to maintain job management state for Feast Serving. This is required when using certain
  # historical stores like BigQuery. Only Redis is supported as a job store.
  job_store:
    # Redis host to connect to
    redis_host: localhost
    # Redis port to connect to
    redis_port: 6379

  logging:
    # Audit logging provides a machine readable structured JSON log that can give better 
    # insight into what is happening in Feast.
    audit:
      # Whether audit logging is enabled. 
      enabled: true
      # Whether to enable message level (ie request/response) audit logging
      messageLoggingEnabled: false

grpc:
  server:
    # The port number Feast Serving GRPC service should listen on
    # It is set default to 6566 so it does not conflict with the GRPC server on Feast Core
    # which defaults to port 6565
    port: ${GRPC_PORT:6566}
    security:
      enabled: false
      certificateChain: server.crt
      privateKey: server.key

server:
  # The port number on which the Tomcat webserver that serves REST API endpoints should listen
  # It is set by default to 8081 so it does not conflict with Tomcat webserver on Feast Core
  # if both Feast Core and Serving are running on the same machine
  port: ${SERVER_PORT:8081}
