feature-server:
  application-override.yaml: # This key is literal, based on the example structure
    enabled: true # Typically a flag for Helm or similar deployment systems
    feast:
      project: "feast_java_optimized_demo" # Project name, can be overridden by global.project
      registry: "java/serving/src/main/resources/registry.pb" # Registry path, can be overridden by global.registry.path
      registryRefreshInterval: 60 # Refresh registry from source every 60 seconds. 0 to disable.
      entityKeySerializationVersion: 2 # Use V2 for Redis key serialization (more efficient)
      retrieverThreadPoolSize: 16 # Number of threads for the OptimizedRedisOnlineRetriever's executor service. 0 for auto (CPU cores).

      # Indicates the active store. Only a single store in the list can be active at one time.
      activeStore: "online_cluster_optimized" # Example: using the optimized cluster store by default

      # List of store configurations
      stores:
        - name: "online_redis_optimized" # Name of the store (referenced by activeStore)
          type: REDIS # Type of the store. REDIS or REDIS_CLUSTER
          config: # Store specific configuration.
            host: "localhost" # Replace with your Redis host
            port: 6379 # Replace with your Redis port
            password: "" # Optional: Your Redis password
            ssl: false # Optional: Enable SSL for Redis connection
            sslVerifyPeer: true # Optional: Verify peer certificate if SSL is enabled
            database: 0 # Optional: Redis database number
            # Connection timeouts
            connectTimeoutMs: 2000 # Connection attempt timeout in milliseconds (e.g., 2000ms)
            timeoutMs: 1000 # Operation timeout in milliseconds (e.g., 1000ms)
            # Connection Pool Settings (for OptimizedRedisClientAdapter)
            poolMaxTotal: 50 # Max total connections in the pool
            poolMaxIdle: 20 # Max idle connections in the pool
            poolMinIdle: 5 # Min idle connections to maintain
            poolTestOnBorrow: true # Validate connections when borrowing from pool
            poolBlockWhenExhausted: true # Block if pool is exhausted, otherwise throw exception

        - name: "online_cluster_optimized"
          type: REDIS_CLUSTER
          config: # Store specific configuration.
            # Connection string specifies the host:port of Redis instances in the redis cluster.
            connection_string: "marketplace-fs-mo-v1.slkos6.clustercfg.aps1.cache.amazonaws.com:6379" # Replace with your cluster nodes
            password: "" # Optional: Password if your cluster nodes require it
            ssl: false # Optional: Enable SSL for cluster connections
            sslVerifyPeer: true # Optional
            read_from: "REPLICA_PREFERRED" # Optimize reads: MASTER, UPSTREAM, NEAREST, REPLICA, REPLICA_PREFERRED, ANY_REPLICA, ANY
            # Connection timeouts
            connectTimeoutMs: 2000 # Connection attempt timeout in milliseconds
            timeoutMs: 1000 # Operation timeout in milliseconds
            clusterRefreshPeriodSec: 30 # How often to refresh cluster topology (seconds)
            # Connection Pool Settings
            poolMaxTotal: 100 # Typically larger pool for cluster environments
            poolMaxIdle: 40
            poolMinIdle: 10
            poolTestOnBorrow: true
            poolBlockWhenExhausted: true

      tracing:
        # If true, Feast will provide tracing data (using OpenTracing API) for various RPC method calls
        # which can be useful to debug performance issues and perform benchmarking
        enabled: true # Set to true for production monitoring
        # Only Jaeger tracer is supported currently via Micrometer Tracing (or direct OpenTracing integration)
        tracerName: "jaeger" # This name might be conceptual; actual setup depends on tracing library
        # The service name identifier for the tracing data
        serviceName: "feast_serving_optimized"

# Global settings, similar to the example override structure
global:
  registry:
    path: "java/serving/src/main/resources/registry.pb" # Overrides the path in feast.registry if this config system is hierarchical
    cache_ttl_seconds: 60 # Corresponds to feast.registryRefreshInterval conceptually
  project: "feast_java_optimized_demo" # Overrides feast.project

# Transformation service placeholder, similar to the example
transformation-service:
  # image:
  #   tag: dev
  # Configuration for the transformation service would go here if needed
  # Example:
  # endpoint: "localhost:6568" # If transformation service is separate
  enabled: false # Assuming it might not be used by default with this config

# gRPC server settings for this Java application instance
# This remains top-level as it configures the running server itself, not the Feast specific definitions.
grpc:
  server:
    # The port number Feast Serving GRPC service should listen on
    port: 6566
